;;; SLR1-parser generated by GRM Parser Builder
;;; (C) 2001-2011, Andrej Andrejev

;;; INPUT-FN is a function returning (terminal . value) pairs
;;; or NIL when input is exhausted
;;; DATA is any data structure transmitted to the parser and visible in reduce actions

(defun sparql-slr1 (input-fn data)
  (let ((stack '((^))) ; contains pairs (key . value), ^ is bottom-marker
        (input (funcall input-fn)) (delayed-input nil))
    (flet ((shift (key) ; SHIFT op
             (push (cons key (cdr input)) stack) ; push new key with input value
             (if delayed-input (progn (setq input delayed-input)
                                      (setq delayed-input nil)) ; restore input after REDUCE
               (setq input (funcall input-fn)))) ; feed input
           (reduce (n) ; REDUCE op: returns list of n top values from stack
             (let ((values nil))
               (dotimes (i n) (push (cdr (pop stack)) values))
               (setq delayed-input input) ; non-terminal will be put into INPUT
               values)))
      (do () (nil t) ; main cycle - no stop condition
       (unless input (setq input (cons '-! nil))) ; end-marker
       (selectq (caar stack) ; outer KEY switch
         (<SIMPLE-FNCALL>-1.1
           (selectq (car input)
            ((-! SEMICOLON) ; REDUCE(1) op
              (setq input (cons '<TL-STAT> (apply #'(LAMBDA (A) (LIST NIL (CONS (QUOTE CALL) A))) (reduce 1)))))
            (return (list 'SYNTAX-ERROR (caar stack) '(-! SEMICOLON) input))))
         (QUIT-2.1
           (selectq (car input)
            ((-! SEMICOLON) ; REDUCE(2) op
              (setq input (cons '<TL-STAT> (apply #'(LAMBDA (A B) (QUOTE (NIL (QUIT)))) (reduce 1)))))
            (return (list 'SYNTAX-ERROR (caar stack) '(-! SEMICOLON) input))))
         (LISP-3.1
           (selectq (car input)
            ((-! SEMICOLON) ; REDUCE(3) op
              (setq input (cons '<TL-STAT> (apply #'(LAMBDA (A B) (QUOTE (NIL (LISP)))) (reduce 1)))))
            (return (list 'SYNTAX-ERROR (caar stack) '(-! SEMICOLON) input))))
         (<PREFIXED-STAT>-11.1
           (selectq (car input)
            ((-! SEMICOLON) ; REDUCE(11) op
              (setq input (cons '<PREFIXED-STAT> (apply #'(LAMBDA (A B) (PUSH A (FIRST B)) B) (reduce 2)))))
            (return (list 'SYNTAX-ERROR (caar stack) '(-! SEMICOLON) input))))
         (<PREFIXED-STAT>-5.1
           (selectq (car input)
            ((-! SEMICOLON) ; REDUCE(5) op
              (setq input (cons '<TL-STAT> (nth 0 (reduce 1)))))
            (return (list 'SYNTAX-ERROR (caar stack) '(-! SEMICOLON) input))))
         (TIMES-17.1
           (selectq (car input)
            ((FOR RIGHT-BRACE LIMIT OFFSET ORDER HAVING GROUP VALUES LEFT-BRACE WHERE FROM -! SEMICOLON) ; REDUCE(17) op
              (setq input (cons '<QUERY> (apply #'(LAMBDA (A B C) (MAKE-SPARQL-STAT :TYPE (QUOTE SELECT) :WHAT (QUOTE (ASTERISK)) :DISTINCT T)) (reduce 3)))))
            (return (list 'SYNTAX-ERROR (caar stack) '(FOR RIGHT-BRACE LIMIT OFFSET ORDER HAVING GROUP VALUES LEFT-BRACE WHERE FROM -! SEMICOLON) input))))
         (<SEL-LIST>-15.1
           (selectq (car input)
            ((FOR RIGHT-BRACE LIMIT OFFSET ORDER HAVING GROUP VALUES LEFT-BRACE WHERE FROM -! SEMICOLON) ; REDUCE(15) op
              (setq input (cons '<QUERY> (apply #'(LAMBDA (A B C) (MAKE-SPARQL-STAT :TYPE (QUOTE SELECT) :WHAT C :DISTINCT T)) (reduce 3)))))
            (return (list 'SYNTAX-ERROR (caar stack) '(FOR RIGHT-BRACE LIMIT OFFSET ORDER HAVING GROUP VALUES LEFT-BRACE WHERE FROM -! SEMICOLON) input))))
         (TIMES-16.1
           (selectq (car input)
            ((FOR RIGHT-BRACE LIMIT OFFSET ORDER HAVING GROUP VALUES LEFT-BRACE WHERE FROM -! SEMICOLON) ; REDUCE(16) op
              (setq input (cons '<QUERY> (apply #'(LAMBDA (A B) (MAKE-SPARQL-STAT :TYPE (QUOTE SELECT) :WHAT (QUOTE (ASTERISK)))) (reduce 2)))))
            (return (list 'SYNTAX-ERROR (caar stack) '(FOR RIGHT-BRACE LIMIT OFFSET ORDER HAVING GROUP VALUES LEFT-BRACE WHERE FROM -! SEMICOLON) input))))
         (<SEL-LIST>-54.1
           (selectq (car input)
            ((FOR RIGHT-BRACE LIMIT OFFSET ORDER HAVING GROUP VALUES LEFT-BRACE WHERE FROM -! SEMICOLON) ; REDUCE(54) op
              (setq input (cons '<SEL-LIST> (apply #'(LAMBDA (A B) (CONS A B)) (reduce 2)))))
            (return (list 'SYNTAX-ERROR (caar stack) '(FOR RIGHT-BRACE LIMIT OFFSET ORDER HAVING GROUP VALUES LEFT-BRACE WHERE FROM -! SEMICOLON) input))))
         (<REL-EXPR>-132.1
           (selectq (car input)
            ((FOR AND RIGHT-BRACE LIMIT OFFSET ORDER HAVING GROUP VALUES LEFT-BRACE WHERE FROM RIGHT-PAR COMMA OR AS -! SEMICOLON) ; REDUCE(132) op
              (setq input (cons '<CONJUNCTION> (apply #'(LAMBDA (A B C) (LIST (QUOTE AND) A C)) (reduce 3)))))
            (return (list 'SYNTAX-ERROR (caar stack) '(FOR AND RIGHT-BRACE LIMIT OFFSET ORDER HAVING GROUP VALUES LEFT-BRACE WHERE FROM RIGHT-PAR COMMA OR AS -! SEMICOLON) input))))
         (RIGHT-PAR-57.1
           (selectq (car input)
            ((FOR RIGHT-BRACE LIMIT OFFSET ORDER HAVING GROUP VALUES LEFT-BRACE WHERE FROM STRING NUMBER TRUE FALSE URI PREF URI-TAIL A UNDERSCORE VAR LEFT-BRACKET LEFT-PAR GRAPH FILTER OPTIONAL BIND DOT -! SEMICOLON) ; REDUCE(57) op
              (setq input (cons '<NAMED-EXPR> (apply #'(LAMBDA (A B C D E) (LIST (QUOTE NAMED) D B)) (reduce 5)))))
            (return (list 'SYNTAX-ERROR (caar stack) '(FOR RIGHT-BRACE LIMIT OFFSET ORDER HAVING GROUP VALUES LEFT-BRACE WHERE FROM STRING NUMBER TRUE FALSE URI PREF URI-TAIL A UNDERSCORE VAR LEFT-BRACKET LEFT-PAR GRAPH FILTER OPTIONAL BIND DOT -! SEMICOLON) input))))
         (RIGHT-PAR-183.1
           (selectq (car input)
            ((FOR RIGHT-BRACKET LEFT-BRACKET A-AND ADIVIDE ATIMES DIVIDE TIMES COLON COMMA NOT IN AGREATER-OR-EQUAL ALESS-OR-EQUAL AGREATER ALESS AEQUAL ANOT-EQUAL GREATER-OR-EQUAL LESS-OR-EQUAL GREATER LESS EQUAL NOT-EQUAL A-OR AMINUS APLUS MINUS PLUS STRING NUMBER TRUE FALSE URI PREF URI-TAIL A UNDERSCORE VAR LEFT-PAR VALUES GRAPH FILTER OPTIONAL BIND LEFT-BRACE DOT RIGHT-BRACE AND LIMIT OFFSET ORDER HAVING GROUP WHERE FROM RIGHT-PAR OR AS -! SEMICOLON) ; REDUCE(183) op
              (setq input (cons '<EXPR-LIST-PAR> (apply #'(LAMBDA (A B) NIL) (reduce 2)))))
            (return (list 'SYNTAX-ERROR (caar stack) '(FOR RIGHT-BRACKET LEFT-BRACKET A-AND ADIVIDE ATIMES DIVIDE TIMES COLON COMMA NOT IN AGREATER-OR-EQUAL ALESS-OR-EQUAL AGREATER ALESS AEQUAL ANOT-EQUAL GREATER-OR-EQUAL LESS-OR-EQUAL GREATER LESS EQUAL NOT-EQUAL A-OR AMINUS APLUS MINUS PLUS STRING NUMBER TRUE FALSE URI PREF URI-TAIL A UNDERSCORE VAR LEFT-PAR VALUES GRAPH FILTER OPTIONAL BIND LEFT-BRACE DOT RIGHT-BRACE AND LIMIT OFFSET ORDER HAVING GROUP WHERE FROM RIGHT-PAR OR AS -! SEMICOLON) input))))
         (RIGHT-PAR-182.1
           (selectq (car input)
            ((FOR RIGHT-BRACKET LEFT-BRACKET A-AND ADIVIDE ATIMES DIVIDE TIMES COLON COMMA NOT IN AGREATER-OR-EQUAL ALESS-OR-EQUAL AGREATER ALESS AEQUAL ANOT-EQUAL GREATER-OR-EQUAL LESS-OR-EQUAL GREATER LESS EQUAL NOT-EQUAL A-OR AMINUS APLUS MINUS PLUS STRING NUMBER TRUE FALSE URI PREF URI-TAIL A UNDERSCORE VAR LEFT-PAR VALUES GRAPH FILTER OPTIONAL BIND LEFT-BRACE DOT RIGHT-BRACE AND LIMIT OFFSET ORDER HAVING GROUP WHERE FROM RIGHT-PAR OR AS -! SEMICOLON) ; REDUCE(182) op
              (setq input (cons '<EXPR-LIST-PAR> (apply #'(LAMBDA (A B C D) (LIST (QUOTE DISTINCT) C)) (reduce 4)))))
            (return (list 'SYNTAX-ERROR (caar stack) '(FOR RIGHT-BRACKET LEFT-BRACKET A-AND ADIVIDE ATIMES DIVIDE TIMES COLON COMMA NOT IN AGREATER-OR-EQUAL ALESS-OR-EQUAL AGREATER ALESS AEQUAL ANOT-EQUAL GREATER-OR-EQUAL LESS-OR-EQUAL GREATER LESS EQUAL NOT-EQUAL A-OR AMINUS APLUS MINUS PLUS STRING NUMBER TRUE FALSE URI PREF URI-TAIL A UNDERSCORE VAR LEFT-PAR VALUES GRAPH FILTER OPTIONAL BIND LEFT-BRACE DOT RIGHT-BRACE AND LIMIT OFFSET ORDER HAVING GROUP WHERE FROM RIGHT-PAR OR AS -! SEMICOLON) input))))
         (<EXPR-LIST>-180.1
           (selectq (car input)
            ((RIGHT-PAR) ; REDUCE(180) op
              (setq input (cons '<EXPR-LIST> (apply #'(LAMBDA (A B C) (CONS A C)) (reduce 3)))))
            (return (list 'SYNTAX-ERROR (caar stack) '(RIGHT-PAR) input))))
         (RIGHT-PAR-181.1
           (selectq (car input)
            ((FOR RIGHT-BRACKET LEFT-BRACKET A-AND ADIVIDE ATIMES DIVIDE TIMES COLON COMMA NOT IN AGREATER-OR-EQUAL ALESS-OR-EQUAL AGREATER ALESS AEQUAL ANOT-EQUAL GREATER-OR-EQUAL LESS-OR-EQUAL GREATER LESS EQUAL NOT-EQUAL A-OR AMINUS APLUS MINUS PLUS STRING NUMBER TRUE FALSE URI PREF URI-TAIL A UNDERSCORE VAR LEFT-PAR VALUES GRAPH FILTER OPTIONAL BIND LEFT-BRACE DOT RIGHT-BRACE AND LIMIT OFFSET ORDER HAVING GROUP WHERE FROM RIGHT-PAR OR AS -! SEMICOLON) ; REDUCE(181) op
              (setq input (cons '<EXPR-LIST-PAR> (apply #'(LAMBDA (A B C) B) (reduce 3)))))
            (return (list 'SYNTAX-ERROR (caar stack) '(FOR RIGHT-BRACKET LEFT-BRACKET A-AND ADIVIDE ATIMES DIVIDE TIMES COLON COMMA NOT IN AGREATER-OR-EQUAL ALESS-OR-EQUAL AGREATER ALESS AEQUAL ANOT-EQUAL GREATER-OR-EQUAL LESS-OR-EQUAL GREATER LESS EQUAL NOT-EQUAL A-OR AMINUS APLUS MINUS PLUS STRING NUMBER TRUE FALSE URI PREF URI-TAIL A UNDERSCORE VAR LEFT-PAR VALUES GRAPH FILTER OPTIONAL BIND LEFT-BRACE DOT RIGHT-BRACE AND LIMIT OFFSET ORDER HAVING GROUP WHERE FROM RIGHT-PAR OR AS -! SEMICOLON) input))))
         (<EXPR-LIST-PAR>-173.1
           (selectq (car input)
            ((FOR RIGHT-BRACKET LEFT-BRACKET A-AND ADIVIDE ATIMES DIVIDE TIMES COLON COMMA OR RIGHT-PAR AS AND NOT IN AGREATER-OR-EQUAL ALESS-OR-EQUAL AGREATER ALESS AEQUAL ANOT-EQUAL GREATER-OR-EQUAL LESS-OR-EQUAL GREATER LESS EQUAL NOT-EQUAL RIGHT-BRACE LIMIT OFFSET ORDER HAVING GROUP VALUES LEFT-BRACE WHERE FROM A-OR AMINUS APLUS MINUS PLUS STRING NUMBER TRUE FALSE URI PREF URI-TAIL A UNDERSCORE VAR LEFT-PAR GRAPH FILTER OPTIONAL BIND DOT -! SEMICOLON) ; REDUCE(173) op
              (setq input (cons '<SIMPLE-FNCALL> (apply #'(LAMBDA (A B) (CONS (CONS (QUOTE ID) A) B)) (reduce 2)))))
            (return (list 'SYNTAX-ERROR (caar stack) '(FOR RIGHT-BRACKET LEFT-BRACKET A-AND ADIVIDE ATIMES DIVIDE TIMES COLON COMMA OR RIGHT-PAR AS AND NOT IN AGREATER-OR-EQUAL ALESS-OR-EQUAL AGREATER ALESS AEQUAL ANOT-EQUAL GREATER-OR-EQUAL LESS-OR-EQUAL GREATER LESS EQUAL NOT-EQUAL RIGHT-BRACE LIMIT OFFSET ORDER HAVING GROUP VALUES LEFT-BRACE WHERE FROM A-OR AMINUS APLUS MINUS PLUS STRING NUMBER TRUE FALSE URI PREF URI-TAIL A UNDERSCORE VAR LEFT-PAR GRAPH FILTER OPTIONAL BIND DOT -! SEMICOLON) input))))
         (TIMES-131.1
           (selectq (car input)
            ((FOR COMMA OR RIGHT-PAR AS RIGHT-BRACE LIMIT OFFSET ORDER HAVING GROUP VALUES LEFT-BRACE WHERE FROM -! SEMICOLON) ; REDUCE(131) op
              (setq input (cons '<EXPR> (apply #'(LAMBDA (A) (QUOTE (ASTERISK))) (reduce 1)))))
            (return (list 'SYNTAX-ERROR (caar stack) '(FOR COMMA OR RIGHT-PAR AS RIGHT-BRACE LIMIT OFFSET ORDER HAVING GROUP VALUES LEFT-BRACE WHERE FROM -! SEMICOLON) input))))
         (<EXPR-LIST-PAR>-137.1
           (selectq (car input)
            ((FOR COMMA OR RIGHT-PAR AS RIGHT-BRACE LIMIT OFFSET ORDER HAVING GROUP VALUES LEFT-BRACE WHERE FROM AND -! SEMICOLON) ; REDUCE(137) op
              (setq input (cons '<REL-EXPR> (apply #'(LAMBDA (A B C D) (LIST (QUOTE NOT) (LIST (QUOTE IN) A D))) (reduce 4)))))
            (return (list 'SYNTAX-ERROR (caar stack) '(FOR COMMA OR RIGHT-PAR AS RIGHT-BRACE LIMIT OFFSET ORDER HAVING GROUP VALUES LEFT-BRACE WHERE FROM AND -! SEMICOLON) input))))
         (<EXPR-LIST-PAR>-136.1
           (selectq (car input)
            ((FOR COMMA OR RIGHT-PAR AS RIGHT-BRACE LIMIT OFFSET ORDER HAVING GROUP VALUES LEFT-BRACE WHERE FROM AND -! SEMICOLON) ; REDUCE(136) op
              (setq input (cons '<REL-EXPR> (apply #'(LAMBDA (A B C) (LIST (QUOTE IN) A C)) (reduce 3)))))
            (return (list 'SYNTAX-ERROR (caar stack) '(FOR COMMA OR RIGHT-PAR AS RIGHT-BRACE LIMIT OFFSET ORDER HAVING GROUP VALUES LEFT-BRACE WHERE FROM AND -! SEMICOLON) input))))
         (NOT-EQUAL-138.1
           (selectq (car input)
            ((URI-CAST URI-TAIL-CAST ID VAR LEFT-PAR NOT FALSE TRUE NUMBER STRING MINUS PLUS URI PREF URI-TAIL A UNDERSCORE) ; REDUCE(138) op
              (setq input (cons '<COMPARE-OP> (apply #'(LAMBDA (A) (QUOTE !=)) (reduce 1)))))
            (return (list 'SYNTAX-ERROR (caar stack) '(URI-CAST URI-TAIL-CAST ID VAR LEFT-PAR NOT FALSE TRUE NUMBER STRING MINUS PLUS URI PREF URI-TAIL A UNDERSCORE) input))))
         (EQUAL-139.1
           (selectq (car input)
            ((URI-CAST URI-TAIL-CAST ID VAR LEFT-PAR NOT FALSE TRUE NUMBER STRING MINUS PLUS URI PREF URI-TAIL A UNDERSCORE) ; REDUCE(139) op
              (setq input (cons '<COMPARE-OP> (apply #'(LAMBDA (A) (QUOTE =)) (reduce 1)))))
            (return (list 'SYNTAX-ERROR (caar stack) '(URI-CAST URI-TAIL-CAST ID VAR LEFT-PAR NOT FALSE TRUE NUMBER STRING MINUS PLUS URI PREF URI-TAIL A UNDERSCORE) input))))
         (LESS-140.1
           (selectq (car input)
            ((URI-CAST URI-TAIL-CAST ID VAR LEFT-PAR NOT FALSE TRUE NUMBER STRING MINUS PLUS URI PREF URI-TAIL A UNDERSCORE) ; REDUCE(140) op
              (setq input (cons '<COMPARE-OP> (apply #'(LAMBDA (A) (QUOTE <)) (reduce 1)))))
            (return (list 'SYNTAX-ERROR (caar stack) '(URI-CAST URI-TAIL-CAST ID VAR LEFT-PAR NOT FALSE TRUE NUMBER STRING MINUS PLUS URI PREF URI-TAIL A UNDERSCORE) input))))
         (GREATER-141.1
           (selectq (car input)
            ((URI-CAST URI-TAIL-CAST ID VAR LEFT-PAR NOT FALSE TRUE NUMBER STRING MINUS PLUS URI PREF URI-TAIL A UNDERSCORE) ; REDUCE(141) op
              (setq input (cons '<COMPARE-OP> (apply #'(LAMBDA (A) (QUOTE >)) (reduce 1)))))
            (return (list 'SYNTAX-ERROR (caar stack) '(URI-CAST URI-TAIL-CAST ID VAR LEFT-PAR NOT FALSE TRUE NUMBER STRING MINUS PLUS URI PREF URI-TAIL A UNDERSCORE) input))))
         (LESS-OR-EQUAL-142.1
           (selectq (car input)
            ((URI-CAST URI-TAIL-CAST ID VAR LEFT-PAR NOT FALSE TRUE NUMBER STRING MINUS PLUS URI PREF URI-TAIL A UNDERSCORE) ; REDUCE(142) op
              (setq input (cons '<COMPARE-OP> (apply #'(LAMBDA (A) (QUOTE <=)) (reduce 1)))))
            (return (list 'SYNTAX-ERROR (caar stack) '(URI-CAST URI-TAIL-CAST ID VAR LEFT-PAR NOT FALSE TRUE NUMBER STRING MINUS PLUS URI PREF URI-TAIL A UNDERSCORE) input))))
         (GREATER-OR-EQUAL-143.1
           (selectq (car input)
            ((URI-CAST URI-TAIL-CAST ID VAR LEFT-PAR NOT FALSE TRUE NUMBER STRING MINUS PLUS URI PREF URI-TAIL A UNDERSCORE) ; REDUCE(143) op
              (setq input (cons '<COMPARE-OP> (apply #'(LAMBDA (A) (QUOTE >=)) (reduce 1)))))
            (return (list 'SYNTAX-ERROR (caar stack) '(URI-CAST URI-TAIL-CAST ID VAR LEFT-PAR NOT FALSE TRUE NUMBER STRING MINUS PLUS URI PREF URI-TAIL A UNDERSCORE) input))))
         (ANOT-EQUAL-144.1
           (selectq (car input)
            ((URI-CAST URI-TAIL-CAST ID VAR LEFT-PAR NOT FALSE TRUE NUMBER STRING MINUS PLUS URI PREF URI-TAIL A UNDERSCORE) ; REDUCE(144) op
              (setq input (cons '<COMPARE-OP> (apply #'(LAMBDA (A) (QUOTE A!=)) (reduce 1)))))
            (return (list 'SYNTAX-ERROR (caar stack) '(URI-CAST URI-TAIL-CAST ID VAR LEFT-PAR NOT FALSE TRUE NUMBER STRING MINUS PLUS URI PREF URI-TAIL A UNDERSCORE) input))))
         (AEQUAL-145.1
           (selectq (car input)
            ((URI-CAST URI-TAIL-CAST ID VAR LEFT-PAR NOT FALSE TRUE NUMBER STRING MINUS PLUS URI PREF URI-TAIL A UNDERSCORE) ; REDUCE(145) op
              (setq input (cons '<COMPARE-OP> (apply #'(LAMBDA (A) (QUOTE A=)) (reduce 1)))))
            (return (list 'SYNTAX-ERROR (caar stack) '(URI-CAST URI-TAIL-CAST ID VAR LEFT-PAR NOT FALSE TRUE NUMBER STRING MINUS PLUS URI PREF URI-TAIL A UNDERSCORE) input))))
         (ALESS-146.1
           (selectq (car input)
            ((URI-CAST URI-TAIL-CAST ID VAR LEFT-PAR NOT FALSE TRUE NUMBER STRING MINUS PLUS URI PREF URI-TAIL A UNDERSCORE) ; REDUCE(146) op
              (setq input (cons '<COMPARE-OP> (apply #'(LAMBDA (A) (QUOTE A<)) (reduce 1)))))
            (return (list 'SYNTAX-ERROR (caar stack) '(URI-CAST URI-TAIL-CAST ID VAR LEFT-PAR NOT FALSE TRUE NUMBER STRING MINUS PLUS URI PREF URI-TAIL A UNDERSCORE) input))))
         (AGREATER-147.1
           (selectq (car input)
            ((URI-CAST URI-TAIL-CAST ID VAR LEFT-PAR NOT FALSE TRUE NUMBER STRING MINUS PLUS URI PREF URI-TAIL A UNDERSCORE) ; REDUCE(147) op
              (setq input (cons '<COMPARE-OP> (apply #'(LAMBDA (A) (QUOTE A>)) (reduce 1)))))
            (return (list 'SYNTAX-ERROR (caar stack) '(URI-CAST URI-TAIL-CAST ID VAR LEFT-PAR NOT FALSE TRUE NUMBER STRING MINUS PLUS URI PREF URI-TAIL A UNDERSCORE) input))))
         (ALESS-OR-EQUAL-148.1
           (selectq (car input)
            ((URI-CAST URI-TAIL-CAST ID VAR LEFT-PAR NOT FALSE TRUE NUMBER STRING MINUS PLUS URI PREF URI-TAIL A UNDERSCORE) ; REDUCE(148) op
              (setq input (cons '<COMPARE-OP> (apply #'(LAMBDA (A) (QUOTE A<=)) (reduce 1)))))
            (return (list 'SYNTAX-ERROR (caar stack) '(URI-CAST URI-TAIL-CAST ID VAR LEFT-PAR NOT FALSE TRUE NUMBER STRING MINUS PLUS URI PREF URI-TAIL A UNDERSCORE) input))))
         (AGREATER-OR-EQUAL-149.1
           (selectq (car input)
            ((URI-CAST URI-TAIL-CAST ID VAR LEFT-PAR NOT FALSE TRUE NUMBER STRING MINUS PLUS URI PREF URI-TAIL A UNDERSCORE) ; REDUCE(149) op
              (setq input (cons '<COMPARE-OP> (apply #'(LAMBDA (A) (QUOTE A>=)) (reduce 1)))))
            (return (list 'SYNTAX-ERROR (caar stack) '(URI-CAST URI-TAIL-CAST ID VAR LEFT-PAR NOT FALSE TRUE NUMBER STRING MINUS PLUS URI PREF URI-TAIL A UNDERSCORE) input))))
         (<NUM-EXPR-OR-URI>-135.1
           (selectq (car input)
            ((FOR COMMA OR RIGHT-PAR AS RIGHT-BRACE LIMIT OFFSET ORDER HAVING GROUP VALUES LEFT-BRACE WHERE FROM AND -! SEMICOLON) ; REDUCE(135) op
              (setq input (cons '<REL-EXPR> (apply #'(LAMBDA (A B C) (LIST B A C)) (reduce 3)))))
            (return (list 'SYNTAX-ERROR (caar stack) '(FOR COMMA OR RIGHT-PAR AS RIGHT-BRACE LIMIT OFFSET ORDER HAVING GROUP VALUES LEFT-BRACE WHERE FROM AND -! SEMICOLON) input))))
         (RIGHT-PAR-176.1
           (selectq (car input)
            ((FOR RIGHT-BRACKET A-OR AMINUS APLUS MINUS PLUS RIGHT-BRACE LIMIT OFFSET ORDER HAVING GROUP VALUES LEFT-BRACE WHERE FROM NOT IN AGREATER-OR-EQUAL ALESS-OR-EQUAL AGREATER ALESS AEQUAL ANOT-EQUAL GREATER-OR-EQUAL LESS-OR-EQUAL GREATER LESS EQUAL NOT-EQUAL COMMA AND RIGHT-PAR OR AS COLON A-AND ADIVIDE ATIMES DIVIDE TIMES LEFT-BRACKET -! SEMICOLON) ; REDUCE(176) op
              (setq input (cons '<FNCALL> (apply #'(LAMBDA (A B C D) (LIST (LIST (QUOTE PREFIXED) A B) C)) (reduce 4)))))
            (return (list 'SYNTAX-ERROR (caar stack) '(FOR RIGHT-BRACKET A-OR AMINUS APLUS MINUS PLUS RIGHT-BRACE LIMIT OFFSET ORDER HAVING GROUP VALUES LEFT-BRACE WHERE FROM NOT IN AGREATER-OR-EQUAL ALESS-OR-EQUAL AGREATER ALESS AEQUAL ANOT-EQUAL GREATER-OR-EQUAL LESS-OR-EQUAL GREATER LESS EQUAL NOT-EQUAL COMMA AND RIGHT-PAR OR AS COLON A-AND ADIVIDE ATIMES DIVIDE TIMES LEFT-BRACKET -! SEMICOLON) input))))
         (<MULT-EXPR>-156.1
           (selectq (car input)
            ((FOR RIGHT-BRACKET COLON COMMA OR RIGHT-PAR AS AND NOT IN AGREATER-OR-EQUAL ALESS-OR-EQUAL AGREATER ALESS AEQUAL ANOT-EQUAL GREATER-OR-EQUAL LESS-OR-EQUAL GREATER LESS EQUAL NOT-EQUAL RIGHT-BRACE LIMIT OFFSET ORDER HAVING GROUP VALUES LEFT-BRACE WHERE FROM -! SEMICOLON) ; REDUCE(156) op
              (setq input (cons '<NUM-EXPR> (apply #'(LAMBDA (A B C) (LIST (QUOTE A-OR) A C)) (reduce 3)))))
            (return (list 'SYNTAX-ERROR (caar stack) '(FOR RIGHT-BRACKET COLON COMMA OR RIGHT-PAR AS AND NOT IN AGREATER-OR-EQUAL ALESS-OR-EQUAL AGREATER ALESS AEQUAL ANOT-EQUAL GREATER-OR-EQUAL LESS-OR-EQUAL GREATER LESS EQUAL NOT-EQUAL RIGHT-BRACE LIMIT OFFSET ORDER HAVING GROUP VALUES LEFT-BRACE WHERE FROM -! SEMICOLON) input))))
         (<MULT-EXPR>-155.1
           (selectq (car input)
            ((FOR RIGHT-BRACKET COLON COMMA OR RIGHT-PAR AS AND NOT IN AGREATER-OR-EQUAL ALESS-OR-EQUAL AGREATER ALESS AEQUAL ANOT-EQUAL GREATER-OR-EQUAL LESS-OR-EQUAL GREATER LESS EQUAL NOT-EQUAL RIGHT-BRACE LIMIT OFFSET ORDER HAVING GROUP VALUES LEFT-BRACE WHERE FROM -! SEMICOLON) ; REDUCE(155) op
              (setq input (cons '<NUM-EXPR> (apply #'(LAMBDA (A B C) (LIST (QUOTE A-) A C)) (reduce 3)))))
            (return (list 'SYNTAX-ERROR (caar stack) '(FOR RIGHT-BRACKET COLON COMMA OR RIGHT-PAR AS AND NOT IN AGREATER-OR-EQUAL ALESS-OR-EQUAL AGREATER ALESS AEQUAL ANOT-EQUAL GREATER-OR-EQUAL LESS-OR-EQUAL GREATER LESS EQUAL NOT-EQUAL RIGHT-BRACE LIMIT OFFSET ORDER HAVING GROUP VALUES LEFT-BRACE WHERE FROM -! SEMICOLON) input))))
         (<MULT-EXPR>-154.1
           (selectq (car input)
            ((FOR RIGHT-BRACKET COLON COMMA OR RIGHT-PAR AS AND NOT IN AGREATER-OR-EQUAL ALESS-OR-EQUAL AGREATER ALESS AEQUAL ANOT-EQUAL GREATER-OR-EQUAL LESS-OR-EQUAL GREATER LESS EQUAL NOT-EQUAL RIGHT-BRACE LIMIT OFFSET ORDER HAVING GROUP VALUES LEFT-BRACE WHERE FROM -! SEMICOLON) ; REDUCE(154) op
              (setq input (cons '<NUM-EXPR> (apply #'(LAMBDA (A B C) (LIST (QUOTE A+) A C)) (reduce 3)))))
            (return (list 'SYNTAX-ERROR (caar stack) '(FOR RIGHT-BRACKET COLON COMMA OR RIGHT-PAR AS AND NOT IN AGREATER-OR-EQUAL ALESS-OR-EQUAL AGREATER ALESS AEQUAL ANOT-EQUAL GREATER-OR-EQUAL LESS-OR-EQUAL GREATER LESS EQUAL NOT-EQUAL RIGHT-BRACE LIMIT OFFSET ORDER HAVING GROUP VALUES LEFT-BRACE WHERE FROM -! SEMICOLON) input))))
         (<MULT-EXPR>-153.1
           (selectq (car input)
            ((FOR RIGHT-BRACKET COLON COMMA OR RIGHT-PAR AS AND NOT IN AGREATER-OR-EQUAL ALESS-OR-EQUAL AGREATER ALESS AEQUAL ANOT-EQUAL GREATER-OR-EQUAL LESS-OR-EQUAL GREATER LESS EQUAL NOT-EQUAL RIGHT-BRACE LIMIT OFFSET ORDER HAVING GROUP VALUES LEFT-BRACE WHERE FROM -! SEMICOLON) ; REDUCE(153) op
              (setq input (cons '<NUM-EXPR> (apply #'(LAMBDA (A B C) (LIST (QUOTE -) A C)) (reduce 3)))))
            (return (list 'SYNTAX-ERROR (caar stack) '(FOR RIGHT-BRACKET COLON COMMA OR RIGHT-PAR AS AND NOT IN AGREATER-OR-EQUAL ALESS-OR-EQUAL AGREATER ALESS AEQUAL ANOT-EQUAL GREATER-OR-EQUAL LESS-OR-EQUAL GREATER LESS EQUAL NOT-EQUAL RIGHT-BRACE LIMIT OFFSET ORDER HAVING GROUP VALUES LEFT-BRACE WHERE FROM -! SEMICOLON) input))))
         (<MULT-EXPR>-152.1
           (selectq (car input)
            ((FOR RIGHT-BRACKET COLON COMMA OR RIGHT-PAR AS AND NOT IN AGREATER-OR-EQUAL ALESS-OR-EQUAL AGREATER ALESS AEQUAL ANOT-EQUAL GREATER-OR-EQUAL LESS-OR-EQUAL GREATER LESS EQUAL NOT-EQUAL RIGHT-BRACE LIMIT OFFSET ORDER HAVING GROUP VALUES LEFT-BRACE WHERE FROM -! SEMICOLON) ; REDUCE(152) op
              (setq input (cons '<NUM-EXPR> (apply #'(LAMBDA (A B C) (LIST (QUOTE +) A C)) (reduce 3)))))
            (return (list 'SYNTAX-ERROR (caar stack) '(FOR RIGHT-BRACKET COLON COMMA OR RIGHT-PAR AS AND NOT IN AGREATER-OR-EQUAL ALESS-OR-EQUAL AGREATER ALESS AEQUAL ANOT-EQUAL GREATER-OR-EQUAL LESS-OR-EQUAL GREATER LESS EQUAL NOT-EQUAL RIGHT-BRACE LIMIT OFFSET ORDER HAVING GROUP VALUES LEFT-BRACE WHERE FROM -! SEMICOLON) input))))
         (<PRIM-EXPR>-164.1
           (selectq (car input)
            ((FOR RIGHT-BRACKET A-AND ADIVIDE ATIMES DIVIDE TIMES COLON COMMA OR RIGHT-PAR AS AND NOT IN AGREATER-OR-EQUAL ALESS-OR-EQUAL AGREATER ALESS AEQUAL ANOT-EQUAL GREATER-OR-EQUAL LESS-OR-EQUAL GREATER LESS EQUAL NOT-EQUAL RIGHT-BRACE LIMIT OFFSET ORDER HAVING GROUP VALUES LEFT-BRACE WHERE FROM A-OR AMINUS APLUS MINUS PLUS -! SEMICOLON) ; REDUCE(164) op
              (setq input (cons '<UNARY-EXPR> (nth 0 (reduce 1)))))
            (return (list 'SYNTAX-ERROR (caar stack) '(FOR RIGHT-BRACKET A-AND ADIVIDE ATIMES DIVIDE TIMES COLON COMMA OR RIGHT-PAR AS AND NOT IN AGREATER-OR-EQUAL ALESS-OR-EQUAL AGREATER ALESS AEQUAL ANOT-EQUAL GREATER-OR-EQUAL LESS-OR-EQUAL GREATER LESS EQUAL NOT-EQUAL RIGHT-BRACE LIMIT OFFSET ORDER HAVING GROUP VALUES LEFT-BRACE WHERE FROM A-OR AMINUS APLUS MINUS PLUS -! SEMICOLON) input))))
         (<PRIM-EXPR>-165.1
           (selectq (car input)
            ((FOR RIGHT-BRACKET A-AND ADIVIDE ATIMES DIVIDE TIMES COLON COMMA OR RIGHT-PAR AS AND NOT IN AGREATER-OR-EQUAL ALESS-OR-EQUAL AGREATER ALESS AEQUAL ANOT-EQUAL GREATER-OR-EQUAL LESS-OR-EQUAL GREATER LESS EQUAL NOT-EQUAL RIGHT-BRACE LIMIT OFFSET ORDER HAVING GROUP VALUES LEFT-BRACE WHERE FROM A-OR AMINUS APLUS MINUS PLUS -! SEMICOLON) ; REDUCE(165) op
              (setq input (cons '<UNARY-EXPR> (apply #'(LAMBDA (A B) (LIST (QUOTE U-) B)) (reduce 2)))))
            (return (list 'SYNTAX-ERROR (caar stack) '(FOR RIGHT-BRACKET A-AND ADIVIDE ATIMES DIVIDE TIMES COLON COMMA OR RIGHT-PAR AS AND NOT IN AGREATER-OR-EQUAL ALESS-OR-EQUAL AGREATER ALESS AEQUAL ANOT-EQUAL GREATER-OR-EQUAL LESS-OR-EQUAL GREATER LESS EQUAL NOT-EQUAL RIGHT-BRACE LIMIT OFFSET ORDER HAVING GROUP VALUES LEFT-BRACE WHERE FROM A-OR AMINUS APLUS MINUS PLUS -! SEMICOLON) input))))
         (<PRIM-EXPR>-166.1
           (selectq (car input)
            ((FOR RIGHT-BRACKET A-AND ADIVIDE ATIMES DIVIDE TIMES COLON COMMA OR RIGHT-PAR AS AND NOT IN AGREATER-OR-EQUAL ALESS-OR-EQUAL AGREATER ALESS AEQUAL ANOT-EQUAL GREATER-OR-EQUAL LESS-OR-EQUAL GREATER LESS EQUAL NOT-EQUAL RIGHT-BRACE LIMIT OFFSET ORDER HAVING GROUP VALUES LEFT-BRACE WHERE FROM A-OR AMINUS APLUS MINUS PLUS -! SEMICOLON) ; REDUCE(166) op
              (setq input (cons '<UNARY-EXPR> (nth 1 (reduce 2)))))
            (return (list 'SYNTAX-ERROR (caar stack) '(FOR RIGHT-BRACKET A-AND ADIVIDE ATIMES DIVIDE TIMES COLON COMMA OR RIGHT-PAR AS AND NOT IN AGREATER-OR-EQUAL ALESS-OR-EQUAL AGREATER ALESS AEQUAL ANOT-EQUAL GREATER-OR-EQUAL LESS-OR-EQUAL GREATER LESS EQUAL NOT-EQUAL RIGHT-BRACE LIMIT OFFSET ORDER HAVING GROUP VALUES LEFT-BRACE WHERE FROM A-OR AMINUS APLUS MINUS PLUS -! SEMICOLON) input))))
         (NUMBER-121.1
           (selectq (car input)
            ((FOR RIGHT-BRACKET A-AND ADIVIDE ATIMES DIVIDE TIMES COLON COMMA OR RIGHT-PAR AS AND NOT IN AGREATER-OR-EQUAL ALESS-OR-EQUAL AGREATER ALESS AEQUAL ANOT-EQUAL GREATER-OR-EQUAL LESS-OR-EQUAL GREATER LESS EQUAL NOT-EQUAL RIGHT-BRACE LIMIT OFFSET ORDER HAVING GROUP VALUES LEFT-BRACE WHERE FROM A-OR AMINUS APLUS MINUS PLUS STRING NUMBER TRUE FALSE URI PREF URI-TAIL A UNDEF LEFT-PAR CAP VAR SEMICOLON UNDERSCORE LEFT-BRACKET GRAPH FILTER OPTIONAL BIND DOT -! SEMICOLON) ; REDUCE(121) op
              (setq input (cons '<LITERAL> (apply #'(LAMBDA (A) (LIST (QUOTE NUMBER) A)) (reduce 1)))))
            (return (list 'SYNTAX-ERROR (caar stack) '(FOR RIGHT-BRACKET A-AND ADIVIDE ATIMES DIVIDE TIMES COLON COMMA OR RIGHT-PAR AS AND NOT IN AGREATER-OR-EQUAL ALESS-OR-EQUAL AGREATER ALESS AEQUAL ANOT-EQUAL GREATER-OR-EQUAL LESS-OR-EQUAL GREATER LESS EQUAL NOT-EQUAL RIGHT-BRACE LIMIT OFFSET ORDER HAVING GROUP VALUES LEFT-BRACE WHERE FROM A-OR AMINUS APLUS MINUS PLUS STRING NUMBER TRUE FALSE URI PREF URI-TAIL A UNDEF LEFT-PAR CAP VAR SEMICOLON UNDERSCORE LEFT-BRACKET GRAPH FILTER OPTIONAL BIND DOT -! SEMICOLON) input))))
         (TRUE-122.1
           (selectq (car input)
            ((FOR RIGHT-BRACKET A-AND ADIVIDE ATIMES DIVIDE TIMES COLON COMMA OR RIGHT-PAR AS AND NOT IN AGREATER-OR-EQUAL ALESS-OR-EQUAL AGREATER ALESS AEQUAL ANOT-EQUAL GREATER-OR-EQUAL LESS-OR-EQUAL GREATER LESS EQUAL NOT-EQUAL RIGHT-BRACE LIMIT OFFSET ORDER HAVING GROUP VALUES LEFT-BRACE WHERE FROM A-OR AMINUS APLUS MINUS PLUS STRING NUMBER TRUE FALSE URI PREF URI-TAIL A UNDEF LEFT-PAR CAP VAR SEMICOLON UNDERSCORE LEFT-BRACKET GRAPH FILTER OPTIONAL BIND DOT -! SEMICOLON) ; REDUCE(122) op
              (setq input (cons '<LITERAL> (apply #'(LAMBDA (A) (QUOTE (TRUE))) (reduce 1)))))
            (return (list 'SYNTAX-ERROR (caar stack) '(FOR RIGHT-BRACKET A-AND ADIVIDE ATIMES DIVIDE TIMES COLON COMMA OR RIGHT-PAR AS AND NOT IN AGREATER-OR-EQUAL ALESS-OR-EQUAL AGREATER ALESS AEQUAL ANOT-EQUAL GREATER-OR-EQUAL LESS-OR-EQUAL GREATER LESS EQUAL NOT-EQUAL RIGHT-BRACE LIMIT OFFSET ORDER HAVING GROUP VALUES LEFT-BRACE WHERE FROM A-OR AMINUS APLUS MINUS PLUS STRING NUMBER TRUE FALSE URI PREF URI-TAIL A UNDEF LEFT-PAR CAP VAR SEMICOLON UNDERSCORE LEFT-BRACKET GRAPH FILTER OPTIONAL BIND DOT -! SEMICOLON) input))))
         (FALSE-123.1
           (selectq (car input)
            ((FOR RIGHT-BRACKET A-AND ADIVIDE ATIMES DIVIDE TIMES COLON COMMA OR RIGHT-PAR AS AND NOT IN AGREATER-OR-EQUAL ALESS-OR-EQUAL AGREATER ALESS AEQUAL ANOT-EQUAL GREATER-OR-EQUAL LESS-OR-EQUAL GREATER LESS EQUAL NOT-EQUAL RIGHT-BRACE LIMIT OFFSET ORDER HAVING GROUP VALUES LEFT-BRACE WHERE FROM A-OR AMINUS APLUS MINUS PLUS STRING NUMBER TRUE FALSE URI PREF URI-TAIL A UNDEF LEFT-PAR CAP VAR SEMICOLON UNDERSCORE LEFT-BRACKET GRAPH FILTER OPTIONAL BIND DOT -! SEMICOLON) ; REDUCE(123) op
              (setq input (cons '<LITERAL> (apply #'(LAMBDA (A) (QUOTE (FALSE))) (reduce 1)))))
            (return (list 'SYNTAX-ERROR (caar stack) '(FOR RIGHT-BRACKET A-AND ADIVIDE ATIMES DIVIDE TIMES COLON COMMA OR RIGHT-PAR AS AND NOT IN AGREATER-OR-EQUAL ALESS-OR-EQUAL AGREATER ALESS AEQUAL ANOT-EQUAL GREATER-OR-EQUAL LESS-OR-EQUAL GREATER LESS EQUAL NOT-EQUAL RIGHT-BRACE LIMIT OFFSET ORDER HAVING GROUP VALUES LEFT-BRACE WHERE FROM A-OR AMINUS APLUS MINUS PLUS STRING NUMBER TRUE FALSE URI PREF URI-TAIL A UNDEF LEFT-PAR CAP VAR SEMICOLON UNDERSCORE LEFT-BRACKET GRAPH FILTER OPTIONAL BIND DOT -! SEMICOLON) input))))
         (URI-TAIL-118.1
           (selectq (car input)
            ((FOR RIGHT-BRACKET A-AND ADIVIDE ATIMES DIVIDE TIMES COLON COMMA A-OR AMINUS APLUS MINUS PLUS OR RIGHT-PAR AS AND STRING NUMBER TRUE FALSE URI PREF URI-TAIL A UNDEF INSERT DELETE NOT IN AGREATER-OR-EQUAL ALESS-OR-EQUAL AGREATER ALESS AEQUAL ANOT-EQUAL GREATER-OR-EQUAL LESS-OR-EQUAL GREATER LESS EQUAL NOT-EQUAL UNDERSCORE VAR LEFT-PAR LEFT-BRACKET VALUES GRAPH FILTER OPTIONAL BIND LEFT-BRACE DOT RIGHT-BRACE SEMICOLON CAP PIPE QUESTION WHERE USING LIMIT OFFSET ORDER HAVING GROUP FROM -! SEMICOLON) ; REDUCE(118) op
              (setq input (cons '<RESOURCE> (apply #'(LAMBDA (A B) (LIST (QUOTE PREFIXED) A B)) (reduce 2)))))
            (return (list 'SYNTAX-ERROR (caar stack) '(FOR RIGHT-BRACKET A-AND ADIVIDE ATIMES DIVIDE TIMES COLON COMMA A-OR AMINUS APLUS MINUS PLUS OR RIGHT-PAR AS AND STRING NUMBER TRUE FALSE URI PREF URI-TAIL A UNDEF INSERT DELETE NOT IN AGREATER-OR-EQUAL ALESS-OR-EQUAL AGREATER ALESS AEQUAL ANOT-EQUAL GREATER-OR-EQUAL LESS-OR-EQUAL GREATER LESS EQUAL NOT-EQUAL UNDERSCORE VAR LEFT-PAR LEFT-BRACKET VALUES GRAPH FILTER OPTIONAL BIND LEFT-BRACE DOT RIGHT-BRACE SEMICOLON CAP PIPE QUESTION WHERE USING LIMIT OFFSET ORDER HAVING GROUP FROM -! SEMICOLON) input))))
         (<RESOURCE>-125.1
           (selectq (car input)
            ((FOR RIGHT-BRACKET A-AND ADIVIDE ATIMES DIVIDE TIMES COLON COMMA OR RIGHT-PAR AS AND NOT IN AGREATER-OR-EQUAL ALESS-OR-EQUAL AGREATER ALESS AEQUAL ANOT-EQUAL GREATER-OR-EQUAL LESS-OR-EQUAL GREATER LESS EQUAL NOT-EQUAL RIGHT-BRACE LIMIT OFFSET ORDER HAVING GROUP VALUES LEFT-BRACE WHERE FROM A-OR AMINUS APLUS MINUS PLUS STRING NUMBER TRUE FALSE URI PREF URI-TAIL A UNDEF LEFT-PAR CAP VAR SEMICOLON UNDERSCORE LEFT-BRACKET GRAPH FILTER OPTIONAL BIND DOT -! SEMICOLON) ; REDUCE(125) op
              (setq input (cons '<LITERAL> (apply #'(LAMBDA (A B C) (LIST (QUOTE TYPED) (SECOND A) (THIRD A) C)) (reduce 3)))))
            (return (list 'SYNTAX-ERROR (caar stack) '(FOR RIGHT-BRACKET A-AND ADIVIDE ATIMES DIVIDE TIMES COLON COMMA OR RIGHT-PAR AS AND NOT IN AGREATER-OR-EQUAL ALESS-OR-EQUAL AGREATER ALESS AEQUAL ANOT-EQUAL GREATER-OR-EQUAL LESS-OR-EQUAL GREATER LESS EQUAL NOT-EQUAL RIGHT-BRACE LIMIT OFFSET ORDER HAVING GROUP VALUES LEFT-BRACE WHERE FROM A-OR AMINUS APLUS MINUS PLUS STRING NUMBER TRUE FALSE URI PREF URI-TAIL A UNDEF LEFT-PAR CAP VAR SEMICOLON UNDERSCORE LEFT-BRACKET GRAPH FILTER OPTIONAL BIND DOT -! SEMICOLON) input))))
         (VAR-171.1
           (selectq (car input)
            ((FOR RIGHT-BRACKET LEFT-BRACKET A-AND ADIVIDE ATIMES DIVIDE TIMES COLON COMMA OR RIGHT-PAR AS AND NOT IN AGREATER-OR-EQUAL ALESS-OR-EQUAL AGREATER ALESS AEQUAL ANOT-EQUAL GREATER-OR-EQUAL LESS-OR-EQUAL GREATER LESS EQUAL NOT-EQUAL RIGHT-BRACE LIMIT OFFSET ORDER HAVING GROUP VALUES LEFT-BRACE WHERE FROM A-OR AMINUS APLUS MINUS PLUS -! SEMICOLON) ; REDUCE(171) op
              (setq input (cons '<VAR-OR-FNCALL> (apply #'(LAMBDA (A) (CONS (QUOTE VAR) A)) (reduce 1)))))
            (return (list 'SYNTAX-ERROR (caar stack) '(FOR RIGHT-BRACKET LEFT-BRACKET A-AND ADIVIDE ATIMES DIVIDE TIMES COLON COMMA OR RIGHT-PAR AS AND NOT IN AGREATER-OR-EQUAL ALESS-OR-EQUAL AGREATER ALESS AEQUAL ANOT-EQUAL GREATER-OR-EQUAL LESS-OR-EQUAL GREATER LESS EQUAL NOT-EQUAL RIGHT-BRACE LIMIT OFFSET ORDER HAVING GROUP VALUES LEFT-BRACE WHERE FROM A-OR AMINUS APLUS MINUS PLUS -! SEMICOLON) input))))
         (<FNCALL>-172.1
           (selectq (car input)
            ((FOR RIGHT-BRACKET LEFT-BRACKET A-AND ADIVIDE ATIMES DIVIDE TIMES COLON COMMA OR RIGHT-PAR AS AND NOT IN AGREATER-OR-EQUAL ALESS-OR-EQUAL AGREATER ALESS AEQUAL ANOT-EQUAL GREATER-OR-EQUAL LESS-OR-EQUAL GREATER LESS EQUAL NOT-EQUAL RIGHT-BRACE LIMIT OFFSET ORDER HAVING GROUP VALUES LEFT-BRACE WHERE FROM A-OR AMINUS APLUS MINUS PLUS -! SEMICOLON) ; REDUCE(172) op
              (setq input (cons '<VAR-OR-FNCALL> (nth 0 (reduce 1)))))
            (return (list 'SYNTAX-ERROR (caar stack) '(FOR RIGHT-BRACKET LEFT-BRACKET A-AND ADIVIDE ATIMES DIVIDE TIMES COLON COMMA OR RIGHT-PAR AS AND NOT IN AGREATER-OR-EQUAL ALESS-OR-EQUAL AGREATER ALESS AEQUAL ANOT-EQUAL GREATER-OR-EQUAL LESS-OR-EQUAL GREATER LESS EQUAL NOT-EQUAL RIGHT-BRACE LIMIT OFFSET ORDER HAVING GROUP VALUES LEFT-BRACE WHERE FROM A-OR AMINUS APLUS MINUS PLUS -! SEMICOLON) input))))
         (<RANGE-EXPR-LIST>-196.1
           (selectq (car input)
            ((RIGHT-BRACKET) ; REDUCE(196) op
              (setq input (cons '<RANGE-EXPR-LIST> (apply #'(LAMBDA (A B C) (CONS A C)) (reduce 3)))))
            (return (list 'SYNTAX-ERROR (caar stack) '(RIGHT-BRACKET) input))))
         (<NUM-EXPR>-194.1
           (selectq (car input)
            ((COMMA RIGHT-BRACKET) ; REDUCE(194) op
              (setq input (cons '<RANGE-EXPR> (apply #'(LAMBDA (A B C D) (LIST (QUOTE RANGE3) A (QUOTE (NUMBER "-1")) D)) (reduce 4)))))
            (return (list 'SYNTAX-ERROR (caar stack) '(COMMA RIGHT-BRACKET) input))))
         (<NUM-EXPR>-189.1
           (selectq (car input)
            ((COMMA RIGHT-BRACKET) ; REDUCE(189) op
              (setq input (cons '<RANGE-EXPR> (apply #'(LAMBDA (A B C D E) (LIST (QUOTE RANGE3) A C E)) (reduce 5)))))
            (return (list 'SYNTAX-ERROR (caar stack) '(COMMA RIGHT-BRACKET) input))))
         (<NUM-EXPR>-193.1
           (selectq (car input)
            ((COMMA RIGHT-BRACKET) ; REDUCE(193) op
              (setq input (cons '<RANGE-EXPR> (apply #'(LAMBDA (A B C) (LIST (QUOTE RANGE3) (QUOTE (NUMBER "0")) (QUOTE (NUMBER "-1")) C)) (reduce 3)))))
            (return (list 'SYNTAX-ERROR (caar stack) '(COMMA RIGHT-BRACKET) input))))
         (<NUM-EXPR>-190.1
           (selectq (car input)
            ((COMMA RIGHT-BRACKET) ; REDUCE(190) op
              (setq input (cons '<RANGE-EXPR> (apply #'(LAMBDA (A B C D) (LIST (QUOTE RANGE3) (QUOTE (NUMBER "0")) B D)) (reduce 4)))))
            (return (list 'SYNTAX-ERROR (caar stack) '(COMMA RIGHT-BRACKET) input))))
         (RIGHT-BRACKET-178.1
           (selectq (car input)
            ((FOR RIGHT-BRACKET A-OR AMINUS APLUS MINUS PLUS RIGHT-BRACE LIMIT OFFSET ORDER HAVING GROUP VALUES LEFT-BRACE WHERE FROM NOT IN AGREATER-OR-EQUAL ALESS-OR-EQUAL AGREATER ALESS AEQUAL ANOT-EQUAL GREATER-OR-EQUAL LESS-OR-EQUAL GREATER LESS EQUAL NOT-EQUAL COMMA AND RIGHT-PAR OR AS COLON A-AND ADIVIDE ATIMES DIVIDE TIMES LEFT-BRACKET -! SEMICOLON) ; REDUCE(178) op
              (setq input (cons '<FNCALL> (apply #'(LAMBDA (A B C D) (CONS (QUOTE AREF) (CONS A C))) (reduce 4)))))
            (return (list 'SYNTAX-ERROR (caar stack) '(FOR RIGHT-BRACKET A-OR AMINUS APLUS MINUS PLUS RIGHT-BRACE LIMIT OFFSET ORDER HAVING GROUP VALUES LEFT-BRACE WHERE FROM NOT IN AGREATER-OR-EQUAL ALESS-OR-EQUAL AGREATER ALESS AEQUAL ANOT-EQUAL GREATER-OR-EQUAL LESS-OR-EQUAL GREATER LESS EQUAL NOT-EQUAL COMMA AND RIGHT-PAR OR AS COLON A-AND ADIVIDE ATIMES DIVIDE TIMES LEFT-BRACKET -! SEMICOLON) input))))
         (RIGHT-PAR-177.1
           (selectq (car input)
            ((FOR RIGHT-BRACKET A-OR AMINUS APLUS MINUS PLUS RIGHT-BRACE LIMIT OFFSET ORDER HAVING GROUP VALUES LEFT-BRACE WHERE FROM NOT IN AGREATER-OR-EQUAL ALESS-OR-EQUAL AGREATER ALESS AEQUAL ANOT-EQUAL GREATER-OR-EQUAL LESS-OR-EQUAL GREATER LESS EQUAL NOT-EQUAL COMMA AND RIGHT-PAR OR AS COLON A-AND ADIVIDE ATIMES DIVIDE TIMES LEFT-BRACKET -! SEMICOLON) ; REDUCE(177) op
              (setq input (cons '<FNCALL> (apply #'(LAMBDA (A B C) (LIST (LIST (QUOTE PREFIXED) "" A) B)) (reduce 3)))))
            (return (list 'SYNTAX-ERROR (caar stack) '(FOR RIGHT-BRACKET A-OR AMINUS APLUS MINUS PLUS RIGHT-BRACE LIMIT OFFSET ORDER HAVING GROUP VALUES LEFT-BRACE WHERE FROM NOT IN AGREATER-OR-EQUAL ALESS-OR-EQUAL AGREATER ALESS AEQUAL ANOT-EQUAL GREATER-OR-EQUAL LESS-OR-EQUAL GREATER LESS EQUAL NOT-EQUAL COMMA AND RIGHT-PAR OR AS COLON A-AND ADIVIDE ATIMES DIVIDE TIMES LEFT-BRACKET -! SEMICOLON) input))))
         (RIGHT-PAR-175.1
           (selectq (car input)
            ((FOR RIGHT-BRACKET A-OR AMINUS APLUS MINUS PLUS RIGHT-BRACE LIMIT OFFSET ORDER HAVING GROUP VALUES LEFT-BRACE WHERE FROM NOT IN AGREATER-OR-EQUAL ALESS-OR-EQUAL AGREATER ALESS AEQUAL ANOT-EQUAL GREATER-OR-EQUAL LESS-OR-EQUAL GREATER LESS EQUAL NOT-EQUAL COMMA AND RIGHT-PAR OR AS COLON A-AND ADIVIDE ATIMES DIVIDE TIMES LEFT-BRACKET -! SEMICOLON) ; REDUCE(175) op
              (setq input (cons '<FNCALL> (apply #'(LAMBDA (A B C) (LIST (LIST (QUOTE URI) A) B)) (reduce 3)))))
            (return (list 'SYNTAX-ERROR (caar stack) '(FOR RIGHT-BRACKET A-OR AMINUS APLUS MINUS PLUS RIGHT-BRACE LIMIT OFFSET ORDER HAVING GROUP VALUES LEFT-BRACE WHERE FROM NOT IN AGREATER-OR-EQUAL ALESS-OR-EQUAL AGREATER ALESS AEQUAL ANOT-EQUAL GREATER-OR-EQUAL LESS-OR-EQUAL GREATER LESS EQUAL NOT-EQUAL COMMA AND RIGHT-PAR OR AS COLON A-AND ADIVIDE ATIMES DIVIDE TIMES LEFT-BRACKET -! SEMICOLON) input))))
         (<SIMPLE-FNCALL>-174.1
           (selectq (car input)
            ((FOR RIGHT-BRACKET A-OR AMINUS APLUS MINUS PLUS RIGHT-BRACE LIMIT OFFSET ORDER HAVING GROUP VALUES LEFT-BRACE WHERE FROM NOT IN AGREATER-OR-EQUAL ALESS-OR-EQUAL AGREATER ALESS AEQUAL ANOT-EQUAL GREATER-OR-EQUAL LESS-OR-EQUAL GREATER LESS EQUAL NOT-EQUAL COMMA AND RIGHT-PAR OR AS COLON A-AND ADIVIDE ATIMES DIVIDE TIMES LEFT-BRACKET -! SEMICOLON) ; REDUCE(174) op
              (setq input (cons '<FNCALL> (nth 0 (reduce 1)))))
            (return (list 'SYNTAX-ERROR (caar stack) '(FOR RIGHT-BRACKET A-OR AMINUS APLUS MINUS PLUS RIGHT-BRACE LIMIT OFFSET ORDER HAVING GROUP VALUES LEFT-BRACE WHERE FROM NOT IN AGREATER-OR-EQUAL ALESS-OR-EQUAL AGREATER ALESS AEQUAL ANOT-EQUAL GREATER-OR-EQUAL LESS-OR-EQUAL GREATER LESS EQUAL NOT-EQUAL COMMA AND RIGHT-PAR OR AS COLON A-AND ADIVIDE ATIMES DIVIDE TIMES LEFT-BRACKET -! SEMICOLON) input))))
         (<PRIM-EXPR>-169.1
           (selectq (car input)
            ((FOR RIGHT-BRACKET A-OR AMINUS APLUS MINUS PLUS RIGHT-BRACE LIMIT OFFSET ORDER HAVING GROUP VALUES LEFT-BRACE WHERE FROM NOT IN AGREATER-OR-EQUAL ALESS-OR-EQUAL AGREATER ALESS AEQUAL ANOT-EQUAL GREATER-OR-EQUAL LESS-OR-EQUAL GREATER LESS EQUAL NOT-EQUAL COMMA AND RIGHT-PAR OR AS COLON A-AND ADIVIDE ATIMES DIVIDE TIMES -! SEMICOLON) ; REDUCE(169) op
              (setq input (cons '<PRIM-EXPR> (apply #'(LAMBDA (A B) (LIST (QUOTE NOT) B)) (reduce 2)))))
            (return (list 'SYNTAX-ERROR (caar stack) '(FOR RIGHT-BRACKET A-OR AMINUS APLUS MINUS PLUS RIGHT-BRACE LIMIT OFFSET ORDER HAVING GROUP VALUES LEFT-BRACE WHERE FROM NOT IN AGREATER-OR-EQUAL ALESS-OR-EQUAL AGREATER ALESS AEQUAL ANOT-EQUAL GREATER-OR-EQUAL LESS-OR-EQUAL GREATER LESS EQUAL NOT-EQUAL COMMA AND RIGHT-PAR OR AS COLON A-AND ADIVIDE ATIMES DIVIDE TIMES -! SEMICOLON) input))))
         (<LITERAL>-168.1
           (selectq (car input)
            ((FOR RIGHT-BRACKET A-OR AMINUS APLUS MINUS PLUS RIGHT-BRACE LIMIT OFFSET ORDER HAVING GROUP VALUES LEFT-BRACE WHERE FROM NOT IN AGREATER-OR-EQUAL ALESS-OR-EQUAL AGREATER ALESS AEQUAL ANOT-EQUAL GREATER-OR-EQUAL LESS-OR-EQUAL GREATER LESS EQUAL NOT-EQUAL COMMA AND RIGHT-PAR OR AS COLON A-AND ADIVIDE ATIMES DIVIDE TIMES -! SEMICOLON) ; REDUCE(168) op
              (setq input (cons '<PRIM-EXPR> (nth 0 (reduce 1)))))
            (return (list 'SYNTAX-ERROR (caar stack) '(FOR RIGHT-BRACKET A-OR AMINUS APLUS MINUS PLUS RIGHT-BRACE LIMIT OFFSET ORDER HAVING GROUP VALUES LEFT-BRACE WHERE FROM NOT IN AGREATER-OR-EQUAL ALESS-OR-EQUAL AGREATER ALESS AEQUAL ANOT-EQUAL GREATER-OR-EQUAL LESS-OR-EQUAL GREATER LESS EQUAL NOT-EQUAL COMMA AND RIGHT-PAR OR AS COLON A-AND ADIVIDE ATIMES DIVIDE TIMES -! SEMICOLON) input))))
         (RIGHT-PAR-167.1
           (selectq (car input)
            ((FOR RIGHT-BRACKET A-OR AMINUS APLUS MINUS PLUS RIGHT-BRACE LIMIT OFFSET ORDER HAVING GROUP VALUES LEFT-BRACE WHERE FROM NOT IN AGREATER-OR-EQUAL ALESS-OR-EQUAL AGREATER ALESS AEQUAL ANOT-EQUAL GREATER-OR-EQUAL LESS-OR-EQUAL GREATER LESS EQUAL NOT-EQUAL COMMA AND RIGHT-PAR OR AS COLON A-AND ADIVIDE ATIMES DIVIDE TIMES -! SEMICOLON) ; REDUCE(167) op
              (setq input (cons '<PRIM-EXPR> (apply #'(LAMBDA (A B C) B) (reduce 3)))))
            (return (list 'SYNTAX-ERROR (caar stack) '(FOR RIGHT-BRACKET A-OR AMINUS APLUS MINUS PLUS RIGHT-BRACE LIMIT OFFSET ORDER HAVING GROUP VALUES LEFT-BRACE WHERE FROM NOT IN AGREATER-OR-EQUAL ALESS-OR-EQUAL AGREATER ALESS AEQUAL ANOT-EQUAL GREATER-OR-EQUAL LESS-OR-EQUAL GREATER LESS EQUAL NOT-EQUAL COMMA AND RIGHT-PAR OR AS COLON A-AND ADIVIDE ATIMES DIVIDE TIMES -! SEMICOLON) input))))
         (<UNARY-EXPR>-162.1
           (selectq (car input)
            ((FOR RIGHT-BRACKET A-OR AMINUS APLUS MINUS PLUS RIGHT-BRACE LIMIT OFFSET ORDER HAVING GROUP VALUES LEFT-BRACE WHERE FROM NOT IN AGREATER-OR-EQUAL ALESS-OR-EQUAL AGREATER ALESS AEQUAL ANOT-EQUAL GREATER-OR-EQUAL LESS-OR-EQUAL GREATER LESS EQUAL NOT-EQUAL COMMA AND RIGHT-PAR OR AS COLON -! SEMICOLON) ; REDUCE(162) op
              (setq input (cons '<MULT-EXPR> (apply #'(LAMBDA (A B C) (LIST (QUOTE A-AND) A C)) (reduce 3)))))
            (return (list 'SYNTAX-ERROR (caar stack) '(FOR RIGHT-BRACKET A-OR AMINUS APLUS MINUS PLUS RIGHT-BRACE LIMIT OFFSET ORDER HAVING GROUP VALUES LEFT-BRACE WHERE FROM NOT IN AGREATER-OR-EQUAL ALESS-OR-EQUAL AGREATER ALESS AEQUAL ANOT-EQUAL GREATER-OR-EQUAL LESS-OR-EQUAL GREATER LESS EQUAL NOT-EQUAL COMMA AND RIGHT-PAR OR AS COLON -! SEMICOLON) input))))
         (<UNARY-EXPR>-161.1
           (selectq (car input)
            ((FOR RIGHT-BRACKET A-OR AMINUS APLUS MINUS PLUS RIGHT-BRACE LIMIT OFFSET ORDER HAVING GROUP VALUES LEFT-BRACE WHERE FROM NOT IN AGREATER-OR-EQUAL ALESS-OR-EQUAL AGREATER ALESS AEQUAL ANOT-EQUAL GREATER-OR-EQUAL LESS-OR-EQUAL GREATER LESS EQUAL NOT-EQUAL COMMA AND RIGHT-PAR OR AS COLON -! SEMICOLON) ; REDUCE(161) op
              (setq input (cons '<MULT-EXPR> (apply #'(LAMBDA (A B C) (LIST (QUOTE A/) A C)) (reduce 3)))))
            (return (list 'SYNTAX-ERROR (caar stack) '(FOR RIGHT-BRACKET A-OR AMINUS APLUS MINUS PLUS RIGHT-BRACE LIMIT OFFSET ORDER HAVING GROUP VALUES LEFT-BRACE WHERE FROM NOT IN AGREATER-OR-EQUAL ALESS-OR-EQUAL AGREATER ALESS AEQUAL ANOT-EQUAL GREATER-OR-EQUAL LESS-OR-EQUAL GREATER LESS EQUAL NOT-EQUAL COMMA AND RIGHT-PAR OR AS COLON -! SEMICOLON) input))))
         (<UNARY-EXPR>-160.1
           (selectq (car input)
            ((FOR RIGHT-BRACKET A-OR AMINUS APLUS MINUS PLUS RIGHT-BRACE LIMIT OFFSET ORDER HAVING GROUP VALUES LEFT-BRACE WHERE FROM NOT IN AGREATER-OR-EQUAL ALESS-OR-EQUAL AGREATER ALESS AEQUAL ANOT-EQUAL GREATER-OR-EQUAL LESS-OR-EQUAL GREATER LESS EQUAL NOT-EQUAL COMMA AND RIGHT-PAR OR AS COLON -! SEMICOLON) ; REDUCE(160) op
              (setq input (cons '<MULT-EXPR> (apply #'(LAMBDA (A B C) (LIST (QUOTE A*) A C)) (reduce 3)))))
            (return (list 'SYNTAX-ERROR (caar stack) '(FOR RIGHT-BRACKET A-OR AMINUS APLUS MINUS PLUS RIGHT-BRACE LIMIT OFFSET ORDER HAVING GROUP VALUES LEFT-BRACE WHERE FROM NOT IN AGREATER-OR-EQUAL ALESS-OR-EQUAL AGREATER ALESS AEQUAL ANOT-EQUAL GREATER-OR-EQUAL LESS-OR-EQUAL GREATER LESS EQUAL NOT-EQUAL COMMA AND RIGHT-PAR OR AS COLON -! SEMICOLON) input))))
         (<UNARY-EXPR>-159.1
           (selectq (car input)
            ((FOR RIGHT-BRACKET A-OR AMINUS APLUS MINUS PLUS RIGHT-BRACE LIMIT OFFSET ORDER HAVING GROUP VALUES LEFT-BRACE WHERE FROM NOT IN AGREATER-OR-EQUAL ALESS-OR-EQUAL AGREATER ALESS AEQUAL ANOT-EQUAL GREATER-OR-EQUAL LESS-OR-EQUAL GREATER LESS EQUAL NOT-EQUAL COMMA AND RIGHT-PAR OR AS COLON -! SEMICOLON) ; REDUCE(159) op
              (setq input (cons '<MULT-EXPR> (apply #'(LAMBDA (A B C) (LIST (QUOTE /) A C)) (reduce 3)))))
            (return (list 'SYNTAX-ERROR (caar stack) '(FOR RIGHT-BRACKET A-OR AMINUS APLUS MINUS PLUS RIGHT-BRACE LIMIT OFFSET ORDER HAVING GROUP VALUES LEFT-BRACE WHERE FROM NOT IN AGREATER-OR-EQUAL ALESS-OR-EQUAL AGREATER ALESS AEQUAL ANOT-EQUAL GREATER-OR-EQUAL LESS-OR-EQUAL GREATER LESS EQUAL NOT-EQUAL COMMA AND RIGHT-PAR OR AS COLON -! SEMICOLON) input))))
         (<UNARY-EXPR>-158.1
           (selectq (car input)
            ((FOR RIGHT-BRACKET A-OR AMINUS APLUS MINUS PLUS RIGHT-BRACE LIMIT OFFSET ORDER HAVING GROUP VALUES LEFT-BRACE WHERE FROM NOT IN AGREATER-OR-EQUAL ALESS-OR-EQUAL AGREATER ALESS AEQUAL ANOT-EQUAL GREATER-OR-EQUAL LESS-OR-EQUAL GREATER LESS EQUAL NOT-EQUAL COMMA AND RIGHT-PAR OR AS COLON -! SEMICOLON) ; REDUCE(158) op
              (setq input (cons '<MULT-EXPR> (apply #'(LAMBDA (A B C) (LIST (QUOTE *) A C)) (reduce 3)))))
            (return (list 'SYNTAX-ERROR (caar stack) '(FOR RIGHT-BRACKET A-OR AMINUS APLUS MINUS PLUS RIGHT-BRACE LIMIT OFFSET ORDER HAVING GROUP VALUES LEFT-BRACE WHERE FROM NOT IN AGREATER-OR-EQUAL ALESS-OR-EQUAL AGREATER ALESS AEQUAL ANOT-EQUAL GREATER-OR-EQUAL LESS-OR-EQUAL GREATER LESS EQUAL NOT-EQUAL COMMA AND RIGHT-PAR OR AS COLON -! SEMICOLON) input))))
         (URI-TAIL-114.1
           (selectq (car input)
            ((FOR COMMA OR RIGHT-PAR AS RIGHT-BRACE LIMIT OFFSET ORDER HAVING GROUP VALUES LEFT-BRACE WHERE FROM AND URI PREF URI-TAIL A LEFT-PAR CAP VAR RIGHT-BRACKET SEMICOLON STRING NUMBER TRUE FALSE UNDERSCORE LEFT-BRACKET GRAPH FILTER OPTIONAL BIND DOT NOT IN AGREATER-OR-EQUAL ALESS-OR-EQUAL AGREATER ALESS AEQUAL ANOT-EQUAL GREATER-OR-EQUAL LESS-OR-EQUAL GREATER LESS EQUAL NOT-EQUAL -! SEMICOLON) ; REDUCE(114) op
              (setq input (cons '<RDF-TERM> (apply #'(LAMBDA (A B) (LIST (QUOTE BLANK) B)) (reduce 2)))))
            (return (list 'SYNTAX-ERROR (caar stack) '(FOR COMMA OR RIGHT-PAR AS RIGHT-BRACE LIMIT OFFSET ORDER HAVING GROUP VALUES LEFT-BRACE WHERE FROM AND URI PREF URI-TAIL A LEFT-PAR CAP VAR RIGHT-BRACKET SEMICOLON STRING NUMBER TRUE FALSE UNDERSCORE LEFT-BRACKET GRAPH FILTER OPTIONAL BIND DOT NOT IN AGREATER-OR-EQUAL ALESS-OR-EQUAL AGREATER ALESS AEQUAL ANOT-EQUAL GREATER-OR-EQUAL LESS-OR-EQUAL GREATER LESS EQUAL NOT-EQUAL -! SEMICOLON) input))))
         (<RESOURCE>-115.1
           (selectq (car input)
            ((FOR COMMA OR RIGHT-PAR AS RIGHT-BRACE LIMIT OFFSET ORDER HAVING GROUP VALUES LEFT-BRACE WHERE FROM AND URI PREF URI-TAIL A LEFT-PAR CAP VAR RIGHT-BRACKET SEMICOLON STRING NUMBER TRUE FALSE UNDERSCORE LEFT-BRACKET GRAPH FILTER OPTIONAL BIND DOT NOT IN AGREATER-OR-EQUAL ALESS-OR-EQUAL AGREATER ALESS AEQUAL ANOT-EQUAL GREATER-OR-EQUAL LESS-OR-EQUAL GREATER LESS EQUAL NOT-EQUAL -! SEMICOLON) ; REDUCE(115) op
              (setq input (cons '<RDF-TERM> (nth 0 (reduce 1)))))
            (return (list 'SYNTAX-ERROR (caar stack) '(FOR COMMA OR RIGHT-PAR AS RIGHT-BRACE LIMIT OFFSET ORDER HAVING GROUP VALUES LEFT-BRACE WHERE FROM AND URI PREF URI-TAIL A LEFT-PAR CAP VAR RIGHT-BRACKET SEMICOLON STRING NUMBER TRUE FALSE UNDERSCORE LEFT-BRACKET GRAPH FILTER OPTIONAL BIND DOT NOT IN AGREATER-OR-EQUAL ALESS-OR-EQUAL AGREATER ALESS AEQUAL ANOT-EQUAL GREATER-OR-EQUAL LESS-OR-EQUAL GREATER LESS EQUAL NOT-EQUAL -! SEMICOLON) input))))
         (<RDF-TERM>-151.1
           (selectq (car input)
            ((FOR NOT IN AGREATER-OR-EQUAL ALESS-OR-EQUAL AGREATER ALESS AEQUAL ANOT-EQUAL GREATER-OR-EQUAL LESS-OR-EQUAL GREATER LESS EQUAL NOT-EQUAL AND RIGHT-BRACE LIMIT OFFSET ORDER HAVING GROUP VALUES LEFT-BRACE WHERE FROM RIGHT-PAR COMMA OR AS -! SEMICOLON) ; REDUCE(151) op
              (setq input (cons '<NUM-EXPR-OR-URI> (nth 0 (reduce 1)))))
            (return (list 'SYNTAX-ERROR (caar stack) '(FOR NOT IN AGREATER-OR-EQUAL ALESS-OR-EQUAL AGREATER ALESS AEQUAL ANOT-EQUAL GREATER-OR-EQUAL LESS-OR-EQUAL GREATER LESS EQUAL NOT-EQUAL AND RIGHT-BRACE LIMIT OFFSET ORDER HAVING GROUP VALUES LEFT-BRACE WHERE FROM RIGHT-PAR COMMA OR AS -! SEMICOLON) input))))
         (<NUM-EXPR>-150.1
           (selectq (car input)
            ((FOR NOT IN AGREATER-OR-EQUAL ALESS-OR-EQUAL AGREATER ALESS AEQUAL ANOT-EQUAL GREATER-OR-EQUAL LESS-OR-EQUAL GREATER LESS EQUAL NOT-EQUAL AND RIGHT-BRACE LIMIT OFFSET ORDER HAVING GROUP VALUES LEFT-BRACE WHERE FROM RIGHT-PAR COMMA OR AS -! SEMICOLON) ; REDUCE(150) op
              (setq input (cons '<NUM-EXPR-OR-URI> (nth 0 (reduce 1)))))
            (return (list 'SYNTAX-ERROR (caar stack) '(FOR NOT IN AGREATER-OR-EQUAL ALESS-OR-EQUAL AGREATER ALESS AEQUAL ANOT-EQUAL GREATER-OR-EQUAL LESS-OR-EQUAL GREATER LESS EQUAL NOT-EQUAL AND RIGHT-BRACE LIMIT OFFSET ORDER HAVING GROUP VALUES LEFT-BRACE WHERE FROM RIGHT-PAR COMMA OR AS -! SEMICOLON) input))))
         (<REL-EXPR>-133.1
           (selectq (car input)
            ((FOR AND RIGHT-BRACE LIMIT OFFSET ORDER HAVING GROUP VALUES LEFT-BRACE WHERE FROM RIGHT-PAR COMMA OR AS -! SEMICOLON) ; REDUCE(133) op
              (setq input (cons '<CONJUNCTION> (nth 0 (reduce 1)))))
            (return (list 'SYNTAX-ERROR (caar stack) '(FOR AND RIGHT-BRACE LIMIT OFFSET ORDER HAVING GROUP VALUES LEFT-BRACE WHERE FROM RIGHT-PAR COMMA OR AS -! SEMICOLON) input))))
         (AT-ID-127.1
           (selectq (car input)
            ((FOR RIGHT-BRACKET A-AND ADIVIDE ATIMES DIVIDE TIMES COLON COMMA OR RIGHT-PAR AS AND NOT IN AGREATER-OR-EQUAL ALESS-OR-EQUAL AGREATER ALESS AEQUAL ANOT-EQUAL GREATER-OR-EQUAL LESS-OR-EQUAL GREATER LESS EQUAL NOT-EQUAL RIGHT-BRACE LIMIT OFFSET ORDER HAVING GROUP VALUES LEFT-BRACE WHERE FROM A-OR AMINUS APLUS MINUS PLUS DOUBLE-CAP STRING NUMBER TRUE FALSE URI PREF URI-TAIL A UNDERSCORE VAR LEFT-PAR LEFT-BRACKET GRAPH FILTER OPTIONAL BIND DOT SEMICOLON CAP UNDEF -! SEMICOLON) ; REDUCE(127) op
              (setq input (cons '<STRING-LANG> (apply #'(LAMBDA (A B) (LIST (QUOTE USTR) A B)) (reduce 2)))))
            (return (list 'SYNTAX-ERROR (caar stack) '(FOR RIGHT-BRACKET A-AND ADIVIDE ATIMES DIVIDE TIMES COLON COMMA OR RIGHT-PAR AS AND NOT IN AGREATER-OR-EQUAL ALESS-OR-EQUAL AGREATER ALESS AEQUAL ANOT-EQUAL GREATER-OR-EQUAL LESS-OR-EQUAL GREATER LESS EQUAL NOT-EQUAL RIGHT-BRACE LIMIT OFFSET ORDER HAVING GROUP VALUES LEFT-BRACE WHERE FROM A-OR AMINUS APLUS MINUS PLUS DOUBLE-CAP STRING NUMBER TRUE FALSE URI PREF URI-TAIL A UNDERSCORE VAR LEFT-PAR LEFT-BRACKET GRAPH FILTER OPTIONAL BIND DOT SEMICOLON CAP UNDEF -! SEMICOLON) input))))
         (A-120.1
           (selectq (car input)
            ((FOR RIGHT-BRACKET A-AND ADIVIDE ATIMES DIVIDE TIMES COLON COMMA A-OR AMINUS APLUS MINUS PLUS OR RIGHT-PAR AS AND STRING NUMBER TRUE FALSE URI PREF URI-TAIL A UNDEF INSERT DELETE NOT IN AGREATER-OR-EQUAL ALESS-OR-EQUAL AGREATER ALESS AEQUAL ANOT-EQUAL GREATER-OR-EQUAL LESS-OR-EQUAL GREATER LESS EQUAL NOT-EQUAL UNDERSCORE VAR LEFT-PAR LEFT-BRACKET VALUES GRAPH FILTER OPTIONAL BIND LEFT-BRACE DOT RIGHT-BRACE SEMICOLON CAP PIPE QUESTION WHERE USING LIMIT OFFSET ORDER HAVING GROUP FROM -! SEMICOLON) ; REDUCE(120) op
              (setq input (cons '<RESOURCE> (apply #'(LAMBDA (A) (LIST (QUOTE URI) "http://www.w3.org/1999/02/22-rdf-syntax-ns#type")) (reduce 1)))))
            (return (list 'SYNTAX-ERROR (caar stack) '(FOR RIGHT-BRACKET A-AND ADIVIDE ATIMES DIVIDE TIMES COLON COMMA A-OR AMINUS APLUS MINUS PLUS OR RIGHT-PAR AS AND STRING NUMBER TRUE FALSE URI PREF URI-TAIL A UNDEF INSERT DELETE NOT IN AGREATER-OR-EQUAL ALESS-OR-EQUAL AGREATER ALESS AEQUAL ANOT-EQUAL GREATER-OR-EQUAL LESS-OR-EQUAL GREATER LESS EQUAL NOT-EQUAL UNDERSCORE VAR LEFT-PAR LEFT-BRACKET VALUES GRAPH FILTER OPTIONAL BIND LEFT-BRACE DOT RIGHT-BRACE SEMICOLON CAP PIPE QUESTION WHERE USING LIMIT OFFSET ORDER HAVING GROUP FROM -! SEMICOLON) input))))
         (URI-TAIL-119.1
           (selectq (car input)
            ((FOR RIGHT-BRACKET A-AND ADIVIDE ATIMES DIVIDE TIMES COLON COMMA A-OR AMINUS APLUS MINUS PLUS OR RIGHT-PAR AS AND STRING NUMBER TRUE FALSE URI PREF URI-TAIL A UNDEF INSERT DELETE NOT IN AGREATER-OR-EQUAL ALESS-OR-EQUAL AGREATER ALESS AEQUAL ANOT-EQUAL GREATER-OR-EQUAL LESS-OR-EQUAL GREATER LESS EQUAL NOT-EQUAL UNDERSCORE VAR LEFT-PAR LEFT-BRACKET VALUES GRAPH FILTER OPTIONAL BIND LEFT-BRACE DOT RIGHT-BRACE SEMICOLON CAP PIPE QUESTION WHERE USING LIMIT OFFSET ORDER HAVING GROUP FROM -! SEMICOLON) ; REDUCE(119) op
              (setq input (cons '<RESOURCE> (apply #'(LAMBDA (A) (LIST (QUOTE PREFIXED) "" A)) (reduce 1)))))
            (return (list 'SYNTAX-ERROR (caar stack) '(FOR RIGHT-BRACKET A-AND ADIVIDE ATIMES DIVIDE TIMES COLON COMMA A-OR AMINUS APLUS MINUS PLUS OR RIGHT-PAR AS AND STRING NUMBER TRUE FALSE URI PREF URI-TAIL A UNDEF INSERT DELETE NOT IN AGREATER-OR-EQUAL ALESS-OR-EQUAL AGREATER ALESS AEQUAL ANOT-EQUAL GREATER-OR-EQUAL LESS-OR-EQUAL GREATER LESS EQUAL NOT-EQUAL UNDERSCORE VAR LEFT-PAR LEFT-BRACKET VALUES GRAPH FILTER OPTIONAL BIND LEFT-BRACE DOT RIGHT-BRACE SEMICOLON CAP PIPE QUESTION WHERE USING LIMIT OFFSET ORDER HAVING GROUP FROM -! SEMICOLON) input))))
         (URI-117.1
           (selectq (car input)
            ((FOR RIGHT-BRACKET A-AND ADIVIDE ATIMES DIVIDE TIMES COLON COMMA A-OR AMINUS APLUS MINUS PLUS OR RIGHT-PAR AS AND STRING NUMBER TRUE FALSE URI PREF URI-TAIL A UNDEF INSERT DELETE NOT IN AGREATER-OR-EQUAL ALESS-OR-EQUAL AGREATER ALESS AEQUAL ANOT-EQUAL GREATER-OR-EQUAL LESS-OR-EQUAL GREATER LESS EQUAL NOT-EQUAL UNDERSCORE VAR LEFT-PAR LEFT-BRACKET VALUES GRAPH FILTER OPTIONAL BIND LEFT-BRACE DOT RIGHT-BRACE SEMICOLON CAP PIPE QUESTION WHERE USING LIMIT OFFSET ORDER HAVING GROUP FROM -! SEMICOLON) ; REDUCE(117) op
              (setq input (cons '<RESOURCE> (apply #'(LAMBDA (A) (LIST (QUOTE URI) A)) (reduce 1)))))
            (return (list 'SYNTAX-ERROR (caar stack) '(FOR RIGHT-BRACKET A-AND ADIVIDE ATIMES DIVIDE TIMES COLON COMMA A-OR AMINUS APLUS MINUS PLUS OR RIGHT-PAR AS AND STRING NUMBER TRUE FALSE URI PREF URI-TAIL A UNDEF INSERT DELETE NOT IN AGREATER-OR-EQUAL ALESS-OR-EQUAL AGREATER ALESS AEQUAL ANOT-EQUAL GREATER-OR-EQUAL LESS-OR-EQUAL GREATER LESS EQUAL NOT-EQUAL UNDERSCORE VAR LEFT-PAR LEFT-BRACKET VALUES GRAPH FILTER OPTIONAL BIND LEFT-BRACE DOT RIGHT-BRACE SEMICOLON CAP PIPE QUESTION WHERE USING LIMIT OFFSET ORDER HAVING GROUP FROM -! SEMICOLON) input))))
         (<NAMED-EXPR>-56.1
           (selectq (car input)
            ((FOR LEFT-PAR VAR RIGHT-BRACE LIMIT OFFSET ORDER HAVING GROUP VALUES LEFT-BRACE WHERE FROM -! SEMICOLON) ; REDUCE(56) op
              (setq input (cons '<NAMED-EXPR-OR-VAR> (nth 0 (reduce 1)))))
            (return (list 'SYNTAX-ERROR (caar stack) '(FOR LEFT-PAR VAR RIGHT-BRACE LIMIT OFFSET ORDER HAVING GROUP VALUES LEFT-BRACE WHERE FROM -! SEMICOLON) input))))
         (VAR-55.1
           (selectq (car input)
            ((FOR LEFT-PAR VAR RIGHT-BRACE LIMIT OFFSET ORDER HAVING GROUP VALUES LEFT-BRACE WHERE FROM -! SEMICOLON) ; REDUCE(55) op
              (setq input (cons '<NAMED-EXPR-OR-VAR> (apply #'(LAMBDA (A) (CONS (QUOTE VAR) A)) (reduce 1)))))
            (return (list 'SYNTAX-ERROR (caar stack) '(FOR LEFT-PAR VAR RIGHT-BRACE LIMIT OFFSET ORDER HAVING GROUP VALUES LEFT-BRACE WHERE FROM -! SEMICOLON) input))))
         (<SEL-LIST>-14.1
           (selectq (car input)
            ((FOR RIGHT-BRACE LIMIT OFFSET ORDER HAVING GROUP VALUES LEFT-BRACE WHERE FROM -! SEMICOLON) ; REDUCE(14) op
              (setq input (cons '<QUERY> (apply #'(LAMBDA (A B) (MAKE-SPARQL-STAT :TYPE (QUOTE SELECT) :WHAT B)) (reduce 2)))))
            (return (list 'SYNTAX-ERROR (caar stack) '(FOR RIGHT-BRACE LIMIT OFFSET ORDER HAVING GROUP VALUES LEFT-BRACE WHERE FROM -! SEMICOLON) input))))
         (<CONDS>-62.1
           (selectq (car input)
            ((RIGHT-BRACE) ; REDUCE(62) op
              (setq input (cons '<CONDS> (apply #'(LAMBDA (A B) (IF (SPARQL-DATA-STREAMED DATA) (STREAMED-EXEC DATA A) (CONS A B))) (reduce 2)))))
            (return (list 'SYNTAX-ERROR (caar stack) '(RIGHT-BRACE) input))))
         (<CONDS>-63.1
           (selectq (car input)
            ((RIGHT-BRACE) ; REDUCE(63) op
              (setq input (cons '<CONDS> (apply #'(LAMBDA (A B) (IF (AND (SPARQL-DATA-STREAMED DATA) (NOT (EQ (CAR A) (QUOTE GRAPH-BLOCK)))) (ERROR "Only triple patterns are allowed in streamed updates!") (CONS A B))) (reduce 2)))))
            (return (list 'SYNTAX-ERROR (caar stack) '(RIGHT-BRACE) input))))
         (<CONDS>-64.1
           (selectq (car input)
            ((RIGHT-BRACE) ; REDUCE(64) op
              (setq input (cons '<CONDS> (nth 1 (reduce 2)))))
            (return (list 'SYNTAX-ERROR (caar stack) '(RIGHT-BRACE) input))))
         (<BLOCK>-77.1
           (selectq (car input)
            ((UNION RIGHT-BRACE STRING NUMBER TRUE FALSE URI PREF URI-TAIL A UNDERSCORE VAR LEFT-BRACKET LEFT-PAR VALUES GRAPH FILTER OPTIONAL BIND LEFT-BRACE DOT) ; REDUCE(77) op
              (setq input (cons '<UNION> (apply #'(LAMBDA (A B C) (LIST (QUOTE UNION) A C)) (reduce 3)))))
            (return (list 'SYNTAX-ERROR (caar stack) '(UNION RIGHT-BRACE STRING NUMBER TRUE FALSE URI PREF URI-TAIL A UNDERSCORE VAR LEFT-BRACKET LEFT-PAR VALUES GRAPH FILTER OPTIONAL BIND LEFT-BRACE DOT) input))))
         (<BLOCK>-78.1
           (selectq (car input)
            ((UNION RIGHT-BRACE STRING NUMBER TRUE FALSE URI PREF URI-TAIL A UNDERSCORE VAR LEFT-BRACKET LEFT-PAR VALUES GRAPH FILTER OPTIONAL BIND LEFT-BRACE DOT) ; REDUCE(78) op
              (setq input (cons '<UNION> (apply #'(LAMBDA (A B C) (APPEND A (LIST C))) (reduce 3)))))
            (return (list 'SYNTAX-ERROR (caar stack) '(UNION RIGHT-BRACE STRING NUMBER TRUE FALSE URI PREF URI-TAIL A UNDERSCORE VAR LEFT-BRACKET LEFT-PAR VALUES GRAPH FILTER OPTIONAL BIND LEFT-BRACE DOT) input))))
         (RIGHT-BRACE-73.1
           (selectq (car input)
            ((STRING NUMBER TRUE FALSE URI PREF URI-TAIL A UNDERSCORE VAR LEFT-BRACKET LEFT-PAR VALUES GRAPH FILTER OPTIONAL BIND LEFT-BRACE DOT RIGHT-BRACE) ; REDUCE(73) op
              (setq input (cons '<NONTRIPLES> (apply #'(LAMBDA (A B C) (CONS (QUOTE SUBQUERY) B)) (reduce 3)))))
            (return (list 'SYNTAX-ERROR (caar stack) '(STRING NUMBER TRUE FALSE URI PREF URI-TAIL A UNDERSCORE VAR LEFT-BRACKET LEFT-PAR VALUES GRAPH FILTER OPTIONAL BIND LEFT-BRACE DOT RIGHT-BRACE) input))))
         (<NUM-EXPR>-29.1
           (selectq (car input)
            ((FOR RIGHT-BRACE LIMIT OFFSET ORDER HAVING GROUP VALUES LEFT-BRACE WHERE FROM -! SEMICOLON) ; REDUCE(29) op
              (setq input (cons '<QUERY> (apply #'(LAMBDA (A B C) (SETF (SPARQL-STAT-LIMIT A) C) A) (reduce 3)))))
            (return (list 'SYNTAX-ERROR (caar stack) '(FOR RIGHT-BRACE LIMIT OFFSET ORDER HAVING GROUP VALUES LEFT-BRACE WHERE FROM -! SEMICOLON) input))))
         (<NUM-EXPR>-28.1
           (selectq (car input)
            ((FOR RIGHT-BRACE LIMIT OFFSET ORDER HAVING GROUP VALUES LEFT-BRACE WHERE FROM -! SEMICOLON) ; REDUCE(28) op
              (setq input (cons '<QUERY> (apply #'(LAMBDA (A B C) (SETF (SPARQL-STAT-OFFSET A) C) A) (reduce 3)))))
            (return (list 'SYNTAX-ERROR (caar stack) '(FOR RIGHT-BRACE LIMIT OFFSET ORDER HAVING GROUP VALUES LEFT-BRACE WHERE FROM -! SEMICOLON) input))))
         (<ORDER-LIST>-50.1
           (selectq (car input)
            ((FOR RIGHT-BRACE LIMIT OFFSET ORDER HAVING GROUP VALUES LEFT-BRACE WHERE FROM -! SEMICOLON) ; REDUCE(50) op
              (setq input (cons '<ORDER-LIST> (apply #'(LAMBDA (A B) (CONS A B)) (reduce 2)))))
            (return (list 'SYNTAX-ERROR (caar stack) '(FOR RIGHT-BRACE LIMIT OFFSET ORDER HAVING GROUP VALUES LEFT-BRACE WHERE FROM -! SEMICOLON) input))))
         (RIGHT-PAR-52.1
           (selectq (car input)
            ((FOR VAR DESC RIGHT-BRACE LIMIT OFFSET ORDER HAVING GROUP VALUES LEFT-BRACE WHERE FROM -! SEMICOLON) ; REDUCE(52) op
              (setq input (cons '<ORDERED-VAR> (apply #'(LAMBDA (A B C D) (CONS (QUOTE DESC-VAR) C)) (reduce 4)))))
            (return (list 'SYNTAX-ERROR (caar stack) '(FOR VAR DESC RIGHT-BRACE LIMIT OFFSET ORDER HAVING GROUP VALUES LEFT-BRACE WHERE FROM -! SEMICOLON) input))))
         (VAR-51.1
           (selectq (car input)
            ((FOR VAR DESC RIGHT-BRACE LIMIT OFFSET ORDER HAVING GROUP VALUES LEFT-BRACE WHERE FROM -! SEMICOLON) ; REDUCE(51) op
              (setq input (cons '<ORDERED-VAR> (apply #'(LAMBDA (A) (CONS (QUOTE VAR) A)) (reduce 1)))))
            (return (list 'SYNTAX-ERROR (caar stack) '(FOR VAR DESC RIGHT-BRACE LIMIT OFFSET ORDER HAVING GROUP VALUES LEFT-BRACE WHERE FROM -! SEMICOLON) input))))
         (<ORDER-LIST>-27.1
           (selectq (car input)
            ((FOR RIGHT-BRACE LIMIT OFFSET ORDER HAVING GROUP VALUES LEFT-BRACE WHERE FROM -! SEMICOLON) ; REDUCE(27) op
              (setq input (cons '<QUERY> (apply #'(LAMBDA (A B C D) (SETF (SPARQL-STAT-ORDERBY A) D) A) (reduce 4)))))
            (return (list 'SYNTAX-ERROR (caar stack) '(FOR RIGHT-BRACE LIMIT OFFSET ORDER HAVING GROUP VALUES LEFT-BRACE WHERE FROM -! SEMICOLON) input))))
         (<VAR-LIST>-59.1
           (selectq (car input)
            ((FOR RIGHT-PAR RIGHT-BRACE LIMIT OFFSET ORDER HAVING GROUP VALUES LEFT-BRACE WHERE FROM -! SEMICOLON) ; REDUCE(59) op
              (setq input (cons '<VAR-LIST> (apply #'(LAMBDA (A B) (CONS A B)) (reduce 2)))))
            (return (list 'SYNTAX-ERROR (caar stack) '(FOR RIGHT-PAR RIGHT-BRACE LIMIT OFFSET ORDER HAVING GROUP VALUES LEFT-BRACE WHERE FROM -! SEMICOLON) input))))
         (<VAR-LIST>-25.1
           (selectq (car input)
            ((FOR RIGHT-BRACE LIMIT OFFSET ORDER HAVING GROUP VALUES LEFT-BRACE WHERE FROM -! SEMICOLON) ; REDUCE(25) op
              (setq input (cons '<QUERY> (apply #'(LAMBDA (A B C D) (SETF (SPARQL-STAT-GROUPBY A) D) A) (reduce 4)))))
            (return (list 'SYNTAX-ERROR (caar stack) '(FOR RIGHT-BRACE LIMIT OFFSET ORDER HAVING GROUP VALUES LEFT-BRACE WHERE FROM -! SEMICOLON) input))))
         (<VALUES-CLAUSE>-24.1
           (selectq (car input)
            ((FOR RIGHT-BRACE LIMIT OFFSET ORDER HAVING GROUP VALUES LEFT-BRACE WHERE FROM -! SEMICOLON) ; REDUCE(24) op
              (setq input (cons '<QUERY> (apply #'(LAMBDA (A B) (UNLESS (SPARQL-STAT-WHERE A) (ERROR "VALUES shold follow a query block!")) (SETF (BLOCK-CONDS (SPARQL-STAT-WHERE A)) (APPEND (BLOCK-CONDS (SPARQL-STAT-WHERE A)) (LIST B))) A) (reduce 2)))))
            (return (list 'SYNTAX-ERROR (caar stack) '(FOR RIGHT-BRACE LIMIT OFFSET ORDER HAVING GROUP VALUES LEFT-BRACE WHERE FROM -! SEMICOLON) input))))
         (<BLOCK>-23.1
           (selectq (car input)
            ((FOR RIGHT-BRACE LIMIT OFFSET ORDER HAVING GROUP VALUES LEFT-BRACE WHERE FROM -! SEMICOLON) ; REDUCE(23) op
              (setq input (cons '<QUERY> (apply #'(LAMBDA (A B) (SETF (SPARQL-STAT-WHERE A) B) A) (reduce 2)))))
            (return (list 'SYNTAX-ERROR (caar stack) '(FOR RIGHT-BRACE LIMIT OFFSET ORDER HAVING GROUP VALUES LEFT-BRACE WHERE FROM -! SEMICOLON) input))))
         (<BLOCK>-22.1
           (selectq (car input)
            ((FOR RIGHT-BRACE LIMIT OFFSET ORDER HAVING GROUP VALUES LEFT-BRACE WHERE FROM -! SEMICOLON) ; REDUCE(22) op
              (setq input (cons '<QUERY> (apply #'(LAMBDA (A B C) (SETF (SPARQL-STAT-WHERE A) C) A) (reduce 3)))))
            (return (list 'SYNTAX-ERROR (caar stack) '(FOR RIGHT-BRACE LIMIT OFFSET ORDER HAVING GROUP VALUES LEFT-BRACE WHERE FROM -! SEMICOLON) input))))
         (<RESOURCE>-21.1
           (selectq (car input)
            ((FOR RIGHT-BRACE LIMIT OFFSET ORDER HAVING GROUP VALUES LEFT-BRACE WHERE FROM -! SEMICOLON) ; REDUCE(21) op
              (setq input (cons '<QUERY> (apply #'(LAMBDA (A B C D) (PUSH D (SPARQL-STAT-FROM A)) A) (reduce 4)))))
            (return (list 'SYNTAX-ERROR (caar stack) '(FOR RIGHT-BRACE LIMIT OFFSET ORDER HAVING GROUP VALUES LEFT-BRACE WHERE FROM -! SEMICOLON) input))))
         (<RESOURCE>-20.1
           (selectq (car input)
            ((FOR RIGHT-BRACE LIMIT OFFSET ORDER HAVING GROUP VALUES LEFT-BRACE WHERE FROM -! SEMICOLON) ; REDUCE(20) op
              (setq input (cons '<QUERY> (apply #'(LAMBDA (A B C) (PUSH C (SPARQL-STAT-FROM A)) A) (reduce 3)))))
            (return (list 'SYNTAX-ERROR (caar stack) '(FOR RIGHT-BRACE LIMIT OFFSET ORDER HAVING GROUP VALUES LEFT-BRACE WHERE FROM -! SEMICOLON) input))))
         (<INLINE-DATA>-82.1
           (selectq (car input)
            ((RIGHT-PAR RIGHT-BRACE) ; REDUCE(82) op
              (setq input (cons '<INLINE-DATA> (apply #'(LAMBDA (A B) (CONS A B)) (reduce 2)))))
            (return (list 'SYNTAX-ERROR (caar stack) '(RIGHT-PAR RIGHT-BRACE) input))))
         (<INLINE-DATA>-83.1
           (selectq (car input)
            ((RIGHT-PAR RIGHT-BRACE) ; REDUCE(83) op
              (setq input (cons '<INLINE-DATA> (apply #'(LAMBDA (A B) (CONS A B)) (reduce 2)))))
            (return (list 'SYNTAX-ERROR (caar stack) '(RIGHT-PAR RIGHT-BRACE) input))))
         (<INLINE-DATA>-84.1
           (selectq (car input)
            ((RIGHT-PAR RIGHT-BRACE) ; REDUCE(84) op
              (setq input (cons '<INLINE-DATA> (apply #'(LAMBDA (A B) (CONS (QUOTE (UNDEF)) B)) (reduce 2)))))
            (return (list 'SYNTAX-ERROR (caar stack) '(RIGHT-PAR RIGHT-BRACE) input))))
         (<INLINE-DATA-TUPLES>-86.1
           (selectq (car input)
            ((RIGHT-BRACE) ; REDUCE(86) op
              (setq input (cons '<INLINE-DATA-TUPLES> (apply #'(LAMBDA (A B C D) (CONS B D)) (reduce 4)))))
            (return (list 'SYNTAX-ERROR (caar stack) '(RIGHT-BRACE) input))))
         (RIGHT-BRACE-80.1
           (selectq (car input)
            ((FOR RIGHT-BRACE STRING NUMBER TRUE FALSE URI PREF URI-TAIL A UNDERSCORE VAR LEFT-BRACKET LEFT-PAR VALUES GRAPH FILTER OPTIONAL BIND LEFT-BRACE DOT LIMIT OFFSET ORDER HAVING GROUP WHERE FROM -! SEMICOLON) ; REDUCE(80) op
              (setq input (cons '<VALUES-CLAUSE> (apply #'(LAMBDA (A B C D E F G) (LIST (QUOTE VALUES) C F)) (reduce 7)))))
            (return (list 'SYNTAX-ERROR (caar stack) '(FOR RIGHT-BRACE STRING NUMBER TRUE FALSE URI PREF URI-TAIL A UNDERSCORE VAR LEFT-BRACKET LEFT-PAR VALUES GRAPH FILTER OPTIONAL BIND LEFT-BRACE DOT LIMIT OFFSET ORDER HAVING GROUP WHERE FROM -! SEMICOLON) input))))
         (RIGHT-BRACE-79.1
           (selectq (car input)
            ((FOR RIGHT-BRACE STRING NUMBER TRUE FALSE URI PREF URI-TAIL A UNDERSCORE VAR LEFT-BRACKET LEFT-PAR VALUES GRAPH FILTER OPTIONAL BIND LEFT-BRACE DOT LIMIT OFFSET ORDER HAVING GROUP WHERE FROM -! SEMICOLON) ; REDUCE(79) op
              (setq input (cons '<VALUES-CLAUSE> (apply #'(LAMBDA (A B C D E) (LIST (QUOTE VALUES) (LIST B) (MAPCAR (FUNCTION LIST) D))) (reduce 5)))))
            (return (list 'SYNTAX-ERROR (caar stack) '(FOR RIGHT-BRACE STRING NUMBER TRUE FALSE URI PREF URI-TAIL A UNDERSCORE VAR LEFT-BRACKET LEFT-PAR VALUES GRAPH FILTER OPTIONAL BIND LEFT-BRACE DOT LIMIT OFFSET ORDER HAVING GROUP WHERE FROM -! SEMICOLON) input))))
         (VAR-76.1
           (selectq (car input)
            ((LEFT-BRACE) ; REDUCE(76) op
              (setq input (cons '<GRAPH-SPECIFIER> (apply #'(LAMBDA (A B) (IF (SPARQL-DATA-STREAMED DATA) (ERROR "Variables are not allowed in streamed updates!") (CONS (QUOTE VAR) B))) (reduce 2)))))
            (return (list 'SYNTAX-ERROR (caar stack) '(LEFT-BRACE) input))))
         (<RESOURCE>-75.1
           (selectq (car input)
            ((LEFT-BRACE) ; REDUCE(75) op
              (setq input (cons '<GRAPH-SPECIFIER> (apply #'(LAMBDA (A B) (CAR (PUSH B (SPARQL-DATA-GRAPHS DATA)))) (reduce 2)))))
            (return (list 'SYNTAX-ERROR (caar stack) '(LEFT-BRACE) input))))
         (<BLOCK>-74.1
           (selectq (car input)
            ((STRING NUMBER TRUE FALSE URI PREF URI-TAIL A UNDERSCORE VAR LEFT-BRACKET LEFT-PAR VALUES GRAPH FILTER OPTIONAL BIND LEFT-BRACE DOT RIGHT-BRACE) ; REDUCE(74) op
              (setq input (cons '<NONTRIPLES> (apply #'(LAMBDA (A B) (POP (SPARQL-DATA-GRAPHS DATA)) (LIST (QUOTE GRAPH-BLOCK) A B)) (reduce 2)))))
            (return (list 'SYNTAX-ERROR (caar stack) '(STRING NUMBER TRUE FALSE URI PREF URI-TAIL A UNDERSCORE VAR LEFT-BRACKET LEFT-PAR VALUES GRAPH FILTER OPTIONAL BIND LEFT-BRACE DOT RIGHT-BRACE) input))))
         (<VALUES-CLAUSE>-72.1
           (selectq (car input)
            ((STRING NUMBER TRUE FALSE URI PREF URI-TAIL A UNDERSCORE VAR LEFT-BRACKET LEFT-PAR VALUES GRAPH FILTER OPTIONAL BIND LEFT-BRACE DOT RIGHT-BRACE) ; REDUCE(72) op
              (setq input (cons '<NONTRIPLES> (nth 0 (reduce 1)))))
            (return (list 'SYNTAX-ERROR (caar stack) '(STRING NUMBER TRUE FALSE URI PREF URI-TAIL A UNDERSCORE VAR LEFT-BRACKET LEFT-PAR VALUES GRAPH FILTER OPTIONAL BIND LEFT-BRACE DOT RIGHT-BRACE) input))))
         (<NAMED-EXPR>-71.1
           (selectq (car input)
            ((STRING NUMBER TRUE FALSE URI PREF URI-TAIL A UNDERSCORE VAR LEFT-BRACKET LEFT-PAR VALUES GRAPH FILTER OPTIONAL BIND LEFT-BRACE DOT RIGHT-BRACE) ; REDUCE(71) op
              (setq input (cons '<NONTRIPLES> (apply #'(LAMBDA (A B) (CONS (QUOTE BIND) (CDR B))) (reduce 2)))))
            (return (list 'SYNTAX-ERROR (caar stack) '(STRING NUMBER TRUE FALSE URI PREF URI-TAIL A UNDERSCORE VAR LEFT-BRACKET LEFT-PAR VALUES GRAPH FILTER OPTIONAL BIND LEFT-BRACE DOT RIGHT-BRACE) input))))
         (<BLOCK>-69.1
           (selectq (car input)
            ((STRING NUMBER TRUE FALSE URI PREF URI-TAIL A UNDERSCORE VAR LEFT-BRACKET LEFT-PAR VALUES GRAPH FILTER OPTIONAL BIND LEFT-BRACE DOT RIGHT-BRACE) ; REDUCE(69) op
              (setq input (cons '<NONTRIPLES> (apply #'(LAMBDA (A B) (CONS (QUOTE OPTIONAL) B)) (reduce 2)))))
            (return (list 'SYNTAX-ERROR (caar stack) '(STRING NUMBER TRUE FALSE URI PREF URI-TAIL A UNDERSCORE VAR LEFT-BRACKET LEFT-PAR VALUES GRAPH FILTER OPTIONAL BIND LEFT-BRACE DOT RIGHT-BRACE) input))))
         (<BLOCK>-68.1
           (selectq (car input)
            ((STRING NUMBER TRUE FALSE URI PREF URI-TAIL A UNDERSCORE VAR LEFT-BRACKET LEFT-PAR VALUES GRAPH FILTER OPTIONAL BIND LEFT-BRACE DOT RIGHT-BRACE) ; REDUCE(68) op
              (setq input (cons '<NONTRIPLES> (apply #'(LAMBDA (A B C D) (CONS (QUOTE NOT-EXISTS) D)) (reduce 4)))))
            (return (list 'SYNTAX-ERROR (caar stack) '(STRING NUMBER TRUE FALSE URI PREF URI-TAIL A UNDERSCORE VAR LEFT-BRACKET LEFT-PAR VALUES GRAPH FILTER OPTIONAL BIND LEFT-BRACE DOT RIGHT-BRACE) input))))
         (<BLOCK>-67.1
           (selectq (car input)
            ((STRING NUMBER TRUE FALSE URI PREF URI-TAIL A UNDERSCORE VAR LEFT-BRACKET LEFT-PAR VALUES GRAPH FILTER OPTIONAL BIND LEFT-BRACE DOT RIGHT-BRACE) ; REDUCE(67) op
              (setq input (cons '<NONTRIPLES> (apply #'(LAMBDA (A B C) (CONS (QUOTE EXISTS) C)) (reduce 3)))))
            (return (list 'SYNTAX-ERROR (caar stack) '(STRING NUMBER TRUE FALSE URI PREF URI-TAIL A UNDERSCORE VAR LEFT-BRACKET LEFT-PAR VALUES GRAPH FILTER OPTIONAL BIND LEFT-BRACE DOT RIGHT-BRACE) input))))
         (<SIMPLE-FNCALL>-66.1
           (selectq (car input)
            ((STRING NUMBER TRUE FALSE URI PREF URI-TAIL A UNDERSCORE VAR LEFT-BRACKET LEFT-PAR VALUES GRAPH FILTER OPTIONAL BIND LEFT-BRACE DOT RIGHT-BRACE) ; REDUCE(66) op
              (setq input (cons '<NONTRIPLES> (apply #'(LAMBDA (A B) (CONS (QUOTE FILTER) B)) (reduce 2)))))
            (return (list 'SYNTAX-ERROR (caar stack) '(STRING NUMBER TRUE FALSE URI PREF URI-TAIL A UNDERSCORE VAR LEFT-BRACKET LEFT-PAR VALUES GRAPH FILTER OPTIONAL BIND LEFT-BRACE DOT RIGHT-BRACE) input))))
         (RIGHT-PAR-65.1
           (selectq (car input)
            ((STRING NUMBER TRUE FALSE URI PREF URI-TAIL A UNDERSCORE VAR LEFT-BRACKET LEFT-PAR VALUES GRAPH FILTER OPTIONAL BIND LEFT-BRACE DOT RIGHT-BRACE) ; REDUCE(65) op
              (setq input (cons '<NONTRIPLES> (apply #'(LAMBDA (A B C D) (CONS (QUOTE FILTER) C)) (reduce 4)))))
            (return (list 'SYNTAX-ERROR (caar stack) '(STRING NUMBER TRUE FALSE URI PREF URI-TAIL A UNDERSCORE VAR LEFT-BRACKET LEFT-PAR VALUES GRAPH FILTER OPTIONAL BIND LEFT-BRACE DOT RIGHT-BRACE) input))))
         (<OBJECT>-106.1
           (selectq (car input)
            ((URI PREF URI-TAIL A LEFT-PAR CAP VAR RIGHT-BRACKET SEMICOLON RIGHT-BRACE STRING NUMBER TRUE FALSE UNDERSCORE LEFT-BRACKET VALUES GRAPH FILTER OPTIONAL BIND LEFT-BRACE DOT RIGHT-PAR COMMA) ; REDUCE(106) op
              (setq input (cons '<NODE> (apply #'(LAMBDA (A) (MAKE-SQO :N A)) (reduce 1)))))
            (return (list 'SYNTAX-ERROR (caar stack) '(URI PREF URI-TAIL A LEFT-PAR CAP VAR RIGHT-BRACKET SEMICOLON RIGHT-BRACE STRING NUMBER TRUE FALSE UNDERSCORE LEFT-BRACKET VALUES GRAPH FILTER OPTIONAL BIND LEFT-BRACE DOT RIGHT-PAR COMMA) input))))
         (RIGHT-BRACKET-108.1
           (selectq (car input)
            ((URI PREF URI-TAIL A LEFT-PAR CAP VAR RIGHT-BRACKET SEMICOLON RIGHT-BRACE STRING NUMBER TRUE FALSE UNDERSCORE LEFT-BRACKET VALUES GRAPH FILTER OPTIONAL BIND LEFT-BRACE DOT RIGHT-PAR COMMA) ; REDUCE(108) op
              (setq input (cons '<NODE> (apply #'(LAMBDA (A B) (MAKE-SQO :N (SPARQL-GEN-BLANK DATA))) (reduce 2)))))
            (return (list 'SYNTAX-ERROR (caar stack) '(URI PREF URI-TAIL A LEFT-PAR CAP VAR RIGHT-BRACKET SEMICOLON RIGHT-BRACE STRING NUMBER TRUE FALSE UNDERSCORE LEFT-BRACKET VALUES GRAPH FILTER OPTIONAL BIND LEFT-BRACE DOT RIGHT-PAR COMMA) input))))
         (<NODE>-104.1
           (selectq (car input)
            ((COMMA STRING NUMBER TRUE FALSE URI PREF URI-TAIL A UNDERSCORE VAR LEFT-BRACKET LEFT-PAR VALUES GRAPH FILTER OPTIONAL BIND LEFT-BRACE DOT RIGHT-BRACE RIGHT-BRACKET SEMICOLON) ; REDUCE(104) op
              (setq input (cons '<OBJ-LIST> (apply #'(LAMBDA (A) (LIST A)) (reduce 1)))))
            (return (list 'SYNTAX-ERROR (caar stack) '(COMMA STRING NUMBER TRUE FALSE URI PREF URI-TAIL A UNDERSCORE VAR LEFT-BRACKET LEFT-PAR VALUES GRAPH FILTER OPTIONAL BIND LEFT-BRACE DOT RIGHT-BRACE RIGHT-BRACKET SEMICOLON) input))))
         (<NODE>-105.1
           (selectq (car input)
            ((COMMA STRING NUMBER TRUE FALSE URI PREF URI-TAIL A UNDERSCORE VAR LEFT-BRACKET LEFT-PAR VALUES GRAPH FILTER OPTIONAL BIND LEFT-BRACE DOT RIGHT-BRACE RIGHT-BRACKET SEMICOLON) ; REDUCE(105) op
              (setq input (cons '<OBJ-LIST> (apply #'(LAMBDA (A B C) (CONS C A)) (reduce 3)))))
            (return (list 'SYNTAX-ERROR (caar stack) '(COMMA STRING NUMBER TRUE FALSE URI PREF URI-TAIL A UNDERSCORE VAR LEFT-BRACKET LEFT-PAR VALUES GRAPH FILTER OPTIONAL BIND LEFT-BRACE DOT RIGHT-BRACE RIGHT-BRACKET SEMICOLON) input))))
         (RIGHT-BRACKET-107.1
           (selectq (car input)
            ((URI PREF URI-TAIL A LEFT-PAR CAP VAR RIGHT-BRACKET SEMICOLON RIGHT-BRACE STRING NUMBER TRUE FALSE UNDERSCORE LEFT-BRACKET VALUES GRAPH FILTER OPTIONAL BIND LEFT-BRACE DOT RIGHT-PAR COMMA) ; REDUCE(107) op
              (setq input (cons '<NODE> (apply #'(LAMBDA (A B C) (LET ((RES (SPARQL-GEN-BLANK DATA))) (MAKE-SQO :N RES :TS (SPARQL-MAKE-TRIPLES (MAKE-SQO :N RES) B)))) (reduce 3)))))
            (return (list 'SYNTAX-ERROR (caar stack) '(URI PREF URI-TAIL A LEFT-PAR CAP VAR RIGHT-BRACKET SEMICOLON RIGHT-BRACE STRING NUMBER TRUE FALSE UNDERSCORE LEFT-BRACKET VALUES GRAPH FILTER OPTIONAL BIND LEFT-BRACE DOT RIGHT-PAR COMMA) input))))
         (<PATH-ELT-OR-INVERSE>-95.1
           (selectq (car input)
            ((DIVIDE STRING NUMBER TRUE FALSE URI PREF URI-TAIL A UNDERSCORE VAR LEFT-BRACKET LEFT-PAR RIGHT-PAR PIPE) ; REDUCE(95) op
              (setq input (cons '<PATH-SEQUENCE> (apply #'(LAMBDA (A B C) (IF (EQ (CAR A) (QUOTE PATH-SEQ)) (APPEND A (LIST C)) (LIST (QUOTE PATH-SEQ) A C))) (reduce 3)))))
            (return (list 'SYNTAX-ERROR (caar stack) '(DIVIDE STRING NUMBER TRUE FALSE URI PREF URI-TAIL A UNDERSCORE VAR LEFT-BRACKET LEFT-PAR RIGHT-PAR PIPE) input))))
         (<PATH-ELT>-96.1
           (selectq (car input)
            ((RIGHT-PAR PIPE STRING NUMBER TRUE FALSE URI PREF URI-TAIL A UNDERSCORE VAR LEFT-BRACKET LEFT-PAR DIVIDE) ; REDUCE(96) op
              (setq input (cons '<PATH-ELT-OR-INVERSE> (nth 0 (reduce 1)))))
            (return (list 'SYNTAX-ERROR (caar stack) '(RIGHT-PAR PIPE STRING NUMBER TRUE FALSE URI PREF URI-TAIL A UNDERSCORE VAR LEFT-BRACKET LEFT-PAR DIVIDE) input))))
         (<PATH-ELT>-97.1
           (selectq (car input)
            ((RIGHT-PAR PIPE STRING NUMBER TRUE FALSE URI PREF URI-TAIL A UNDERSCORE VAR LEFT-BRACKET LEFT-PAR DIVIDE) ; REDUCE(97) op
              (setq input (cons '<PATH-ELT-OR-INVERSE> (apply #'(LAMBDA (A B) (LIST (QUOTE PATH-INVERSE) B)) (reduce 2)))))
            (return (list 'SYNTAX-ERROR (caar stack) '(RIGHT-PAR PIPE STRING NUMBER TRUE FALSE URI PREF URI-TAIL A UNDERSCORE VAR LEFT-BRACKET LEFT-PAR DIVIDE) input))))
         (<RESOURCE>-102.1
           (selectq (car input)
            ((PLUS TIMES QUESTION RIGHT-PAR PIPE STRING NUMBER TRUE FALSE URI PREF URI-TAIL A UNDERSCORE VAR LEFT-BRACKET LEFT-PAR DIVIDE) ; REDUCE(102) op
              (setq input (cons '<PATH-PRIMARY> (nth 0 (reduce 1)))))
            (return (list 'SYNTAX-ERROR (caar stack) '(PLUS TIMES QUESTION RIGHT-PAR PIPE STRING NUMBER TRUE FALSE URI PREF URI-TAIL A UNDERSCORE VAR LEFT-BRACKET LEFT-PAR DIVIDE) input))))
         (RIGHT-PAR-103.1
           (selectq (car input)
            ((PLUS TIMES QUESTION RIGHT-PAR PIPE STRING NUMBER TRUE FALSE URI PREF URI-TAIL A UNDERSCORE VAR LEFT-BRACKET LEFT-PAR DIVIDE) ; REDUCE(103) op
              (setq input (cons '<PATH-PRIMARY> (nth 1 (reduce 3)))))
            (return (list 'SYNTAX-ERROR (caar stack) '(PLUS TIMES QUESTION RIGHT-PAR PIPE STRING NUMBER TRUE FALSE URI PREF URI-TAIL A UNDERSCORE VAR LEFT-BRACKET LEFT-PAR DIVIDE) input))))
         (PLUS-101.1
           (selectq (car input)
            ((DIVIDE STRING NUMBER TRUE FALSE URI PREF URI-TAIL A UNDERSCORE VAR LEFT-BRACKET LEFT-PAR RIGHT-PAR PIPE) ; REDUCE(101) op
              (setq input (cons '<PATH-ELT> (apply #'(LAMBDA (A B) (LIST (QUOTE PATH1N) A)) (reduce 2)))))
            (return (list 'SYNTAX-ERROR (caar stack) '(DIVIDE STRING NUMBER TRUE FALSE URI PREF URI-TAIL A UNDERSCORE VAR LEFT-BRACKET LEFT-PAR RIGHT-PAR PIPE) input))))
         (TIMES-100.1
           (selectq (car input)
            ((DIVIDE STRING NUMBER TRUE FALSE URI PREF URI-TAIL A UNDERSCORE VAR LEFT-BRACKET LEFT-PAR RIGHT-PAR PIPE) ; REDUCE(100) op
              (setq input (cons '<PATH-ELT> (apply #'(LAMBDA (A B) (LIST (QUOTE PATH0N) A)) (reduce 2)))))
            (return (list 'SYNTAX-ERROR (caar stack) '(DIVIDE STRING NUMBER TRUE FALSE URI PREF URI-TAIL A UNDERSCORE VAR LEFT-BRACKET LEFT-PAR RIGHT-PAR PIPE) input))))
         (QUESTION-99.1
           (selectq (car input)
            ((DIVIDE STRING NUMBER TRUE FALSE URI PREF URI-TAIL A UNDERSCORE VAR LEFT-BRACKET LEFT-PAR RIGHT-PAR PIPE) ; REDUCE(99) op
              (setq input (cons '<PATH-ELT> (apply #'(LAMBDA (A B) (LIST (QUOTE PATH01) A)) (reduce 2)))))
            (return (list 'SYNTAX-ERROR (caar stack) '(DIVIDE STRING NUMBER TRUE FALSE URI PREF URI-TAIL A UNDERSCORE VAR LEFT-BRACKET LEFT-PAR RIGHT-PAR PIPE) input))))
         (<PATH-ELT-OR-INVERSE>-94.1
           (selectq (car input)
            ((DIVIDE STRING NUMBER TRUE FALSE URI PREF URI-TAIL A UNDERSCORE VAR LEFT-BRACKET LEFT-PAR RIGHT-PAR PIPE) ; REDUCE(94) op
              (setq input (cons '<PATH-SEQUENCE> (nth 0 (reduce 1)))))
            (return (list 'SYNTAX-ERROR (caar stack) '(DIVIDE STRING NUMBER TRUE FALSE URI PREF URI-TAIL A UNDERSCORE VAR LEFT-BRACKET LEFT-PAR RIGHT-PAR PIPE) input))))
         (VAR-90.1
           (selectq (car input)
            ((STRING NUMBER TRUE FALSE URI PREF URI-TAIL A UNDERSCORE VAR LEFT-BRACKET LEFT-PAR) ; REDUCE(90) op
              (setq input (cons '<OBJECT-OR-PATH> (apply #'(LAMBDA (A) (CONS (QUOTE VAR) A)) (reduce 1)))))
            (return (list 'SYNTAX-ERROR (caar stack) '(STRING NUMBER TRUE FALSE URI PREF URI-TAIL A UNDERSCORE VAR LEFT-BRACKET LEFT-PAR) input))))
         (<NODE>-111.1
           (selectq (car input)
            ((STRING NUMBER TRUE FALSE URI PREF URI-TAIL A UNDERSCORE VAR LEFT-PAR LEFT-BRACKET RIGHT-PAR) ; REDUCE(111) op
              (setq input (cons '<NODES> (apply #'(LAMBDA (A B) (CONS B A)) (reduce 2)))))
            (return (list 'SYNTAX-ERROR (caar stack) '(STRING NUMBER TRUE FALSE URI PREF URI-TAIL A UNDERSCORE VAR LEFT-PAR LEFT-BRACKET RIGHT-PAR) input))))
         (RIGHT-PAR-109.1
           (selectq (car input)
            ((URI PREF URI-TAIL A LEFT-PAR CAP VAR RIGHT-BRACKET SEMICOLON RIGHT-BRACE STRING NUMBER TRUE FALSE UNDERSCORE LEFT-BRACKET VALUES GRAPH FILTER OPTIONAL BIND LEFT-BRACE DOT RIGHT-PAR COMMA) ; REDUCE(109) op
              (setq input (cons '<NODE> (apply #'(LAMBDA (A B C) (SPARQL-COLLECTION-TO-TRIPLES DATA (NREVERSE B))) (reduce 3)))))
            (return (list 'SYNTAX-ERROR (caar stack) '(URI PREF URI-TAIL A LEFT-PAR CAP VAR RIGHT-BRACKET SEMICOLON RIGHT-BRACE STRING NUMBER TRUE FALSE UNDERSCORE LEFT-BRACKET VALUES GRAPH FILTER OPTIONAL BIND LEFT-BRACE DOT RIGHT-PAR COMMA) input))))
         (<LITERAL>-116.1
           (selectq (car input)
            ((COMMA STRING NUMBER TRUE FALSE URI PREF URI-TAIL A UNDERSCORE VAR LEFT-PAR LEFT-BRACKET RIGHT-PAR VALUES GRAPH FILTER OPTIONAL BIND LEFT-BRACE DOT RIGHT-BRACE RIGHT-BRACKET SEMICOLON CAP) ; REDUCE(116) op
              (setq input (cons '<OBJECT> (nth 0 (reduce 1)))))
            (return (list 'SYNTAX-ERROR (caar stack) '(COMMA STRING NUMBER TRUE FALSE URI PREF URI-TAIL A UNDERSCORE VAR LEFT-PAR LEFT-BRACKET RIGHT-PAR VALUES GRAPH FILTER OPTIONAL BIND LEFT-BRACE DOT RIGHT-BRACE RIGHT-BRACKET SEMICOLON CAP) input))))
         (VAR-113.1
           (selectq (car input)
            ((COMMA STRING NUMBER TRUE FALSE URI PREF URI-TAIL A UNDERSCORE VAR LEFT-PAR LEFT-BRACKET RIGHT-PAR VALUES GRAPH FILTER OPTIONAL BIND LEFT-BRACE DOT RIGHT-BRACE RIGHT-BRACKET SEMICOLON CAP) ; REDUCE(113) op
              (setq input (cons '<OBJECT> (apply #'(LAMBDA (A) (CONS (QUOTE VAR) A)) (reduce 1)))))
            (return (list 'SYNTAX-ERROR (caar stack) '(COMMA STRING NUMBER TRUE FALSE URI PREF URI-TAIL A UNDERSCORE VAR LEFT-PAR LEFT-BRACKET RIGHT-PAR VALUES GRAPH FILTER OPTIONAL BIND LEFT-BRACE DOT RIGHT-BRACE RIGHT-BRACKET SEMICOLON CAP) input))))
         (<RDF-TERM>-112.1
           (selectq (car input)
            ((COMMA STRING NUMBER TRUE FALSE URI PREF URI-TAIL A UNDERSCORE VAR LEFT-PAR LEFT-BRACKET RIGHT-PAR VALUES GRAPH FILTER OPTIONAL BIND LEFT-BRACE DOT RIGHT-BRACE RIGHT-BRACKET SEMICOLON CAP) ; REDUCE(112) op
              (setq input (cons '<OBJECT> (nth 0 (reduce 1)))))
            (return (list 'SYNTAX-ERROR (caar stack) '(COMMA STRING NUMBER TRUE FALSE URI PREF URI-TAIL A UNDERSCORE VAR LEFT-PAR LEFT-BRACKET RIGHT-PAR VALUES GRAPH FILTER OPTIONAL BIND LEFT-BRACE DOT RIGHT-BRACE RIGHT-BRACKET SEMICOLON CAP) input))))
         (RIGHT-BRACE-60.1
           (selectq (car input)
            ((FOR RIGHT-BRACE UNION WHERE INSERT STRING NUMBER TRUE FALSE URI PREF URI-TAIL A UNDERSCORE VAR LEFT-BRACKET LEFT-PAR VALUES GRAPH FILTER OPTIONAL BIND LEFT-BRACE DOT TRIPLES FROM USING LIMIT OFFSET ORDER HAVING GROUP -! SEMICOLON) ; REDUCE(60) op
              (setq input (cons '<BLOCK> (apply #'(LAMBDA (A B C) (MAKE-BLOCK :CONDS B)) (reduce 3)))))
            (return (list 'SYNTAX-ERROR (caar stack) '(FOR RIGHT-BRACE UNION WHERE INSERT STRING NUMBER TRUE FALSE URI PREF URI-TAIL A UNDERSCORE VAR LEFT-BRACKET LEFT-PAR VALUES GRAPH FILTER OPTIONAL BIND LEFT-BRACE DOT TRIPLES FROM USING LIMIT OFFSET ORDER HAVING GROUP -! SEMICOLON) input))))
         (<BLOCK>-18.1
           (selectq (car input)
            ((FOR RIGHT-BRACE LIMIT OFFSET ORDER HAVING GROUP VALUES LEFT-BRACE WHERE FROM -! SEMICOLON) ; REDUCE(18) op
              (setq input (cons '<QUERY> (apply #'(LAMBDA (A B) (MAKE-SPARQL-STAT :TYPE (QUOTE CONSTRUCT) :WHAT B)) (reduce 2)))))
            (return (list 'SYNTAX-ERROR (caar stack) '(FOR RIGHT-BRACE LIMIT OFFSET ORDER HAVING GROUP VALUES LEFT-BRACE WHERE FROM -! SEMICOLON) input))))
         (<BLOCK>-19.1
           (selectq (car input)
            ((FOR RIGHT-BRACE LIMIT OFFSET ORDER HAVING GROUP VALUES LEFT-BRACE WHERE FROM -! SEMICOLON) ; REDUCE(19) op
              (setq input (cons '<QUERY> (apply #'(LAMBDA (A B) (MAKE-SPARQL-STAT :TYPE (QUOTE ASK) :WHAT B)) (reduce 2)))))
            (return (list 'SYNTAX-ERROR (caar stack) '(FOR RIGHT-BRACE LIMIT OFFSET ORDER HAVING GROUP VALUES LEFT-BRACE WHERE FROM -! SEMICOLON) input))))
         (<BLOCK>-33.1
           (selectq (car input)
            ((WHERE USING -! SEMICOLON) ; REDUCE(33) op
              (setq input (cons '<UPDATE0> (apply #'(LAMBDA (A B C D) (MAKE-SPARQL-UPDATE :DELETE B :INSERT D)) (reduce 4)))))
            (return (list 'SYNTAX-ERROR (caar stack) '(WHERE USING -! SEMICOLON) input))))
         (<BLOCK>-32.1
           (selectq (car input)
            ((WHERE USING -! SEMICOLON) ; REDUCE(32) op
              (setq input (cons '<UPDATE0> (apply #'(LAMBDA (A B) (MAKE-SPARQL-UPDATE :INSERT B)) (reduce 2)))))
            (return (list 'SYNTAX-ERROR (caar stack) '(WHERE USING -! SEMICOLON) input))))
         (<UPDATE0>-34.1
           (selectq (car input)
            ((WHERE USING -! SEMICOLON) ; REDUCE(34) op
              (setq input (cons '<UPDATE> (apply #'(LAMBDA (A B C) (PUSH B (SPARQL-UPDATE-WITH C)) C) (reduce 3)))))
            (return (list 'SYNTAX-ERROR (caar stack) '(WHERE USING -! SEMICOLON) input))))
         (<UPDATE0>-35.1
           (selectq (car input)
            ((WHERE USING -! SEMICOLON) ; REDUCE(35) op
              (setq input (cons '<UPDATE> (nth 0 (reduce 1)))))
            (return (list 'SYNTAX-ERROR (caar stack) '(WHERE USING -! SEMICOLON) input))))
         (<BLOCK>-38.1
           (selectq (car input)
            ((WHERE USING -! SEMICOLON) ; REDUCE(38) op
              (setq input (cons '<UPDATE> (apply #'(LAMBDA (A B C) (SETF (SPARQL-UPDATE-WHERE A) C) A) (reduce 3)))))
            (return (list 'SYNTAX-ERROR (caar stack) '(WHERE USING -! SEMICOLON) input))))
         (<RESOURCE>-37.1
           (selectq (car input)
            ((WHERE USING -! SEMICOLON) ; REDUCE(37) op
              (setq input (cons '<UPDATE> (apply #'(LAMBDA (A B C D) (PUSH D (SPARQL-UPDATE-USING A)) A) (reduce 4)))))
            (return (list 'SYNTAX-ERROR (caar stack) '(WHERE USING -! SEMICOLON) input))))
         (<RESOURCE>-36.1
           (selectq (car input)
            ((WHERE USING -! SEMICOLON) ; REDUCE(36) op
              (setq input (cons '<UPDATE> (apply #'(LAMBDA (A B C) (PUSH C (SPARQL-UPDATE-USING A)) A) (reduce 3)))))
            (return (list 'SYNTAX-ERROR (caar stack) '(WHERE USING -! SEMICOLON) input))))
         (<BLOCK>-41.1
           (selectq (car input)
            ((-! SEMICOLON) ; REDUCE(41) op
              (setq input (cons '<STREAMED-UPDATE> (apply #'(LAMBDA (A B C) A) (reduce 3)))))
            (return (list 'SYNTAX-ERROR (caar stack) '(-! SEMICOLON) input))))
         (<BLOCK>-44.1
           (selectq (car input)
            ((TRIPLES FROM UNION -! SEMICOLON) ; REDUCE(44) op
              (setq input (cons '<ARCHIVE0> (apply #'(LAMBDA (A B C D E) (PUSH (CONS C E) (SPARQL-ARCHIVE-TRIPLES A)) A) (reduce 5)))))
            (return (list 'SYNTAX-ERROR (caar stack) '(TRIPLES FROM UNION -! SEMICOLON) input))))
         (URI-43.1
           (selectq (car input)
            ((TRIPLES FROM UNION -! SEMICOLON) ; REDUCE(43) op
              (setq input (cons '<ARCHIVE0> (apply #'(LAMBDA (A B C) (PUSH C (SPARQL-ARCHIVE-FROM A)) A) (reduce 3)))))
            (return (list 'SYNTAX-ERROR (caar stack) '(TRIPLES FROM UNION -! SEMICOLON) input))))
         (<BLOCK>-47.1
           (selectq (car input)
            ((UNION -! SEMICOLON) ; REDUCE(47) op
              (setq input (cons '<ARCHIVE> (apply #'(LAMBDA (A B C D E F) (PUSH (CONS D F) (SPARQL-ARCHIVE-TRIPLES A)) A) (reduce 6)))))
            (return (list 'SYNTAX-ERROR (caar stack) '(UNION -! SEMICOLON) input))))
         (STRING-42.1
           (selectq (car input)
            ((TRIPLES FROM UNION -! SEMICOLON) ; REDUCE(42) op
              (setq input (cons '<ARCHIVE0> (apply #'(LAMBDA (A B C D E) (MAKE-SPARQL-ARCHIVE :AS (CONS C E))) (reduce 5)))))
            (return (list 'SYNTAX-ERROR (caar stack) '(TRIPLES FROM UNION -! SEMICOLON) input))))
         (NUMBER-203.1
           (selectq (car input)
            ((FOR -! SEMICOLON) ; REDUCE(203) op
              (setq input (cons '<DECL-BODY> (apply #'(LAMBDA (A B C D E) (APPEND A (LIST (CONS C E)))) (reduce 5)))))
            (return (list 'SYNTAX-ERROR (caar stack) '(FOR -! SEMICOLON) input))))
         (STRING-201.1
           (selectq (car input)
            ((FOR COST -! SEMICOLON) ; REDUCE(201) op
              (setq input (cons '<FOREIGN-DECL-BODY> (apply #'(LAMBDA (A B) (LIST "lisp" B)) (reduce 2)))))
            (return (list 'SYNTAX-ERROR (caar stack) '(FOR COST -! SEMICOLON) input))))
         (STRING-200.1
           (selectq (car input)
            ((FOR COST -! SEMICOLON) ; REDUCE(200) op
              (setq input (cons '<FOREIGN-DECL-BODY> (apply #'(LAMBDA (A B) (LIST A B)) (reduce 2)))))
            (return (list 'SYNTAX-ERROR (caar stack) '(FOR COST -! SEMICOLON) input))))
         (<DECL-BODY>-198.1
           (selectq (car input)
            ((-! SEMICOLON) ; REDUCE(198) op
              (setq input (cons '<DEFINE> (apply #'(LAMBDA (A B C D E F G H) (MAKE-DEFINE-STAT :NAME C :AGG T :VARS (LIST E) :DEFS (LIST (CONS NIL H)))) (reduce 8)))))
            (return (list 'SYNTAX-ERROR (caar stack) '(-! SEMICOLON) input))))
         (<DECL-BODY>-205.1
           (selectq (car input)
            ((-! SEMICOLON) ; REDUCE(205) op
              (setq input (cons '<DECL-BODY-OR-MULTI> (apply #'(LAMBDA (A) (LIST (CONS NIL A))) (reduce 1)))))
            (return (list 'SYNTAX-ERROR (caar stack) '(-! SEMICOLON) input))))
         (<DECL-BODY>-208.1
           (selectq (car input)
            ((FOR -! SEMICOLON) ; REDUCE(208) op
              (setq input (cons '<DECL-MULTIBODY> (apply #'(LAMBDA (A B C D) (CONS (CONS C D) A)) (reduce 4)))))
            (return (list 'SYNTAX-ERROR (caar stack) '(FOR -! SEMICOLON) input))))
         (<DECL-BODY>-207.1
           (selectq (car input)
            ((FOR -! SEMICOLON) ; REDUCE(207) op
              (setq input (cons '<DECL-MULTIBODY> (apply #'(LAMBDA (A B C) (LIST (CONS B C))) (reduce 3)))))
            (return (list 'SYNTAX-ERROR (caar stack) '(FOR -! SEMICOLON) input))))
         (<DECL-BODY-OR-MULTI>-197.1
           (selectq (car input)
            ((-! SEMICOLON) ; REDUCE(197) op
              (setq input (cons '<DEFINE> (apply #'(LAMBDA (A B C D E F G H) (MAKE-DEFINE-STAT :NAME C :AGG NIL :VARS E :DEFS H)) (reduce 8)))))
            (return (list 'SYNTAX-ERROR (caar stack) '(-! SEMICOLON) input))))
         (URI-13.1
           (selectq (car input)
            ((DEFINE ARCHIVE WITH INSERT DELETE SELECT CONSTRUCT ASK PREFIX -! SEMICOLON) ; REDUCE(13) op
              (setq input (cons '<PREFIX> (apply #'(LAMBDA (A B C) (CAR (PUSH (CONS "" C) (SPARQL-DATA-PREFIXES DATA)))) (reduce 3)))))
            (return (list 'SYNTAX-ERROR (caar stack) '(DEFINE ARCHIVE WITH INSERT DELETE SELECT CONSTRUCT ASK PREFIX -! SEMICOLON) input))))
         (URI-12.1
           (selectq (car input)
            ((DEFINE ARCHIVE WITH INSERT DELETE SELECT CONSTRUCT ASK PREFIX -! SEMICOLON) ; REDUCE(12) op
              (setq input (cons '<PREFIX> (apply #'(LAMBDA (A B C D) (CAR (PUSH (CONS B D) (SPARQL-DATA-PREFIXES DATA)))) (reduce 4)))))
            (return (list 'SYNTAX-ERROR (caar stack) '(DEFINE ARCHIVE WITH INSERT DELETE SELECT CONSTRUCT ASK PREFIX -! SEMICOLON) input))))
         (<DEFINE>-10.1
           (selectq (car input)
            ((-! SEMICOLON) ; REDUCE(10) op
              (setq input (cons '<PREFIXED-STAT> (apply #'(LAMBDA (A) (LIST NIL A)) (reduce 1)))))
            (return (list 'SYNTAX-ERROR (caar stack) '(-! SEMICOLON) input))))
         (<STREAMED-UPDATE>-8.1
           (selectq (car input)
            ((-! SEMICOLON) ; REDUCE(8) op
              (setq input (cons '<PREFIXED-STAT> (apply #'(LAMBDA (A) (LIST NIL A)) (reduce 1)))))
            (return (list 'SYNTAX-ERROR (caar stack) '(-! SEMICOLON) input))))
         (<TL-STAT>-0.0
           (selectq (car input)
            ((-! SEMICOLON) (return (cdar stack))) ; ACCEPT op
            (return (list 'SYNTAX-ERROR (caar stack) '(-! SEMICOLON) input))))
         (^
           (selectq (car input)
            (<TL-STAT> (shift '<TL-STAT>-0.0)) ; REDUCE completion
            (<STREAMED-UPDATE> (shift '<STREAMED-UPDATE>-8.1)) ; REDUCE completion
            (<DEFINE> (shift '<DEFINE>-10.1)) ; REDUCE completion
            (<ARCHIVE> (shift '<ARCHIVE>-9.1-47.6-48.4)) ; REDUCE completion
            (<ARCHIVE0> (shift '<ARCHIVE0>-43.3-44.5-45.3-46.1)) ; REDUCE completion
            (<STREAMED-OP> (shift '<STREAMED-OP>-41.3)) ; REDUCE completion
            (<UPDATE> (shift '<UPDATE>-7.1-36.3-37.4-38.3)) ; REDUCE completion
            (<UPDATE0> (shift '<UPDATE0>-35.1)) ; REDUCE completion
            (<QUERY> (shift '<QUERY>-6.1-20.3-21.4-22.3-23.2-24.2-25.4-26.3-27.4-28.3-29.3)) ; REDUCE completion
            (<PREFIXED-STAT> (shift '<PREFIXED-STAT>-5.1)) ; REDUCE completion
            (<PREFIX> (shift '<PREFIX>-4.1-11.2)) ; REDUCE completion
            (<SIMPLE-FNCALL> (shift '<SIMPLE-FNCALL>-1.1)) ; REDUCE completion
            (QUIT (shift 'QUIT-2.1)) ; SHIFT op
            (LISP (shift 'LISP-3.1)) ; SHIFT op
            (SELECT (shift 'SELECT-14.2-15.3-16.2-17.3)) ; SHIFT op
            (CONSTRUCT (shift 'CONSTRUCT-18.2)) ; SHIFT op
            (ASK (shift 'ASK-19.2)) ; SHIFT op
            (WITH (shift 'WITH-34.3)) ; SHIFT op
            (DELETE (shift 'DELETE-30.1-31.2-33.4-40.1)) ; SHIFT op
            (INSERT (shift 'INSERT-32.2-39.1)) ; SHIFT op
            (ARCHIVE (shift 'ARCHIVE-42.5)) ; SHIFT op
            (DEFINE (shift 'DEFINE-197.8-198.8-199.8)) ; SHIFT op
            (PREFIX (shift 'PREFIX-12.4-13.3)) ; SHIFT op
            (ID (shift 'ID-173.2)) ; SHIFT op
            ((-! SEMICOLON) (return nil)) ; ACCEPT EMPTY INPUT
            (return (list 'SYNTAX-ERROR (caar stack) '(QUIT LISP SELECT CONSTRUCT ASK WITH DELETE INSERT ARCHIVE DEFINE PREFIX ID) input))))
         (<PREFIX>-4.1-11.2
           (selectq (car input)
            (<PREFIXED-STAT> (shift '<PREFIXED-STAT>-11.1)) ; REDUCE completion
            (<UPDATE0> (shift '<UPDATE0>-35.1)) ; REDUCE completion
            (<STREAMED-OP> (shift '<STREAMED-OP>-41.3)) ; REDUCE completion
            (<ARCHIVE0> (shift '<ARCHIVE0>-43.3-44.5-45.3-46.1)) ; REDUCE completion
            (<PREFIX> (shift '<PREFIX>-11.2)) ; REDUCE completion
            (<DEFINE> (shift '<DEFINE>-10.1)) ; REDUCE completion
            (<ARCHIVE> (shift '<ARCHIVE>-9.1-47.6-48.4)) ; REDUCE completion
            (<STREAMED-UPDATE> (shift '<STREAMED-UPDATE>-8.1)) ; REDUCE completion
            (<UPDATE> (shift '<UPDATE>-7.1-36.3-37.4-38.3)) ; REDUCE completion
            (<QUERY> (shift '<QUERY>-6.1-20.3-21.4-22.3-23.2-24.2-25.4-26.3-27.4-28.3-29.3)) ; REDUCE completion
            ((-! SEMICOLON) ; REDUCE(4) op
              (setq input (cons '<TL-STAT> (apply #'(LAMBDA (A) (LIST NIL (CONS (QUOTE PREFIX) A))) (reduce 1)))))
            (PREFIX (shift 'PREFIX-12.4-13.3)) ; SHIFT op
            (DEFINE (shift 'DEFINE-197.8-198.8-199.8)) ; SHIFT op
            (ARCHIVE (shift 'ARCHIVE-42.5)) ; SHIFT op
            (INSERT (shift 'INSERT-32.2-39.1)) ; SHIFT op
            (DELETE (shift 'DELETE-30.1-31.2-33.4-40.1)) ; SHIFT op
            (WITH (shift 'WITH-34.3)) ; SHIFT op
            (ASK (shift 'ASK-19.2)) ; SHIFT op
            (CONSTRUCT (shift 'CONSTRUCT-18.2)) ; SHIFT op
            (SELECT (shift 'SELECT-14.2-15.3-16.2-17.3)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(-! SEMICOLON PREFIX DEFINE ARCHIVE INSERT DELETE WITH ASK CONSTRUCT SELECT) input))))
         (<PREFIX>-11.2
           (selectq (car input)
            (<PREFIXED-STAT> (shift '<PREFIXED-STAT>-11.1)) ; REDUCE completion
            (<UPDATE0> (shift '<UPDATE0>-35.1)) ; REDUCE completion
            (<STREAMED-OP> (shift '<STREAMED-OP>-41.3)) ; REDUCE completion
            (<ARCHIVE0> (shift '<ARCHIVE0>-43.3-44.5-45.3-46.1)) ; REDUCE completion
            (<PREFIX> (shift '<PREFIX>-11.2)) ; REDUCE completion
            (<DEFINE> (shift '<DEFINE>-10.1)) ; REDUCE completion
            (<ARCHIVE> (shift '<ARCHIVE>-9.1-47.6-48.4)) ; REDUCE completion
            (<STREAMED-UPDATE> (shift '<STREAMED-UPDATE>-8.1)) ; REDUCE completion
            (<UPDATE> (shift '<UPDATE>-7.1-36.3-37.4-38.3)) ; REDUCE completion
            (<QUERY> (shift '<QUERY>-6.1-20.3-21.4-22.3-23.2-24.2-25.4-26.3-27.4-28.3-29.3)) ; REDUCE completion
            (PREFIX (shift 'PREFIX-12.4-13.3)) ; SHIFT op
            (DEFINE (shift 'DEFINE-197.8-198.8-199.8)) ; SHIFT op
            (ARCHIVE (shift 'ARCHIVE-42.5)) ; SHIFT op
            (INSERT (shift 'INSERT-32.2-39.1)) ; SHIFT op
            (DELETE (shift 'DELETE-30.1-31.2-33.4-40.1)) ; SHIFT op
            (WITH (shift 'WITH-34.3)) ; SHIFT op
            (ASK (shift 'ASK-19.2)) ; SHIFT op
            (CONSTRUCT (shift 'CONSTRUCT-18.2)) ; SHIFT op
            (SELECT (shift 'SELECT-14.2-15.3-16.2-17.3)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(PREFIX DEFINE ARCHIVE INSERT DELETE WITH ASK CONSTRUCT SELECT) input))))
         (SELECT-14.2-15.3-16.2-17.3
           (selectq (car input)
            (<SEL-LIST> (shift '<SEL-LIST>-14.1)) ; REDUCE completion
            (<NAMED-EXPR> (shift '<NAMED-EXPR>-56.1)) ; REDUCE completion
            (<NAMED-EXPR-OR-VAR> (shift '<NAMED-EXPR-OR-VAR>-53.1-54.2)) ; REDUCE completion
            (DISTINCT (shift 'DISTINCT-15.2-17.2)) ; SHIFT op
            (TIMES (shift 'TIMES-16.1)) ; SHIFT op
            (LEFT-PAR (shift 'LEFT-PAR-57.5)) ; SHIFT op
            (VAR (shift 'VAR-55.1)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(DISTINCT TIMES LEFT-PAR VAR) input))))
         (DISTINCT-15.2-17.2
           (selectq (car input)
            (<SEL-LIST> (shift '<SEL-LIST>-15.1)) ; REDUCE completion
            (<NAMED-EXPR> (shift '<NAMED-EXPR>-56.1)) ; REDUCE completion
            (<NAMED-EXPR-OR-VAR> (shift '<NAMED-EXPR-OR-VAR>-53.1-54.2)) ; REDUCE completion
            (TIMES (shift 'TIMES-17.1)) ; SHIFT op
            (LEFT-PAR (shift 'LEFT-PAR-57.5)) ; SHIFT op
            (VAR (shift 'VAR-55.1)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(TIMES LEFT-PAR VAR) input))))
         (<NAMED-EXPR-OR-VAR>-53.1-54.2
           (selectq (car input)
            (<SEL-LIST> (shift '<SEL-LIST>-54.1)) ; REDUCE completion
            (<NAMED-EXPR> (shift '<NAMED-EXPR>-56.1)) ; REDUCE completion
            (<NAMED-EXPR-OR-VAR> (shift '<NAMED-EXPR-OR-VAR>-53.1-54.2)) ; REDUCE completion
            ((FOR RIGHT-BRACE LIMIT OFFSET ORDER HAVING GROUP VALUES LEFT-BRACE WHERE FROM -! SEMICOLON) ; REDUCE(53) op
              (setq input (cons '<SEL-LIST> (apply #'(LAMBDA (A) (LIST A)) (reduce 1)))))
            (LEFT-PAR (shift 'LEFT-PAR-57.5)) ; SHIFT op
            (VAR (shift 'VAR-55.1)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(FOR RIGHT-BRACE LIMIT OFFSET ORDER HAVING GROUP VALUES LEFT-BRACE WHERE FROM -! SEMICOLON LEFT-PAR VAR) input))))
         (LEFT-PAR-57.5
           (selectq (car input)
            (<REL-EXPR> (shift '<REL-EXPR>-133.1)) ; REDUCE completion
            (<NUM-EXPR> (shift '<NUM-EXPR>-150.1)) ; REDUCE completion
            (<RDF-TERM> (shift '<RDF-TERM>-151.1)) ; REDUCE completion
            (<RESOURCE> (shift '<RESOURCE>-115.1)) ; REDUCE completion
            (<UNARY-EXPR> (shift '<UNARY-EXPR>-158.3-159.3-160.3-161.3-162.3-163.1)) ; REDUCE completion
            (<LITERAL> (shift '<LITERAL>-168.1)) ; REDUCE completion
            (<SIMPLE-FNCALL> (shift '<SIMPLE-FNCALL>-174.1)) ; REDUCE completion
            (<VAR-OR-FNCALL> (shift '<VAR-OR-FNCALL>-170.1-178.4)) ; REDUCE completion
            (<FNCALL> (shift '<FNCALL>-172.1)) ; REDUCE completion
            (<STRING-LANG> (shift '<STRING-LANG>-124.1-125.3)) ; REDUCE completion
            (<PRIM-EXPR> (shift '<PRIM-EXPR>-164.1)) ; REDUCE completion
            (<MULT-EXPR> (shift '<MULT-EXPR>-152.3-153.3-154.3-155.3-156.3-157.1)) ; REDUCE completion
            (<NUM-EXPR-OR-URI> (shift '<NUM-EXPR-OR-URI>-134.1-135.3-136.3-137.4)) ; REDUCE completion
            (<CONJUNCTION> (shift '<CONJUNCTION>-129.1-132.3)) ; REDUCE completion
            (<EXPR> (shift '<EXPR>-57.4-128.3)) ; REDUCE completion
            (ID (shift 'ID-130.1-173.2)) ; SHIFT op
            (TIMES (shift 'TIMES-131.1)) ; SHIFT op
            (MINUS (shift 'MINUS-165.2)) ; SHIFT op
            (PLUS (shift 'PLUS-166.2)) ; SHIFT op
            (NUMBER (shift 'NUMBER-121.1)) ; SHIFT op
            (TRUE (shift 'TRUE-122.1)) ; SHIFT op
            (FALSE (shift 'FALSE-123.1)) ; SHIFT op
            (VAR (shift 'VAR-171.1)) ; SHIFT op
            (URI-TAIL-CAST (shift 'URI-TAIL-CAST-177.3)) ; SHIFT op
            (PREF (shift 'PREF-118.2-176.4)) ; SHIFT op
            (URI-CAST (shift 'URI-CAST-175.3)) ; SHIFT op
            (NOT (shift 'NOT-169.2)) ; SHIFT op
            (LEFT-PAR (shift 'LEFT-PAR-167.3)) ; SHIFT op
            (UNDERSCORE (shift 'UNDERSCORE-114.2)) ; SHIFT op
            (STRING (shift 'STRING-126.1-127.2)) ; SHIFT op
            (A (shift 'A-120.1)) ; SHIFT op
            (URI-TAIL (shift 'URI-TAIL-119.1)) ; SHIFT op
            (URI (shift 'URI-117.1)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(ID TIMES MINUS PLUS NUMBER TRUE FALSE VAR URI-TAIL-CAST PREF URI-CAST NOT LEFT-PAR UNDERSCORE STRING A URI-TAIL URI) input))))
         (<EXPR>-57.4-128.3
           (selectq (car input)
            (OR (shift 'OR-128.2)) ; SHIFT op
            (AS (shift 'AS-57.3)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(OR AS) input))))
         (OR-128.2
           (selectq (car input)
            (<NUM-EXPR-OR-URI> (shift '<NUM-EXPR-OR-URI>-134.1-135.3-136.3-137.4)) ; REDUCE completion
            (<MULT-EXPR> (shift '<MULT-EXPR>-152.3-153.3-154.3-155.3-156.3-157.1)) ; REDUCE completion
            (<PRIM-EXPR> (shift '<PRIM-EXPR>-164.1)) ; REDUCE completion
            (<STRING-LANG> (shift '<STRING-LANG>-124.1-125.3)) ; REDUCE completion
            (<FNCALL> (shift '<FNCALL>-172.1)) ; REDUCE completion
            (<SIMPLE-FNCALL> (shift '<SIMPLE-FNCALL>-174.1)) ; REDUCE completion
            (<VAR-OR-FNCALL> (shift '<VAR-OR-FNCALL>-170.1-178.4)) ; REDUCE completion
            (<LITERAL> (shift '<LITERAL>-168.1)) ; REDUCE completion
            (<UNARY-EXPR> (shift '<UNARY-EXPR>-158.3-159.3-160.3-161.3-162.3-163.1)) ; REDUCE completion
            (<RESOURCE> (shift '<RESOURCE>-115.1)) ; REDUCE completion
            (<RDF-TERM> (shift '<RDF-TERM>-151.1)) ; REDUCE completion
            (<NUM-EXPR> (shift '<NUM-EXPR>-150.1)) ; REDUCE completion
            (<REL-EXPR> (shift '<REL-EXPR>-133.1)) ; REDUCE completion
            (<CONJUNCTION> (shift '<CONJUNCTION>-128.1-132.3)) ; REDUCE completion
            (UNDERSCORE (shift 'UNDERSCORE-114.2)) ; SHIFT op
            (LEFT-PAR (shift 'LEFT-PAR-167.3)) ; SHIFT op
            (NOT (shift 'NOT-169.2)) ; SHIFT op
            (URI-CAST (shift 'URI-CAST-175.3)) ; SHIFT op
            (PREF (shift 'PREF-118.2-176.4)) ; SHIFT op
            (URI-TAIL-CAST (shift 'URI-TAIL-CAST-177.3)) ; SHIFT op
            (ID (shift 'ID-173.2)) ; SHIFT op
            (VAR (shift 'VAR-171.1)) ; SHIFT op
            (FALSE (shift 'FALSE-123.1)) ; SHIFT op
            (TRUE (shift 'TRUE-122.1)) ; SHIFT op
            (NUMBER (shift 'NUMBER-121.1)) ; SHIFT op
            (PLUS (shift 'PLUS-166.2)) ; SHIFT op
            (MINUS (shift 'MINUS-165.2)) ; SHIFT op
            (STRING (shift 'STRING-126.1-127.2)) ; SHIFT op
            (A (shift 'A-120.1)) ; SHIFT op
            (URI-TAIL (shift 'URI-TAIL-119.1)) ; SHIFT op
            (URI (shift 'URI-117.1)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(UNDERSCORE LEFT-PAR NOT URI-CAST PREF URI-TAIL-CAST ID VAR FALSE TRUE NUMBER PLUS MINUS STRING A URI-TAIL URI) input))))
         (<CONJUNCTION>-128.1-132.3
           (selectq (car input)
            ((FOR COMMA OR RIGHT-PAR AS RIGHT-BRACE LIMIT OFFSET ORDER HAVING GROUP VALUES LEFT-BRACE WHERE FROM -! SEMICOLON) ; REDUCE(128) op
              (setq input (cons '<EXPR> (apply #'(LAMBDA (A B C) (LIST (QUOTE OR) A C)) (reduce 3)))))
            (AND (shift 'AND-132.2)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(FOR COMMA OR RIGHT-PAR AS RIGHT-BRACE LIMIT OFFSET ORDER HAVING GROUP VALUES LEFT-BRACE WHERE FROM -! SEMICOLON AND) input))))
         (AND-132.2
           (selectq (car input)
            (<REL-EXPR> (shift '<REL-EXPR>-132.1)) ; REDUCE completion
            (<NUM-EXPR> (shift '<NUM-EXPR>-150.1)) ; REDUCE completion
            (<RDF-TERM> (shift '<RDF-TERM>-151.1)) ; REDUCE completion
            (<RESOURCE> (shift '<RESOURCE>-115.1)) ; REDUCE completion
            (<UNARY-EXPR> (shift '<UNARY-EXPR>-158.3-159.3-160.3-161.3-162.3-163.1)) ; REDUCE completion
            (<LITERAL> (shift '<LITERAL>-168.1)) ; REDUCE completion
            (<SIMPLE-FNCALL> (shift '<SIMPLE-FNCALL>-174.1)) ; REDUCE completion
            (<VAR-OR-FNCALL> (shift '<VAR-OR-FNCALL>-170.1-178.4)) ; REDUCE completion
            (<FNCALL> (shift '<FNCALL>-172.1)) ; REDUCE completion
            (<STRING-LANG> (shift '<STRING-LANG>-124.1-125.3)) ; REDUCE completion
            (<PRIM-EXPR> (shift '<PRIM-EXPR>-164.1)) ; REDUCE completion
            (<MULT-EXPR> (shift '<MULT-EXPR>-152.3-153.3-154.3-155.3-156.3-157.1)) ; REDUCE completion
            (<NUM-EXPR-OR-URI> (shift '<NUM-EXPR-OR-URI>-134.1-135.3-136.3-137.4)) ; REDUCE completion
            (MINUS (shift 'MINUS-165.2)) ; SHIFT op
            (PLUS (shift 'PLUS-166.2)) ; SHIFT op
            (NUMBER (shift 'NUMBER-121.1)) ; SHIFT op
            (TRUE (shift 'TRUE-122.1)) ; SHIFT op
            (FALSE (shift 'FALSE-123.1)) ; SHIFT op
            (VAR (shift 'VAR-171.1)) ; SHIFT op
            (ID (shift 'ID-173.2)) ; SHIFT op
            (URI-TAIL-CAST (shift 'URI-TAIL-CAST-177.3)) ; SHIFT op
            (PREF (shift 'PREF-118.2-176.4)) ; SHIFT op
            (URI-CAST (shift 'URI-CAST-175.3)) ; SHIFT op
            (NOT (shift 'NOT-169.2)) ; SHIFT op
            (LEFT-PAR (shift 'LEFT-PAR-167.3)) ; SHIFT op
            (UNDERSCORE (shift 'UNDERSCORE-114.2)) ; SHIFT op
            (STRING (shift 'STRING-126.1-127.2)) ; SHIFT op
            (A (shift 'A-120.1)) ; SHIFT op
            (URI-TAIL (shift 'URI-TAIL-119.1)) ; SHIFT op
            (URI (shift 'URI-117.1)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(MINUS PLUS NUMBER TRUE FALSE VAR ID URI-TAIL-CAST PREF URI-CAST NOT LEFT-PAR UNDERSCORE STRING A URI-TAIL URI) input))))
         (AS-57.3
           (selectq (car input)
            (VAR (shift 'VAR-57.2)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(VAR) input))))
         (VAR-57.2
           (selectq (car input)
            (RIGHT-PAR (shift 'RIGHT-PAR-57.1)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(RIGHT-PAR) input))))
         (<CONJUNCTION>-129.1-132.3
           (selectq (car input)
            ((FOR COMMA OR RIGHT-PAR AS RIGHT-BRACE LIMIT OFFSET ORDER HAVING GROUP VALUES LEFT-BRACE WHERE FROM -! SEMICOLON) ; REDUCE(129) op
              (setq input (cons '<EXPR> (nth 0 (reduce 1)))))
            (AND (shift 'AND-132.2)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(FOR COMMA OR RIGHT-PAR AS RIGHT-BRACE LIMIT OFFSET ORDER HAVING GROUP VALUES LEFT-BRACE WHERE FROM -! SEMICOLON AND) input))))
         (ID-130.1-173.2
           (selectq (car input)
            (<EXPR-LIST-PAR> (shift '<EXPR-LIST-PAR>-173.1)) ; REDUCE completion
            ((FOR COMMA OR RIGHT-PAR AS RIGHT-BRACE LIMIT OFFSET ORDER HAVING GROUP VALUES LEFT-BRACE WHERE FROM -! SEMICOLON) ; REDUCE(130) op
              (setq input (cons '<EXPR> (apply #'(LAMBDA (A) (CONS (CONS (QUOTE ID) A) (QUOTE ((ASTERISK))))) (reduce 1)))))
            (LEFT-PAR (shift 'LEFT-PAR-181.3-182.4-183.2)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(FOR COMMA OR RIGHT-PAR AS RIGHT-BRACE LIMIT OFFSET ORDER HAVING GROUP VALUES LEFT-BRACE WHERE FROM -! SEMICOLON LEFT-PAR) input))))
         (LEFT-PAR-181.3-182.4-183.2
           (selectq (car input)
            (<EXPR-LIST> (shift '<EXPR-LIST>-181.2)) ; REDUCE completion
            (<REL-EXPR> (shift '<REL-EXPR>-133.1)) ; REDUCE completion
            (<NUM-EXPR> (shift '<NUM-EXPR>-150.1)) ; REDUCE completion
            (<RDF-TERM> (shift '<RDF-TERM>-151.1)) ; REDUCE completion
            (<RESOURCE> (shift '<RESOURCE>-115.1)) ; REDUCE completion
            (<UNARY-EXPR> (shift '<UNARY-EXPR>-158.3-159.3-160.3-161.3-162.3-163.1)) ; REDUCE completion
            (<LITERAL> (shift '<LITERAL>-168.1)) ; REDUCE completion
            (<SIMPLE-FNCALL> (shift '<SIMPLE-FNCALL>-174.1)) ; REDUCE completion
            (<VAR-OR-FNCALL> (shift '<VAR-OR-FNCALL>-170.1-178.4)) ; REDUCE completion
            (<FNCALL> (shift '<FNCALL>-172.1)) ; REDUCE completion
            (<STRING-LANG> (shift '<STRING-LANG>-124.1-125.3)) ; REDUCE completion
            (<PRIM-EXPR> (shift '<PRIM-EXPR>-164.1)) ; REDUCE completion
            (<MULT-EXPR> (shift '<MULT-EXPR>-152.3-153.3-154.3-155.3-156.3-157.1)) ; REDUCE completion
            (<NUM-EXPR-OR-URI> (shift '<NUM-EXPR-OR-URI>-134.1-135.3-136.3-137.4)) ; REDUCE completion
            (<CONJUNCTION> (shift '<CONJUNCTION>-129.1-132.3)) ; REDUCE completion
            (<EXPR> (shift '<EXPR>-128.3-179.1-180.3)) ; REDUCE completion
            (RIGHT-PAR (shift 'RIGHT-PAR-183.1)) ; SHIFT op
            (DISTINCT (shift 'DISTINCT-182.3)) ; SHIFT op
            (TIMES (shift 'TIMES-131.1)) ; SHIFT op
            (ID (shift 'ID-130.1-173.2)) ; SHIFT op
            (MINUS (shift 'MINUS-165.2)) ; SHIFT op
            (PLUS (shift 'PLUS-166.2)) ; SHIFT op
            (NUMBER (shift 'NUMBER-121.1)) ; SHIFT op
            (TRUE (shift 'TRUE-122.1)) ; SHIFT op
            (FALSE (shift 'FALSE-123.1)) ; SHIFT op
            (VAR (shift 'VAR-171.1)) ; SHIFT op
            (URI-TAIL-CAST (shift 'URI-TAIL-CAST-177.3)) ; SHIFT op
            (PREF (shift 'PREF-118.2-176.4)) ; SHIFT op
            (URI-CAST (shift 'URI-CAST-175.3)) ; SHIFT op
            (NOT (shift 'NOT-169.2)) ; SHIFT op
            (LEFT-PAR (shift 'LEFT-PAR-167.3)) ; SHIFT op
            (UNDERSCORE (shift 'UNDERSCORE-114.2)) ; SHIFT op
            (STRING (shift 'STRING-126.1-127.2)) ; SHIFT op
            (A (shift 'A-120.1)) ; SHIFT op
            (URI-TAIL (shift 'URI-TAIL-119.1)) ; SHIFT op
            (URI (shift 'URI-117.1)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(RIGHT-PAR DISTINCT TIMES ID MINUS PLUS NUMBER TRUE FALSE VAR URI-TAIL-CAST PREF URI-CAST NOT LEFT-PAR UNDERSCORE STRING A URI-TAIL URI) input))))
         (DISTINCT-182.3
           (selectq (car input)
            (<REL-EXPR> (shift '<REL-EXPR>-133.1)) ; REDUCE completion
            (<NUM-EXPR> (shift '<NUM-EXPR>-150.1)) ; REDUCE completion
            (<RDF-TERM> (shift '<RDF-TERM>-151.1)) ; REDUCE completion
            (<RESOURCE> (shift '<RESOURCE>-115.1)) ; REDUCE completion
            (<UNARY-EXPR> (shift '<UNARY-EXPR>-158.3-159.3-160.3-161.3-162.3-163.1)) ; REDUCE completion
            (<LITERAL> (shift '<LITERAL>-168.1)) ; REDUCE completion
            (<SIMPLE-FNCALL> (shift '<SIMPLE-FNCALL>-174.1)) ; REDUCE completion
            (<VAR-OR-FNCALL> (shift '<VAR-OR-FNCALL>-170.1-178.4)) ; REDUCE completion
            (<FNCALL> (shift '<FNCALL>-172.1)) ; REDUCE completion
            (<STRING-LANG> (shift '<STRING-LANG>-124.1-125.3)) ; REDUCE completion
            (<PRIM-EXPR> (shift '<PRIM-EXPR>-164.1)) ; REDUCE completion
            (<MULT-EXPR> (shift '<MULT-EXPR>-152.3-153.3-154.3-155.3-156.3-157.1)) ; REDUCE completion
            (<NUM-EXPR-OR-URI> (shift '<NUM-EXPR-OR-URI>-134.1-135.3-136.3-137.4)) ; REDUCE completion
            (<CONJUNCTION> (shift '<CONJUNCTION>-129.1-132.3)) ; REDUCE completion
            (<EXPR> (shift '<EXPR>-128.3-182.2)) ; REDUCE completion
            (ID (shift 'ID-130.1-173.2)) ; SHIFT op
            (TIMES (shift 'TIMES-131.1)) ; SHIFT op
            (MINUS (shift 'MINUS-165.2)) ; SHIFT op
            (PLUS (shift 'PLUS-166.2)) ; SHIFT op
            (NUMBER (shift 'NUMBER-121.1)) ; SHIFT op
            (TRUE (shift 'TRUE-122.1)) ; SHIFT op
            (FALSE (shift 'FALSE-123.1)) ; SHIFT op
            (VAR (shift 'VAR-171.1)) ; SHIFT op
            (URI-TAIL-CAST (shift 'URI-TAIL-CAST-177.3)) ; SHIFT op
            (PREF (shift 'PREF-118.2-176.4)) ; SHIFT op
            (URI-CAST (shift 'URI-CAST-175.3)) ; SHIFT op
            (NOT (shift 'NOT-169.2)) ; SHIFT op
            (LEFT-PAR (shift 'LEFT-PAR-167.3)) ; SHIFT op
            (UNDERSCORE (shift 'UNDERSCORE-114.2)) ; SHIFT op
            (STRING (shift 'STRING-126.1-127.2)) ; SHIFT op
            (A (shift 'A-120.1)) ; SHIFT op
            (URI-TAIL (shift 'URI-TAIL-119.1)) ; SHIFT op
            (URI (shift 'URI-117.1)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(ID TIMES MINUS PLUS NUMBER TRUE FALSE VAR URI-TAIL-CAST PREF URI-CAST NOT LEFT-PAR UNDERSCORE STRING A URI-TAIL URI) input))))
         (<EXPR>-128.3-182.2
           (selectq (car input)
            (RIGHT-PAR (shift 'RIGHT-PAR-182.1)) ; SHIFT op
            (OR (shift 'OR-128.2)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(RIGHT-PAR OR) input))))
         (<EXPR>-128.3-179.1-180.3
           (selectq (car input)
            ((RIGHT-PAR) ; REDUCE(179) op
              (setq input (cons '<EXPR-LIST> (apply #'(LAMBDA (A) (LIST A)) (reduce 1)))))
            (COMMA (shift 'COMMA-180.2)) ; SHIFT op
            (OR (shift 'OR-128.2)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(RIGHT-PAR COMMA OR) input))))
         (COMMA-180.2
           (selectq (car input)
            (<EXPR-LIST> (shift '<EXPR-LIST>-180.1)) ; REDUCE completion
            (<REL-EXPR> (shift '<REL-EXPR>-133.1)) ; REDUCE completion
            (<NUM-EXPR> (shift '<NUM-EXPR>-150.1)) ; REDUCE completion
            (<RDF-TERM> (shift '<RDF-TERM>-151.1)) ; REDUCE completion
            (<RESOURCE> (shift '<RESOURCE>-115.1)) ; REDUCE completion
            (<UNARY-EXPR> (shift '<UNARY-EXPR>-158.3-159.3-160.3-161.3-162.3-163.1)) ; REDUCE completion
            (<LITERAL> (shift '<LITERAL>-168.1)) ; REDUCE completion
            (<SIMPLE-FNCALL> (shift '<SIMPLE-FNCALL>-174.1)) ; REDUCE completion
            (<VAR-OR-FNCALL> (shift '<VAR-OR-FNCALL>-170.1-178.4)) ; REDUCE completion
            (<FNCALL> (shift '<FNCALL>-172.1)) ; REDUCE completion
            (<STRING-LANG> (shift '<STRING-LANG>-124.1-125.3)) ; REDUCE completion
            (<PRIM-EXPR> (shift '<PRIM-EXPR>-164.1)) ; REDUCE completion
            (<MULT-EXPR> (shift '<MULT-EXPR>-152.3-153.3-154.3-155.3-156.3-157.1)) ; REDUCE completion
            (<NUM-EXPR-OR-URI> (shift '<NUM-EXPR-OR-URI>-134.1-135.3-136.3-137.4)) ; REDUCE completion
            (<CONJUNCTION> (shift '<CONJUNCTION>-129.1-132.3)) ; REDUCE completion
            (<EXPR> (shift '<EXPR>-128.3-179.1-180.3)) ; REDUCE completion
            (TIMES (shift 'TIMES-131.1)) ; SHIFT op
            (ID (shift 'ID-130.1-173.2)) ; SHIFT op
            (MINUS (shift 'MINUS-165.2)) ; SHIFT op
            (PLUS (shift 'PLUS-166.2)) ; SHIFT op
            (NUMBER (shift 'NUMBER-121.1)) ; SHIFT op
            (TRUE (shift 'TRUE-122.1)) ; SHIFT op
            (FALSE (shift 'FALSE-123.1)) ; SHIFT op
            (VAR (shift 'VAR-171.1)) ; SHIFT op
            (URI-TAIL-CAST (shift 'URI-TAIL-CAST-177.3)) ; SHIFT op
            (PREF (shift 'PREF-118.2-176.4)) ; SHIFT op
            (URI-CAST (shift 'URI-CAST-175.3)) ; SHIFT op
            (NOT (shift 'NOT-169.2)) ; SHIFT op
            (LEFT-PAR (shift 'LEFT-PAR-167.3)) ; SHIFT op
            (UNDERSCORE (shift 'UNDERSCORE-114.2)) ; SHIFT op
            (STRING (shift 'STRING-126.1-127.2)) ; SHIFT op
            (A (shift 'A-120.1)) ; SHIFT op
            (URI-TAIL (shift 'URI-TAIL-119.1)) ; SHIFT op
            (URI (shift 'URI-117.1)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(TIMES ID MINUS PLUS NUMBER TRUE FALSE VAR URI-TAIL-CAST PREF URI-CAST NOT LEFT-PAR UNDERSCORE STRING A URI-TAIL URI) input))))
         (<EXPR-LIST>-181.2
           (selectq (car input)
            (RIGHT-PAR (shift 'RIGHT-PAR-181.1)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(RIGHT-PAR) input))))
         (<NUM-EXPR-OR-URI>-134.1-135.3-136.3-137.4
           (selectq (car input)
            (<COMPARE-OP> (shift '<COMPARE-OP>-135.2)) ; REDUCE completion
            ((FOR COMMA OR RIGHT-PAR AS RIGHT-BRACE LIMIT OFFSET ORDER HAVING GROUP VALUES LEFT-BRACE WHERE FROM AND -! SEMICOLON) ; REDUCE(134) op
              (setq input (cons '<REL-EXPR> (nth 0 (reduce 1)))))
            (NOT (shift 'NOT-137.3)) ; SHIFT op
            (IN (shift 'IN-136.2)) ; SHIFT op
            (NOT-EQUAL (shift 'NOT-EQUAL-138.1)) ; SHIFT op
            (EQUAL (shift 'EQUAL-139.1)) ; SHIFT op
            (LESS (shift 'LESS-140.1)) ; SHIFT op
            (GREATER (shift 'GREATER-141.1)) ; SHIFT op
            (LESS-OR-EQUAL (shift 'LESS-OR-EQUAL-142.1)) ; SHIFT op
            (GREATER-OR-EQUAL (shift 'GREATER-OR-EQUAL-143.1)) ; SHIFT op
            (ANOT-EQUAL (shift 'ANOT-EQUAL-144.1)) ; SHIFT op
            (AEQUAL (shift 'AEQUAL-145.1)) ; SHIFT op
            (ALESS (shift 'ALESS-146.1)) ; SHIFT op
            (AGREATER (shift 'AGREATER-147.1)) ; SHIFT op
            (ALESS-OR-EQUAL (shift 'ALESS-OR-EQUAL-148.1)) ; SHIFT op
            (AGREATER-OR-EQUAL (shift 'AGREATER-OR-EQUAL-149.1)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(FOR COMMA OR RIGHT-PAR AS RIGHT-BRACE LIMIT OFFSET ORDER HAVING GROUP VALUES LEFT-BRACE WHERE FROM AND -! SEMICOLON NOT IN NOT-EQUAL EQUAL LESS GREATER LESS-OR-EQUAL GREATER-OR-EQUAL ANOT-EQUAL AEQUAL ALESS AGREATER ALESS-OR-EQUAL AGREATER-OR-EQUAL) input))))
         (NOT-137.3
           (selectq (car input)
            (IN (shift 'IN-137.2)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(IN) input))))
         (IN-137.2
           (selectq (car input)
            (<EXPR-LIST-PAR> (shift '<EXPR-LIST-PAR>-137.1)) ; REDUCE completion
            (LEFT-PAR (shift 'LEFT-PAR-181.3-182.4-183.2)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(LEFT-PAR) input))))
         (IN-136.2
           (selectq (car input)
            (<EXPR-LIST-PAR> (shift '<EXPR-LIST-PAR>-136.1)) ; REDUCE completion
            (LEFT-PAR (shift 'LEFT-PAR-181.3-182.4-183.2)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(LEFT-PAR) input))))
         (<COMPARE-OP>-135.2
           (selectq (car input)
            (<NUM-EXPR-OR-URI> (shift '<NUM-EXPR-OR-URI>-135.1)) ; REDUCE completion
            (<MULT-EXPR> (shift '<MULT-EXPR>-152.3-153.3-154.3-155.3-156.3-157.1)) ; REDUCE completion
            (<PRIM-EXPR> (shift '<PRIM-EXPR>-164.1)) ; REDUCE completion
            (<STRING-LANG> (shift '<STRING-LANG>-124.1-125.3)) ; REDUCE completion
            (<FNCALL> (shift '<FNCALL>-172.1)) ; REDUCE completion
            (<SIMPLE-FNCALL> (shift '<SIMPLE-FNCALL>-174.1)) ; REDUCE completion
            (<VAR-OR-FNCALL> (shift '<VAR-OR-FNCALL>-170.1-178.4)) ; REDUCE completion
            (<LITERAL> (shift '<LITERAL>-168.1)) ; REDUCE completion
            (<UNARY-EXPR> (shift '<UNARY-EXPR>-158.3-159.3-160.3-161.3-162.3-163.1)) ; REDUCE completion
            (<RESOURCE> (shift '<RESOURCE>-115.1)) ; REDUCE completion
            (<RDF-TERM> (shift '<RDF-TERM>-151.1)) ; REDUCE completion
            (<NUM-EXPR> (shift '<NUM-EXPR>-150.1)) ; REDUCE completion
            (UNDERSCORE (shift 'UNDERSCORE-114.2)) ; SHIFT op
            (LEFT-PAR (shift 'LEFT-PAR-167.3)) ; SHIFT op
            (NOT (shift 'NOT-169.2)) ; SHIFT op
            (URI-CAST (shift 'URI-CAST-175.3)) ; SHIFT op
            (PREF (shift 'PREF-118.2-176.4)) ; SHIFT op
            (URI-TAIL-CAST (shift 'URI-TAIL-CAST-177.3)) ; SHIFT op
            (ID (shift 'ID-173.2)) ; SHIFT op
            (VAR (shift 'VAR-171.1)) ; SHIFT op
            (FALSE (shift 'FALSE-123.1)) ; SHIFT op
            (TRUE (shift 'TRUE-122.1)) ; SHIFT op
            (NUMBER (shift 'NUMBER-121.1)) ; SHIFT op
            (PLUS (shift 'PLUS-166.2)) ; SHIFT op
            (MINUS (shift 'MINUS-165.2)) ; SHIFT op
            (STRING (shift 'STRING-126.1-127.2)) ; SHIFT op
            (A (shift 'A-120.1)) ; SHIFT op
            (URI-TAIL (shift 'URI-TAIL-119.1)) ; SHIFT op
            (URI (shift 'URI-117.1)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(UNDERSCORE LEFT-PAR NOT URI-CAST PREF URI-TAIL-CAST ID VAR FALSE TRUE NUMBER PLUS MINUS STRING A URI-TAIL URI) input))))
         (<MULT-EXPR>-152.3-153.3-154.3-155.3-156.3-157.1
           (selectq (car input)
            ((FOR RIGHT-BRACKET COLON COMMA OR RIGHT-PAR AS AND NOT IN AGREATER-OR-EQUAL ALESS-OR-EQUAL AGREATER ALESS AEQUAL ANOT-EQUAL GREATER-OR-EQUAL LESS-OR-EQUAL GREATER LESS EQUAL NOT-EQUAL RIGHT-BRACE LIMIT OFFSET ORDER HAVING GROUP VALUES LEFT-BRACE WHERE FROM -! SEMICOLON) ; REDUCE(157) op
              (setq input (cons '<NUM-EXPR> (nth 0 (reduce 1)))))
            (A-OR (shift 'A-OR-156.2)) ; SHIFT op
            (AMINUS (shift 'AMINUS-155.2)) ; SHIFT op
            (APLUS (shift 'APLUS-154.2)) ; SHIFT op
            (MINUS (shift 'MINUS-153.2)) ; SHIFT op
            (PLUS (shift 'PLUS-152.2)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(FOR RIGHT-BRACKET COLON COMMA OR RIGHT-PAR AS AND NOT IN AGREATER-OR-EQUAL ALESS-OR-EQUAL AGREATER ALESS AEQUAL ANOT-EQUAL GREATER-OR-EQUAL LESS-OR-EQUAL GREATER LESS EQUAL NOT-EQUAL RIGHT-BRACE LIMIT OFFSET ORDER HAVING GROUP VALUES LEFT-BRACE WHERE FROM -! SEMICOLON A-OR AMINUS APLUS MINUS PLUS) input))))
         (A-OR-156.2
           (selectq (car input)
            (<MULT-EXPR> (shift '<MULT-EXPR>-156.1)) ; REDUCE completion
            (<PRIM-EXPR> (shift '<PRIM-EXPR>-164.1)) ; REDUCE completion
            (<STRING-LANG> (shift '<STRING-LANG>-124.1-125.3)) ; REDUCE completion
            (<FNCALL> (shift '<FNCALL>-172.1)) ; REDUCE completion
            (<SIMPLE-FNCALL> (shift '<SIMPLE-FNCALL>-174.1)) ; REDUCE completion
            (<VAR-OR-FNCALL> (shift '<VAR-OR-FNCALL>-170.1-178.4)) ; REDUCE completion
            (<LITERAL> (shift '<LITERAL>-168.1)) ; REDUCE completion
            (<UNARY-EXPR> (shift '<UNARY-EXPR>-158.3-159.3-160.3-161.3-162.3-163.1)) ; REDUCE completion
            (LEFT-PAR (shift 'LEFT-PAR-167.3)) ; SHIFT op
            (NOT (shift 'NOT-169.2)) ; SHIFT op
            (URI-CAST (shift 'URI-CAST-175.3)) ; SHIFT op
            (PREF (shift 'PREF-176.4)) ; SHIFT op
            (URI-TAIL-CAST (shift 'URI-TAIL-CAST-177.3)) ; SHIFT op
            (ID (shift 'ID-173.2)) ; SHIFT op
            (VAR (shift 'VAR-171.1)) ; SHIFT op
            (FALSE (shift 'FALSE-123.1)) ; SHIFT op
            (TRUE (shift 'TRUE-122.1)) ; SHIFT op
            (NUMBER (shift 'NUMBER-121.1)) ; SHIFT op
            (PLUS (shift 'PLUS-166.2)) ; SHIFT op
            (MINUS (shift 'MINUS-165.2)) ; SHIFT op
            (STRING (shift 'STRING-126.1-127.2)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(LEFT-PAR NOT URI-CAST PREF URI-TAIL-CAST ID VAR FALSE TRUE NUMBER PLUS MINUS STRING) input))))
         (PREF-176.4
           (selectq (car input)
            (URI-TAIL-CAST (shift 'URI-TAIL-CAST-176.3)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(URI-TAIL-CAST) input))))
         (URI-TAIL-CAST-176.3
           (selectq (car input)
            (<REL-EXPR> (shift '<REL-EXPR>-133.1)) ; REDUCE completion
            (<NUM-EXPR> (shift '<NUM-EXPR>-150.1)) ; REDUCE completion
            (<RDF-TERM> (shift '<RDF-TERM>-151.1)) ; REDUCE completion
            (<RESOURCE> (shift '<RESOURCE>-115.1)) ; REDUCE completion
            (<UNARY-EXPR> (shift '<UNARY-EXPR>-158.3-159.3-160.3-161.3-162.3-163.1)) ; REDUCE completion
            (<LITERAL> (shift '<LITERAL>-168.1)) ; REDUCE completion
            (<SIMPLE-FNCALL> (shift '<SIMPLE-FNCALL>-174.1)) ; REDUCE completion
            (<VAR-OR-FNCALL> (shift '<VAR-OR-FNCALL>-170.1-178.4)) ; REDUCE completion
            (<FNCALL> (shift '<FNCALL>-172.1)) ; REDUCE completion
            (<STRING-LANG> (shift '<STRING-LANG>-124.1-125.3)) ; REDUCE completion
            (<PRIM-EXPR> (shift '<PRIM-EXPR>-164.1)) ; REDUCE completion
            (<MULT-EXPR> (shift '<MULT-EXPR>-152.3-153.3-154.3-155.3-156.3-157.1)) ; REDUCE completion
            (<NUM-EXPR-OR-URI> (shift '<NUM-EXPR-OR-URI>-134.1-135.3-136.3-137.4)) ; REDUCE completion
            (<CONJUNCTION> (shift '<CONJUNCTION>-129.1-132.3)) ; REDUCE completion
            (<EXPR> (shift '<EXPR>-128.3-176.2)) ; REDUCE completion
            (ID (shift 'ID-130.1-173.2)) ; SHIFT op
            (TIMES (shift 'TIMES-131.1)) ; SHIFT op
            (MINUS (shift 'MINUS-165.2)) ; SHIFT op
            (PLUS (shift 'PLUS-166.2)) ; SHIFT op
            (NUMBER (shift 'NUMBER-121.1)) ; SHIFT op
            (TRUE (shift 'TRUE-122.1)) ; SHIFT op
            (FALSE (shift 'FALSE-123.1)) ; SHIFT op
            (VAR (shift 'VAR-171.1)) ; SHIFT op
            (URI-TAIL-CAST (shift 'URI-TAIL-CAST-177.3)) ; SHIFT op
            (PREF (shift 'PREF-118.2-176.4)) ; SHIFT op
            (URI-CAST (shift 'URI-CAST-175.3)) ; SHIFT op
            (NOT (shift 'NOT-169.2)) ; SHIFT op
            (LEFT-PAR (shift 'LEFT-PAR-167.3)) ; SHIFT op
            (UNDERSCORE (shift 'UNDERSCORE-114.2)) ; SHIFT op
            (STRING (shift 'STRING-126.1-127.2)) ; SHIFT op
            (A (shift 'A-120.1)) ; SHIFT op
            (URI-TAIL (shift 'URI-TAIL-119.1)) ; SHIFT op
            (URI (shift 'URI-117.1)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(ID TIMES MINUS PLUS NUMBER TRUE FALSE VAR URI-TAIL-CAST PREF URI-CAST NOT LEFT-PAR UNDERSCORE STRING A URI-TAIL URI) input))))
         (<EXPR>-128.3-176.2
           (selectq (car input)
            (RIGHT-PAR (shift 'RIGHT-PAR-176.1)) ; SHIFT op
            (OR (shift 'OR-128.2)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(RIGHT-PAR OR) input))))
         (AMINUS-155.2
           (selectq (car input)
            (<MULT-EXPR> (shift '<MULT-EXPR>-155.1)) ; REDUCE completion
            (<PRIM-EXPR> (shift '<PRIM-EXPR>-164.1)) ; REDUCE completion
            (<STRING-LANG> (shift '<STRING-LANG>-124.1-125.3)) ; REDUCE completion
            (<FNCALL> (shift '<FNCALL>-172.1)) ; REDUCE completion
            (<SIMPLE-FNCALL> (shift '<SIMPLE-FNCALL>-174.1)) ; REDUCE completion
            (<VAR-OR-FNCALL> (shift '<VAR-OR-FNCALL>-170.1-178.4)) ; REDUCE completion
            (<LITERAL> (shift '<LITERAL>-168.1)) ; REDUCE completion
            (<UNARY-EXPR> (shift '<UNARY-EXPR>-158.3-159.3-160.3-161.3-162.3-163.1)) ; REDUCE completion
            (LEFT-PAR (shift 'LEFT-PAR-167.3)) ; SHIFT op
            (NOT (shift 'NOT-169.2)) ; SHIFT op
            (URI-CAST (shift 'URI-CAST-175.3)) ; SHIFT op
            (PREF (shift 'PREF-176.4)) ; SHIFT op
            (URI-TAIL-CAST (shift 'URI-TAIL-CAST-177.3)) ; SHIFT op
            (ID (shift 'ID-173.2)) ; SHIFT op
            (VAR (shift 'VAR-171.1)) ; SHIFT op
            (FALSE (shift 'FALSE-123.1)) ; SHIFT op
            (TRUE (shift 'TRUE-122.1)) ; SHIFT op
            (NUMBER (shift 'NUMBER-121.1)) ; SHIFT op
            (PLUS (shift 'PLUS-166.2)) ; SHIFT op
            (MINUS (shift 'MINUS-165.2)) ; SHIFT op
            (STRING (shift 'STRING-126.1-127.2)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(LEFT-PAR NOT URI-CAST PREF URI-TAIL-CAST ID VAR FALSE TRUE NUMBER PLUS MINUS STRING) input))))
         (APLUS-154.2
           (selectq (car input)
            (<MULT-EXPR> (shift '<MULT-EXPR>-154.1)) ; REDUCE completion
            (<PRIM-EXPR> (shift '<PRIM-EXPR>-164.1)) ; REDUCE completion
            (<STRING-LANG> (shift '<STRING-LANG>-124.1-125.3)) ; REDUCE completion
            (<FNCALL> (shift '<FNCALL>-172.1)) ; REDUCE completion
            (<SIMPLE-FNCALL> (shift '<SIMPLE-FNCALL>-174.1)) ; REDUCE completion
            (<VAR-OR-FNCALL> (shift '<VAR-OR-FNCALL>-170.1-178.4)) ; REDUCE completion
            (<LITERAL> (shift '<LITERAL>-168.1)) ; REDUCE completion
            (<UNARY-EXPR> (shift '<UNARY-EXPR>-158.3-159.3-160.3-161.3-162.3-163.1)) ; REDUCE completion
            (LEFT-PAR (shift 'LEFT-PAR-167.3)) ; SHIFT op
            (NOT (shift 'NOT-169.2)) ; SHIFT op
            (URI-CAST (shift 'URI-CAST-175.3)) ; SHIFT op
            (PREF (shift 'PREF-176.4)) ; SHIFT op
            (URI-TAIL-CAST (shift 'URI-TAIL-CAST-177.3)) ; SHIFT op
            (ID (shift 'ID-173.2)) ; SHIFT op
            (VAR (shift 'VAR-171.1)) ; SHIFT op
            (FALSE (shift 'FALSE-123.1)) ; SHIFT op
            (TRUE (shift 'TRUE-122.1)) ; SHIFT op
            (NUMBER (shift 'NUMBER-121.1)) ; SHIFT op
            (PLUS (shift 'PLUS-166.2)) ; SHIFT op
            (MINUS (shift 'MINUS-165.2)) ; SHIFT op
            (STRING (shift 'STRING-126.1-127.2)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(LEFT-PAR NOT URI-CAST PREF URI-TAIL-CAST ID VAR FALSE TRUE NUMBER PLUS MINUS STRING) input))))
         (MINUS-153.2
           (selectq (car input)
            (<MULT-EXPR> (shift '<MULT-EXPR>-153.1)) ; REDUCE completion
            (<PRIM-EXPR> (shift '<PRIM-EXPR>-164.1)) ; REDUCE completion
            (<STRING-LANG> (shift '<STRING-LANG>-124.1-125.3)) ; REDUCE completion
            (<FNCALL> (shift '<FNCALL>-172.1)) ; REDUCE completion
            (<SIMPLE-FNCALL> (shift '<SIMPLE-FNCALL>-174.1)) ; REDUCE completion
            (<VAR-OR-FNCALL> (shift '<VAR-OR-FNCALL>-170.1-178.4)) ; REDUCE completion
            (<LITERAL> (shift '<LITERAL>-168.1)) ; REDUCE completion
            (<UNARY-EXPR> (shift '<UNARY-EXPR>-158.3-159.3-160.3-161.3-162.3-163.1)) ; REDUCE completion
            (LEFT-PAR (shift 'LEFT-PAR-167.3)) ; SHIFT op
            (NOT (shift 'NOT-169.2)) ; SHIFT op
            (URI-CAST (shift 'URI-CAST-175.3)) ; SHIFT op
            (PREF (shift 'PREF-176.4)) ; SHIFT op
            (URI-TAIL-CAST (shift 'URI-TAIL-CAST-177.3)) ; SHIFT op
            (ID (shift 'ID-173.2)) ; SHIFT op
            (VAR (shift 'VAR-171.1)) ; SHIFT op
            (FALSE (shift 'FALSE-123.1)) ; SHIFT op
            (TRUE (shift 'TRUE-122.1)) ; SHIFT op
            (NUMBER (shift 'NUMBER-121.1)) ; SHIFT op
            (PLUS (shift 'PLUS-166.2)) ; SHIFT op
            (MINUS (shift 'MINUS-165.2)) ; SHIFT op
            (STRING (shift 'STRING-126.1-127.2)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(LEFT-PAR NOT URI-CAST PREF URI-TAIL-CAST ID VAR FALSE TRUE NUMBER PLUS MINUS STRING) input))))
         (PLUS-152.2
           (selectq (car input)
            (<MULT-EXPR> (shift '<MULT-EXPR>-152.1)) ; REDUCE completion
            (<PRIM-EXPR> (shift '<PRIM-EXPR>-164.1)) ; REDUCE completion
            (<STRING-LANG> (shift '<STRING-LANG>-124.1-125.3)) ; REDUCE completion
            (<FNCALL> (shift '<FNCALL>-172.1)) ; REDUCE completion
            (<SIMPLE-FNCALL> (shift '<SIMPLE-FNCALL>-174.1)) ; REDUCE completion
            (<VAR-OR-FNCALL> (shift '<VAR-OR-FNCALL>-170.1-178.4)) ; REDUCE completion
            (<LITERAL> (shift '<LITERAL>-168.1)) ; REDUCE completion
            (<UNARY-EXPR> (shift '<UNARY-EXPR>-158.3-159.3-160.3-161.3-162.3-163.1)) ; REDUCE completion
            (LEFT-PAR (shift 'LEFT-PAR-167.3)) ; SHIFT op
            (NOT (shift 'NOT-169.2)) ; SHIFT op
            (URI-CAST (shift 'URI-CAST-175.3)) ; SHIFT op
            (PREF (shift 'PREF-176.4)) ; SHIFT op
            (URI-TAIL-CAST (shift 'URI-TAIL-CAST-177.3)) ; SHIFT op
            (ID (shift 'ID-173.2)) ; SHIFT op
            (VAR (shift 'VAR-171.1)) ; SHIFT op
            (FALSE (shift 'FALSE-123.1)) ; SHIFT op
            (TRUE (shift 'TRUE-122.1)) ; SHIFT op
            (NUMBER (shift 'NUMBER-121.1)) ; SHIFT op
            (PLUS (shift 'PLUS-166.2)) ; SHIFT op
            (MINUS (shift 'MINUS-165.2)) ; SHIFT op
            (STRING (shift 'STRING-126.1-127.2)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(LEFT-PAR NOT URI-CAST PREF URI-TAIL-CAST ID VAR FALSE TRUE NUMBER PLUS MINUS STRING) input))))
         (MINUS-165.2
           (selectq (car input)
            (<PRIM-EXPR> (shift '<PRIM-EXPR>-165.1)) ; REDUCE completion
            (<STRING-LANG> (shift '<STRING-LANG>-124.1-125.3)) ; REDUCE completion
            (<FNCALL> (shift '<FNCALL>-172.1)) ; REDUCE completion
            (<SIMPLE-FNCALL> (shift '<SIMPLE-FNCALL>-174.1)) ; REDUCE completion
            (<VAR-OR-FNCALL> (shift '<VAR-OR-FNCALL>-170.1-178.4)) ; REDUCE completion
            (<LITERAL> (shift '<LITERAL>-168.1)) ; REDUCE completion
            (LEFT-PAR (shift 'LEFT-PAR-167.3)) ; SHIFT op
            (NOT (shift 'NOT-169.2)) ; SHIFT op
            (URI-CAST (shift 'URI-CAST-175.3)) ; SHIFT op
            (PREF (shift 'PREF-176.4)) ; SHIFT op
            (URI-TAIL-CAST (shift 'URI-TAIL-CAST-177.3)) ; SHIFT op
            (ID (shift 'ID-173.2)) ; SHIFT op
            (VAR (shift 'VAR-171.1)) ; SHIFT op
            (FALSE (shift 'FALSE-123.1)) ; SHIFT op
            (TRUE (shift 'TRUE-122.1)) ; SHIFT op
            (NUMBER (shift 'NUMBER-121.1)) ; SHIFT op
            (STRING (shift 'STRING-126.1-127.2)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(LEFT-PAR NOT URI-CAST PREF URI-TAIL-CAST ID VAR FALSE TRUE NUMBER STRING) input))))
         (PLUS-166.2
           (selectq (car input)
            (<PRIM-EXPR> (shift '<PRIM-EXPR>-166.1)) ; REDUCE completion
            (<STRING-LANG> (shift '<STRING-LANG>-124.1-125.3)) ; REDUCE completion
            (<FNCALL> (shift '<FNCALL>-172.1)) ; REDUCE completion
            (<SIMPLE-FNCALL> (shift '<SIMPLE-FNCALL>-174.1)) ; REDUCE completion
            (<VAR-OR-FNCALL> (shift '<VAR-OR-FNCALL>-170.1-178.4)) ; REDUCE completion
            (<LITERAL> (shift '<LITERAL>-168.1)) ; REDUCE completion
            (LEFT-PAR (shift 'LEFT-PAR-167.3)) ; SHIFT op
            (NOT (shift 'NOT-169.2)) ; SHIFT op
            (URI-CAST (shift 'URI-CAST-175.3)) ; SHIFT op
            (PREF (shift 'PREF-176.4)) ; SHIFT op
            (URI-TAIL-CAST (shift 'URI-TAIL-CAST-177.3)) ; SHIFT op
            (ID (shift 'ID-173.2)) ; SHIFT op
            (VAR (shift 'VAR-171.1)) ; SHIFT op
            (FALSE (shift 'FALSE-123.1)) ; SHIFT op
            (TRUE (shift 'TRUE-122.1)) ; SHIFT op
            (NUMBER (shift 'NUMBER-121.1)) ; SHIFT op
            (STRING (shift 'STRING-126.1-127.2)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(LEFT-PAR NOT URI-CAST PREF URI-TAIL-CAST ID VAR FALSE TRUE NUMBER STRING) input))))
         (<STRING-LANG>-124.1-125.3
           (selectq (car input)
            ((FOR RIGHT-BRACKET A-AND ADIVIDE ATIMES DIVIDE TIMES COLON COMMA OR RIGHT-PAR AS AND NOT IN AGREATER-OR-EQUAL ALESS-OR-EQUAL AGREATER ALESS AEQUAL ANOT-EQUAL GREATER-OR-EQUAL LESS-OR-EQUAL GREATER LESS EQUAL NOT-EQUAL RIGHT-BRACE LIMIT OFFSET ORDER HAVING GROUP VALUES LEFT-BRACE WHERE FROM A-OR AMINUS APLUS MINUS PLUS STRING NUMBER TRUE FALSE URI PREF URI-TAIL A UNDEF LEFT-PAR CAP VAR SEMICOLON UNDERSCORE LEFT-BRACKET GRAPH FILTER OPTIONAL BIND DOT -! SEMICOLON) ; REDUCE(124) op
              (setq input (cons '<LITERAL> (nth 0 (reduce 1)))))
            (DOUBLE-CAP (shift 'DOUBLE-CAP-125.2)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(FOR RIGHT-BRACKET A-AND ADIVIDE ATIMES DIVIDE TIMES COLON COMMA OR RIGHT-PAR AS AND NOT IN AGREATER-OR-EQUAL ALESS-OR-EQUAL AGREATER ALESS AEQUAL ANOT-EQUAL GREATER-OR-EQUAL LESS-OR-EQUAL GREATER LESS EQUAL NOT-EQUAL RIGHT-BRACE LIMIT OFFSET ORDER HAVING GROUP VALUES LEFT-BRACE WHERE FROM A-OR AMINUS APLUS MINUS PLUS STRING NUMBER TRUE FALSE URI PREF URI-TAIL A UNDEF LEFT-PAR CAP VAR SEMICOLON UNDERSCORE LEFT-BRACKET GRAPH FILTER OPTIONAL BIND DOT -! SEMICOLON DOUBLE-CAP) input))))
         (DOUBLE-CAP-125.2
           (selectq (car input)
            (<RESOURCE> (shift '<RESOURCE>-125.1)) ; REDUCE completion
            (URI (shift 'URI-117.1)) ; SHIFT op
            (PREF (shift 'PREF-118.2)) ; SHIFT op
            (URI-TAIL (shift 'URI-TAIL-119.1)) ; SHIFT op
            (A (shift 'A-120.1)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(URI PREF URI-TAIL A) input))))
         (PREF-118.2
           (selectq (car input)
            (URI-TAIL (shift 'URI-TAIL-118.1)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(URI-TAIL) input))))
         (<VAR-OR-FNCALL>-170.1-178.4
           (selectq (car input)
            ((FOR RIGHT-BRACKET A-OR AMINUS APLUS MINUS PLUS RIGHT-BRACE LIMIT OFFSET ORDER HAVING GROUP VALUES LEFT-BRACE WHERE FROM NOT IN AGREATER-OR-EQUAL ALESS-OR-EQUAL AGREATER ALESS AEQUAL ANOT-EQUAL GREATER-OR-EQUAL LESS-OR-EQUAL GREATER LESS EQUAL NOT-EQUAL COMMA AND RIGHT-PAR OR AS COLON A-AND ADIVIDE ATIMES DIVIDE TIMES -! SEMICOLON) ; REDUCE(170) op
              (setq input (cons '<PRIM-EXPR> (nth 0 (reduce 1)))))
            (LEFT-BRACKET (shift 'LEFT-BRACKET-178.3)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(FOR RIGHT-BRACKET A-OR AMINUS APLUS MINUS PLUS RIGHT-BRACE LIMIT OFFSET ORDER HAVING GROUP VALUES LEFT-BRACE WHERE FROM NOT IN AGREATER-OR-EQUAL ALESS-OR-EQUAL AGREATER ALESS AEQUAL ANOT-EQUAL GREATER-OR-EQUAL LESS-OR-EQUAL GREATER LESS EQUAL NOT-EQUAL COMMA AND RIGHT-PAR OR AS COLON A-AND ADIVIDE ATIMES DIVIDE TIMES -! SEMICOLON LEFT-BRACKET) input))))
         (LEFT-BRACKET-178.3
           (selectq (car input)
            (<RANGE-EXPR-LIST> (shift '<RANGE-EXPR-LIST>-178.2)) ; REDUCE completion
            (<UNARY-EXPR> (shift '<UNARY-EXPR>-158.3-159.3-160.3-161.3-162.3-163.1)) ; REDUCE completion
            (<LITERAL> (shift '<LITERAL>-168.1)) ; REDUCE completion
            (<SIMPLE-FNCALL> (shift '<SIMPLE-FNCALL>-174.1)) ; REDUCE completion
            (<VAR-OR-FNCALL> (shift '<VAR-OR-FNCALL>-170.1-178.4)) ; REDUCE completion
            (<FNCALL> (shift '<FNCALL>-172.1)) ; REDUCE completion
            (<STRING-LANG> (shift '<STRING-LANG>-124.1-125.3)) ; REDUCE completion
            (<PRIM-EXPR> (shift '<PRIM-EXPR>-164.1)) ; REDUCE completion
            (<MULT-EXPR> (shift '<MULT-EXPR>-152.3-153.3-154.3-155.3-156.3-157.1)) ; REDUCE completion
            (<NUM-EXPR> (shift '<NUM-EXPR>-185.1-186.3-188.2-189.5-191.4-194.4)) ; REDUCE completion
            (<RANGE-EXPR> (shift '<RANGE-EXPR>-195.1-196.3)) ; REDUCE completion
            (COLON (shift 'COLON-184.1-187.2-190.4-192.3-193.3)) ; SHIFT op
            (MINUS (shift 'MINUS-165.2)) ; SHIFT op
            (PLUS (shift 'PLUS-166.2)) ; SHIFT op
            (NUMBER (shift 'NUMBER-121.1)) ; SHIFT op
            (TRUE (shift 'TRUE-122.1)) ; SHIFT op
            (FALSE (shift 'FALSE-123.1)) ; SHIFT op
            (VAR (shift 'VAR-171.1)) ; SHIFT op
            (ID (shift 'ID-173.2)) ; SHIFT op
            (URI-TAIL-CAST (shift 'URI-TAIL-CAST-177.3)) ; SHIFT op
            (PREF (shift 'PREF-176.4)) ; SHIFT op
            (URI-CAST (shift 'URI-CAST-175.3)) ; SHIFT op
            (NOT (shift 'NOT-169.2)) ; SHIFT op
            (LEFT-PAR (shift 'LEFT-PAR-167.3)) ; SHIFT op
            (STRING (shift 'STRING-126.1-127.2)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(COLON MINUS PLUS NUMBER TRUE FALSE VAR ID URI-TAIL-CAST PREF URI-CAST NOT LEFT-PAR STRING) input))))
         (<RANGE-EXPR>-195.1-196.3
           (selectq (car input)
            ((RIGHT-BRACKET) ; REDUCE(195) op
              (setq input (cons '<RANGE-EXPR-LIST> (apply #'(LAMBDA (A) (LIST A)) (reduce 1)))))
            (COMMA (shift 'COMMA-196.2)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(RIGHT-BRACKET COMMA) input))))
         (COMMA-196.2
           (selectq (car input)
            (<RANGE-EXPR-LIST> (shift '<RANGE-EXPR-LIST>-196.1)) ; REDUCE completion
            (<UNARY-EXPR> (shift '<UNARY-EXPR>-158.3-159.3-160.3-161.3-162.3-163.1)) ; REDUCE completion
            (<LITERAL> (shift '<LITERAL>-168.1)) ; REDUCE completion
            (<SIMPLE-FNCALL> (shift '<SIMPLE-FNCALL>-174.1)) ; REDUCE completion
            (<VAR-OR-FNCALL> (shift '<VAR-OR-FNCALL>-170.1-178.4)) ; REDUCE completion
            (<FNCALL> (shift '<FNCALL>-172.1)) ; REDUCE completion
            (<STRING-LANG> (shift '<STRING-LANG>-124.1-125.3)) ; REDUCE completion
            (<PRIM-EXPR> (shift '<PRIM-EXPR>-164.1)) ; REDUCE completion
            (<MULT-EXPR> (shift '<MULT-EXPR>-152.3-153.3-154.3-155.3-156.3-157.1)) ; REDUCE completion
            (<NUM-EXPR> (shift '<NUM-EXPR>-185.1-186.3-188.2-189.5-191.4-194.4)) ; REDUCE completion
            (<RANGE-EXPR> (shift '<RANGE-EXPR>-195.1-196.3)) ; REDUCE completion
            (COLON (shift 'COLON-184.1-187.2-190.4-192.3-193.3)) ; SHIFT op
            (MINUS (shift 'MINUS-165.2)) ; SHIFT op
            (PLUS (shift 'PLUS-166.2)) ; SHIFT op
            (NUMBER (shift 'NUMBER-121.1)) ; SHIFT op
            (TRUE (shift 'TRUE-122.1)) ; SHIFT op
            (FALSE (shift 'FALSE-123.1)) ; SHIFT op
            (VAR (shift 'VAR-171.1)) ; SHIFT op
            (ID (shift 'ID-173.2)) ; SHIFT op
            (URI-TAIL-CAST (shift 'URI-TAIL-CAST-177.3)) ; SHIFT op
            (PREF (shift 'PREF-176.4)) ; SHIFT op
            (URI-CAST (shift 'URI-CAST-175.3)) ; SHIFT op
            (NOT (shift 'NOT-169.2)) ; SHIFT op
            (LEFT-PAR (shift 'LEFT-PAR-167.3)) ; SHIFT op
            (STRING (shift 'STRING-126.1-127.2)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(COLON MINUS PLUS NUMBER TRUE FALSE VAR ID URI-TAIL-CAST PREF URI-CAST NOT LEFT-PAR STRING) input))))
         (<NUM-EXPR>-185.1-186.3-188.2-189.5-191.4-194.4
           (selectq (car input)
            ((COMMA RIGHT-BRACKET) ; REDUCE(185) op
              (setq input (cons '<RANGE-EXPR> (nth 0 (reduce 1)))))
            (COLON (shift 'COLON-186.2-188.1-189.4-191.3-194.3)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(COMMA RIGHT-BRACKET COLON) input))))
         (COLON-186.2-188.1-189.4-191.3-194.3
           (selectq (car input)
            (<NUM-EXPR> (shift '<NUM-EXPR>-186.1-189.3-191.2)) ; REDUCE completion
            (<UNARY-EXPR> (shift '<UNARY-EXPR>-158.3-159.3-160.3-161.3-162.3-163.1)) ; REDUCE completion
            (<LITERAL> (shift '<LITERAL>-168.1)) ; REDUCE completion
            (<SIMPLE-FNCALL> (shift '<SIMPLE-FNCALL>-174.1)) ; REDUCE completion
            (<VAR-OR-FNCALL> (shift '<VAR-OR-FNCALL>-170.1-178.4)) ; REDUCE completion
            (<FNCALL> (shift '<FNCALL>-172.1)) ; REDUCE completion
            (<STRING-LANG> (shift '<STRING-LANG>-124.1-125.3)) ; REDUCE completion
            (<PRIM-EXPR> (shift '<PRIM-EXPR>-164.1)) ; REDUCE completion
            (<MULT-EXPR> (shift '<MULT-EXPR>-152.3-153.3-154.3-155.3-156.3-157.1)) ; REDUCE completion
            ((COMMA RIGHT-BRACKET) ; REDUCE(188) op
              (setq input (cons '<RANGE-EXPR> (apply #'(LAMBDA (A B) (LIST (QUOTE RANGE2) A (QUOTE (NUMBER "-1")))) (reduce 2)))))
            (COLON (shift 'COLON-194.2)) ; SHIFT op
            (MINUS (shift 'MINUS-165.2)) ; SHIFT op
            (PLUS (shift 'PLUS-166.2)) ; SHIFT op
            (NUMBER (shift 'NUMBER-121.1)) ; SHIFT op
            (TRUE (shift 'TRUE-122.1)) ; SHIFT op
            (FALSE (shift 'FALSE-123.1)) ; SHIFT op
            (VAR (shift 'VAR-171.1)) ; SHIFT op
            (ID (shift 'ID-173.2)) ; SHIFT op
            (URI-TAIL-CAST (shift 'URI-TAIL-CAST-177.3)) ; SHIFT op
            (PREF (shift 'PREF-176.4)) ; SHIFT op
            (URI-CAST (shift 'URI-CAST-175.3)) ; SHIFT op
            (NOT (shift 'NOT-169.2)) ; SHIFT op
            (LEFT-PAR (shift 'LEFT-PAR-167.3)) ; SHIFT op
            (STRING (shift 'STRING-126.1-127.2)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(COMMA RIGHT-BRACKET COLON MINUS PLUS NUMBER TRUE FALSE VAR ID URI-TAIL-CAST PREF URI-CAST NOT LEFT-PAR STRING) input))))
         (COLON-194.2
           (selectq (car input)
            (<NUM-EXPR> (shift '<NUM-EXPR>-194.1)) ; REDUCE completion
            (<UNARY-EXPR> (shift '<UNARY-EXPR>-158.3-159.3-160.3-161.3-162.3-163.1)) ; REDUCE completion
            (<LITERAL> (shift '<LITERAL>-168.1)) ; REDUCE completion
            (<SIMPLE-FNCALL> (shift '<SIMPLE-FNCALL>-174.1)) ; REDUCE completion
            (<VAR-OR-FNCALL> (shift '<VAR-OR-FNCALL>-170.1-178.4)) ; REDUCE completion
            (<FNCALL> (shift '<FNCALL>-172.1)) ; REDUCE completion
            (<STRING-LANG> (shift '<STRING-LANG>-124.1-125.3)) ; REDUCE completion
            (<PRIM-EXPR> (shift '<PRIM-EXPR>-164.1)) ; REDUCE completion
            (<MULT-EXPR> (shift '<MULT-EXPR>-152.3-153.3-154.3-155.3-156.3-157.1)) ; REDUCE completion
            (MINUS (shift 'MINUS-165.2)) ; SHIFT op
            (PLUS (shift 'PLUS-166.2)) ; SHIFT op
            (NUMBER (shift 'NUMBER-121.1)) ; SHIFT op
            (TRUE (shift 'TRUE-122.1)) ; SHIFT op
            (FALSE (shift 'FALSE-123.1)) ; SHIFT op
            (VAR (shift 'VAR-171.1)) ; SHIFT op
            (ID (shift 'ID-173.2)) ; SHIFT op
            (URI-TAIL-CAST (shift 'URI-TAIL-CAST-177.3)) ; SHIFT op
            (PREF (shift 'PREF-176.4)) ; SHIFT op
            (URI-CAST (shift 'URI-CAST-175.3)) ; SHIFT op
            (NOT (shift 'NOT-169.2)) ; SHIFT op
            (LEFT-PAR (shift 'LEFT-PAR-167.3)) ; SHIFT op
            (STRING (shift 'STRING-126.1-127.2)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(MINUS PLUS NUMBER TRUE FALSE VAR ID URI-TAIL-CAST PREF URI-CAST NOT LEFT-PAR STRING) input))))
         (<NUM-EXPR>-186.1-189.3-191.2
           (selectq (car input)
            ((COMMA RIGHT-BRACKET) ; REDUCE(186) op
              (setq input (cons '<RANGE-EXPR> (apply #'(LAMBDA (A B C) (LIST (QUOTE RANGE2) A C)) (reduce 3)))))
            (COLON (shift 'COLON-189.2-191.1)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(COMMA RIGHT-BRACKET COLON) input))))
         (COLON-189.2-191.1
           (selectq (car input)
            (<NUM-EXPR> (shift '<NUM-EXPR>-189.1)) ; REDUCE completion
            (<UNARY-EXPR> (shift '<UNARY-EXPR>-158.3-159.3-160.3-161.3-162.3-163.1)) ; REDUCE completion
            (<LITERAL> (shift '<LITERAL>-168.1)) ; REDUCE completion
            (<SIMPLE-FNCALL> (shift '<SIMPLE-FNCALL>-174.1)) ; REDUCE completion
            (<VAR-OR-FNCALL> (shift '<VAR-OR-FNCALL>-170.1-178.4)) ; REDUCE completion
            (<FNCALL> (shift '<FNCALL>-172.1)) ; REDUCE completion
            (<STRING-LANG> (shift '<STRING-LANG>-124.1-125.3)) ; REDUCE completion
            (<PRIM-EXPR> (shift '<PRIM-EXPR>-164.1)) ; REDUCE completion
            (<MULT-EXPR> (shift '<MULT-EXPR>-152.3-153.3-154.3-155.3-156.3-157.1)) ; REDUCE completion
            ((COMMA RIGHT-BRACKET) ; REDUCE(191) op
              (setq input (cons '<RANGE-EXPR> (apply #'(LAMBDA (A B C D) (LIST (QUOTE RANGE3) A C (QUOTE (NUMBER "-1")))) (reduce 4)))))
            (MINUS (shift 'MINUS-165.2)) ; SHIFT op
            (PLUS (shift 'PLUS-166.2)) ; SHIFT op
            (NUMBER (shift 'NUMBER-121.1)) ; SHIFT op
            (TRUE (shift 'TRUE-122.1)) ; SHIFT op
            (FALSE (shift 'FALSE-123.1)) ; SHIFT op
            (VAR (shift 'VAR-171.1)) ; SHIFT op
            (ID (shift 'ID-173.2)) ; SHIFT op
            (URI-TAIL-CAST (shift 'URI-TAIL-CAST-177.3)) ; SHIFT op
            (PREF (shift 'PREF-176.4)) ; SHIFT op
            (URI-CAST (shift 'URI-CAST-175.3)) ; SHIFT op
            (NOT (shift 'NOT-169.2)) ; SHIFT op
            (LEFT-PAR (shift 'LEFT-PAR-167.3)) ; SHIFT op
            (STRING (shift 'STRING-126.1-127.2)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(COMMA RIGHT-BRACKET MINUS PLUS NUMBER TRUE FALSE VAR ID URI-TAIL-CAST PREF URI-CAST NOT LEFT-PAR STRING) input))))
         (COLON-184.1-187.2-190.4-192.3-193.3
           (selectq (car input)
            (<NUM-EXPR> (shift '<NUM-EXPR>-187.1-190.3-192.2)) ; REDUCE completion
            (<UNARY-EXPR> (shift '<UNARY-EXPR>-158.3-159.3-160.3-161.3-162.3-163.1)) ; REDUCE completion
            (<LITERAL> (shift '<LITERAL>-168.1)) ; REDUCE completion
            (<SIMPLE-FNCALL> (shift '<SIMPLE-FNCALL>-174.1)) ; REDUCE completion
            (<VAR-OR-FNCALL> (shift '<VAR-OR-FNCALL>-170.1-178.4)) ; REDUCE completion
            (<FNCALL> (shift '<FNCALL>-172.1)) ; REDUCE completion
            (<STRING-LANG> (shift '<STRING-LANG>-124.1-125.3)) ; REDUCE completion
            (<PRIM-EXPR> (shift '<PRIM-EXPR>-164.1)) ; REDUCE completion
            (<MULT-EXPR> (shift '<MULT-EXPR>-152.3-153.3-154.3-155.3-156.3-157.1)) ; REDUCE completion
            ((COMMA RIGHT-BRACKET) ; REDUCE(184) op
              (setq input (cons '<RANGE-EXPR> (apply #'(LAMBDA (A) (LIST (QUOTE RANGE0))) (reduce 1)))))
            (COLON (shift 'COLON-193.2)) ; SHIFT op
            (MINUS (shift 'MINUS-165.2)) ; SHIFT op
            (PLUS (shift 'PLUS-166.2)) ; SHIFT op
            (NUMBER (shift 'NUMBER-121.1)) ; SHIFT op
            (TRUE (shift 'TRUE-122.1)) ; SHIFT op
            (FALSE (shift 'FALSE-123.1)) ; SHIFT op
            (VAR (shift 'VAR-171.1)) ; SHIFT op
            (ID (shift 'ID-173.2)) ; SHIFT op
            (URI-TAIL-CAST (shift 'URI-TAIL-CAST-177.3)) ; SHIFT op
            (PREF (shift 'PREF-176.4)) ; SHIFT op
            (URI-CAST (shift 'URI-CAST-175.3)) ; SHIFT op
            (NOT (shift 'NOT-169.2)) ; SHIFT op
            (LEFT-PAR (shift 'LEFT-PAR-167.3)) ; SHIFT op
            (STRING (shift 'STRING-126.1-127.2)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(COMMA RIGHT-BRACKET COLON MINUS PLUS NUMBER TRUE FALSE VAR ID URI-TAIL-CAST PREF URI-CAST NOT LEFT-PAR STRING) input))))
         (COLON-193.2
           (selectq (car input)
            (<NUM-EXPR> (shift '<NUM-EXPR>-193.1)) ; REDUCE completion
            (<UNARY-EXPR> (shift '<UNARY-EXPR>-158.3-159.3-160.3-161.3-162.3-163.1)) ; REDUCE completion
            (<LITERAL> (shift '<LITERAL>-168.1)) ; REDUCE completion
            (<SIMPLE-FNCALL> (shift '<SIMPLE-FNCALL>-174.1)) ; REDUCE completion
            (<VAR-OR-FNCALL> (shift '<VAR-OR-FNCALL>-170.1-178.4)) ; REDUCE completion
            (<FNCALL> (shift '<FNCALL>-172.1)) ; REDUCE completion
            (<STRING-LANG> (shift '<STRING-LANG>-124.1-125.3)) ; REDUCE completion
            (<PRIM-EXPR> (shift '<PRIM-EXPR>-164.1)) ; REDUCE completion
            (<MULT-EXPR> (shift '<MULT-EXPR>-152.3-153.3-154.3-155.3-156.3-157.1)) ; REDUCE completion
            (MINUS (shift 'MINUS-165.2)) ; SHIFT op
            (PLUS (shift 'PLUS-166.2)) ; SHIFT op
            (NUMBER (shift 'NUMBER-121.1)) ; SHIFT op
            (TRUE (shift 'TRUE-122.1)) ; SHIFT op
            (FALSE (shift 'FALSE-123.1)) ; SHIFT op
            (VAR (shift 'VAR-171.1)) ; SHIFT op
            (ID (shift 'ID-173.2)) ; SHIFT op
            (URI-TAIL-CAST (shift 'URI-TAIL-CAST-177.3)) ; SHIFT op
            (PREF (shift 'PREF-176.4)) ; SHIFT op
            (URI-CAST (shift 'URI-CAST-175.3)) ; SHIFT op
            (NOT (shift 'NOT-169.2)) ; SHIFT op
            (LEFT-PAR (shift 'LEFT-PAR-167.3)) ; SHIFT op
            (STRING (shift 'STRING-126.1-127.2)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(MINUS PLUS NUMBER TRUE FALSE VAR ID URI-TAIL-CAST PREF URI-CAST NOT LEFT-PAR STRING) input))))
         (<NUM-EXPR>-187.1-190.3-192.2
           (selectq (car input)
            ((COMMA RIGHT-BRACKET) ; REDUCE(187) op
              (setq input (cons '<RANGE-EXPR> (apply #'(LAMBDA (A B) (LIST (QUOTE RANGE2) (QUOTE (NUMBER "0")) B)) (reduce 2)))))
            (COLON (shift 'COLON-190.2-192.1)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(COMMA RIGHT-BRACKET COLON) input))))
         (COLON-190.2-192.1
           (selectq (car input)
            (<NUM-EXPR> (shift '<NUM-EXPR>-190.1)) ; REDUCE completion
            (<UNARY-EXPR> (shift '<UNARY-EXPR>-158.3-159.3-160.3-161.3-162.3-163.1)) ; REDUCE completion
            (<LITERAL> (shift '<LITERAL>-168.1)) ; REDUCE completion
            (<SIMPLE-FNCALL> (shift '<SIMPLE-FNCALL>-174.1)) ; REDUCE completion
            (<VAR-OR-FNCALL> (shift '<VAR-OR-FNCALL>-170.1-178.4)) ; REDUCE completion
            (<FNCALL> (shift '<FNCALL>-172.1)) ; REDUCE completion
            (<STRING-LANG> (shift '<STRING-LANG>-124.1-125.3)) ; REDUCE completion
            (<PRIM-EXPR> (shift '<PRIM-EXPR>-164.1)) ; REDUCE completion
            (<MULT-EXPR> (shift '<MULT-EXPR>-152.3-153.3-154.3-155.3-156.3-157.1)) ; REDUCE completion
            ((COMMA RIGHT-BRACKET) ; REDUCE(192) op
              (setq input (cons '<RANGE-EXPR> (apply #'(LAMBDA (A B C) (LIST (QUOTE RANGE3) (QUOTE (NUMBER "0")) B (QUOTE (NUMBER "-1")))) (reduce 3)))))
            (MINUS (shift 'MINUS-165.2)) ; SHIFT op
            (PLUS (shift 'PLUS-166.2)) ; SHIFT op
            (NUMBER (shift 'NUMBER-121.1)) ; SHIFT op
            (TRUE (shift 'TRUE-122.1)) ; SHIFT op
            (FALSE (shift 'FALSE-123.1)) ; SHIFT op
            (VAR (shift 'VAR-171.1)) ; SHIFT op
            (ID (shift 'ID-173.2)) ; SHIFT op
            (URI-TAIL-CAST (shift 'URI-TAIL-CAST-177.3)) ; SHIFT op
            (PREF (shift 'PREF-176.4)) ; SHIFT op
            (URI-CAST (shift 'URI-CAST-175.3)) ; SHIFT op
            (NOT (shift 'NOT-169.2)) ; SHIFT op
            (LEFT-PAR (shift 'LEFT-PAR-167.3)) ; SHIFT op
            (STRING (shift 'STRING-126.1-127.2)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(COMMA RIGHT-BRACKET MINUS PLUS NUMBER TRUE FALSE VAR ID URI-TAIL-CAST PREF URI-CAST NOT LEFT-PAR STRING) input))))
         (<RANGE-EXPR-LIST>-178.2
           (selectq (car input)
            (RIGHT-BRACKET (shift 'RIGHT-BRACKET-178.1)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(RIGHT-BRACKET) input))))
         (URI-TAIL-CAST-177.3
           (selectq (car input)
            (<REL-EXPR> (shift '<REL-EXPR>-133.1)) ; REDUCE completion
            (<NUM-EXPR> (shift '<NUM-EXPR>-150.1)) ; REDUCE completion
            (<RDF-TERM> (shift '<RDF-TERM>-151.1)) ; REDUCE completion
            (<RESOURCE> (shift '<RESOURCE>-115.1)) ; REDUCE completion
            (<UNARY-EXPR> (shift '<UNARY-EXPR>-158.3-159.3-160.3-161.3-162.3-163.1)) ; REDUCE completion
            (<LITERAL> (shift '<LITERAL>-168.1)) ; REDUCE completion
            (<SIMPLE-FNCALL> (shift '<SIMPLE-FNCALL>-174.1)) ; REDUCE completion
            (<VAR-OR-FNCALL> (shift '<VAR-OR-FNCALL>-170.1-178.4)) ; REDUCE completion
            (<FNCALL> (shift '<FNCALL>-172.1)) ; REDUCE completion
            (<STRING-LANG> (shift '<STRING-LANG>-124.1-125.3)) ; REDUCE completion
            (<PRIM-EXPR> (shift '<PRIM-EXPR>-164.1)) ; REDUCE completion
            (<MULT-EXPR> (shift '<MULT-EXPR>-152.3-153.3-154.3-155.3-156.3-157.1)) ; REDUCE completion
            (<NUM-EXPR-OR-URI> (shift '<NUM-EXPR-OR-URI>-134.1-135.3-136.3-137.4)) ; REDUCE completion
            (<CONJUNCTION> (shift '<CONJUNCTION>-129.1-132.3)) ; REDUCE completion
            (<EXPR> (shift '<EXPR>-128.3-177.2)) ; REDUCE completion
            (ID (shift 'ID-130.1-173.2)) ; SHIFT op
            (TIMES (shift 'TIMES-131.1)) ; SHIFT op
            (MINUS (shift 'MINUS-165.2)) ; SHIFT op
            (PLUS (shift 'PLUS-166.2)) ; SHIFT op
            (NUMBER (shift 'NUMBER-121.1)) ; SHIFT op
            (TRUE (shift 'TRUE-122.1)) ; SHIFT op
            (FALSE (shift 'FALSE-123.1)) ; SHIFT op
            (VAR (shift 'VAR-171.1)) ; SHIFT op
            (URI-TAIL-CAST (shift 'URI-TAIL-CAST-177.3)) ; SHIFT op
            (PREF (shift 'PREF-118.2-176.4)) ; SHIFT op
            (URI-CAST (shift 'URI-CAST-175.3)) ; SHIFT op
            (NOT (shift 'NOT-169.2)) ; SHIFT op
            (LEFT-PAR (shift 'LEFT-PAR-167.3)) ; SHIFT op
            (UNDERSCORE (shift 'UNDERSCORE-114.2)) ; SHIFT op
            (STRING (shift 'STRING-126.1-127.2)) ; SHIFT op
            (A (shift 'A-120.1)) ; SHIFT op
            (URI-TAIL (shift 'URI-TAIL-119.1)) ; SHIFT op
            (URI (shift 'URI-117.1)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(ID TIMES MINUS PLUS NUMBER TRUE FALSE VAR URI-TAIL-CAST PREF URI-CAST NOT LEFT-PAR UNDERSCORE STRING A URI-TAIL URI) input))))
         (<EXPR>-128.3-177.2
           (selectq (car input)
            (RIGHT-PAR (shift 'RIGHT-PAR-177.1)) ; SHIFT op
            (OR (shift 'OR-128.2)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(RIGHT-PAR OR) input))))
         (PREF-118.2-176.4
           (selectq (car input)
            (URI-TAIL-CAST (shift 'URI-TAIL-CAST-176.3)) ; SHIFT op
            (URI-TAIL (shift 'URI-TAIL-118.1)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(URI-TAIL-CAST URI-TAIL) input))))
         (URI-CAST-175.3
           (selectq (car input)
            (<REL-EXPR> (shift '<REL-EXPR>-133.1)) ; REDUCE completion
            (<NUM-EXPR> (shift '<NUM-EXPR>-150.1)) ; REDUCE completion
            (<RDF-TERM> (shift '<RDF-TERM>-151.1)) ; REDUCE completion
            (<RESOURCE> (shift '<RESOURCE>-115.1)) ; REDUCE completion
            (<UNARY-EXPR> (shift '<UNARY-EXPR>-158.3-159.3-160.3-161.3-162.3-163.1)) ; REDUCE completion
            (<LITERAL> (shift '<LITERAL>-168.1)) ; REDUCE completion
            (<SIMPLE-FNCALL> (shift '<SIMPLE-FNCALL>-174.1)) ; REDUCE completion
            (<VAR-OR-FNCALL> (shift '<VAR-OR-FNCALL>-170.1-178.4)) ; REDUCE completion
            (<FNCALL> (shift '<FNCALL>-172.1)) ; REDUCE completion
            (<STRING-LANG> (shift '<STRING-LANG>-124.1-125.3)) ; REDUCE completion
            (<PRIM-EXPR> (shift '<PRIM-EXPR>-164.1)) ; REDUCE completion
            (<MULT-EXPR> (shift '<MULT-EXPR>-152.3-153.3-154.3-155.3-156.3-157.1)) ; REDUCE completion
            (<NUM-EXPR-OR-URI> (shift '<NUM-EXPR-OR-URI>-134.1-135.3-136.3-137.4)) ; REDUCE completion
            (<CONJUNCTION> (shift '<CONJUNCTION>-129.1-132.3)) ; REDUCE completion
            (<EXPR> (shift '<EXPR>-128.3-175.2)) ; REDUCE completion
            (ID (shift 'ID-130.1-173.2)) ; SHIFT op
            (TIMES (shift 'TIMES-131.1)) ; SHIFT op
            (MINUS (shift 'MINUS-165.2)) ; SHIFT op
            (PLUS (shift 'PLUS-166.2)) ; SHIFT op
            (NUMBER (shift 'NUMBER-121.1)) ; SHIFT op
            (TRUE (shift 'TRUE-122.1)) ; SHIFT op
            (FALSE (shift 'FALSE-123.1)) ; SHIFT op
            (VAR (shift 'VAR-171.1)) ; SHIFT op
            (URI-TAIL-CAST (shift 'URI-TAIL-CAST-177.3)) ; SHIFT op
            (PREF (shift 'PREF-118.2-176.4)) ; SHIFT op
            (URI-CAST (shift 'URI-CAST-175.3)) ; SHIFT op
            (NOT (shift 'NOT-169.2)) ; SHIFT op
            (LEFT-PAR (shift 'LEFT-PAR-167.3)) ; SHIFT op
            (UNDERSCORE (shift 'UNDERSCORE-114.2)) ; SHIFT op
            (STRING (shift 'STRING-126.1-127.2)) ; SHIFT op
            (A (shift 'A-120.1)) ; SHIFT op
            (URI-TAIL (shift 'URI-TAIL-119.1)) ; SHIFT op
            (URI (shift 'URI-117.1)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(ID TIMES MINUS PLUS NUMBER TRUE FALSE VAR URI-TAIL-CAST PREF URI-CAST NOT LEFT-PAR UNDERSCORE STRING A URI-TAIL URI) input))))
         (<EXPR>-128.3-175.2
           (selectq (car input)
            (RIGHT-PAR (shift 'RIGHT-PAR-175.1)) ; SHIFT op
            (OR (shift 'OR-128.2)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(RIGHT-PAR OR) input))))
         (NOT-169.2
           (selectq (car input)
            (<PRIM-EXPR> (shift '<PRIM-EXPR>-169.1)) ; REDUCE completion
            (<STRING-LANG> (shift '<STRING-LANG>-124.1-125.3)) ; REDUCE completion
            (<FNCALL> (shift '<FNCALL>-172.1)) ; REDUCE completion
            (<SIMPLE-FNCALL> (shift '<SIMPLE-FNCALL>-174.1)) ; REDUCE completion
            (<VAR-OR-FNCALL> (shift '<VAR-OR-FNCALL>-170.1-178.4)) ; REDUCE completion
            (<LITERAL> (shift '<LITERAL>-168.1)) ; REDUCE completion
            (LEFT-PAR (shift 'LEFT-PAR-167.3)) ; SHIFT op
            (NOT (shift 'NOT-169.2)) ; SHIFT op
            (URI-CAST (shift 'URI-CAST-175.3)) ; SHIFT op
            (PREF (shift 'PREF-176.4)) ; SHIFT op
            (URI-TAIL-CAST (shift 'URI-TAIL-CAST-177.3)) ; SHIFT op
            (ID (shift 'ID-173.2)) ; SHIFT op
            (VAR (shift 'VAR-171.1)) ; SHIFT op
            (FALSE (shift 'FALSE-123.1)) ; SHIFT op
            (TRUE (shift 'TRUE-122.1)) ; SHIFT op
            (NUMBER (shift 'NUMBER-121.1)) ; SHIFT op
            (STRING (shift 'STRING-126.1-127.2)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(LEFT-PAR NOT URI-CAST PREF URI-TAIL-CAST ID VAR FALSE TRUE NUMBER STRING) input))))
         (LEFT-PAR-167.3
           (selectq (car input)
            (<REL-EXPR> (shift '<REL-EXPR>-133.1)) ; REDUCE completion
            (<NUM-EXPR> (shift '<NUM-EXPR>-150.1)) ; REDUCE completion
            (<RDF-TERM> (shift '<RDF-TERM>-151.1)) ; REDUCE completion
            (<RESOURCE> (shift '<RESOURCE>-115.1)) ; REDUCE completion
            (<UNARY-EXPR> (shift '<UNARY-EXPR>-158.3-159.3-160.3-161.3-162.3-163.1)) ; REDUCE completion
            (<LITERAL> (shift '<LITERAL>-168.1)) ; REDUCE completion
            (<SIMPLE-FNCALL> (shift '<SIMPLE-FNCALL>-174.1)) ; REDUCE completion
            (<VAR-OR-FNCALL> (shift '<VAR-OR-FNCALL>-170.1-178.4)) ; REDUCE completion
            (<FNCALL> (shift '<FNCALL>-172.1)) ; REDUCE completion
            (<STRING-LANG> (shift '<STRING-LANG>-124.1-125.3)) ; REDUCE completion
            (<PRIM-EXPR> (shift '<PRIM-EXPR>-164.1)) ; REDUCE completion
            (<MULT-EXPR> (shift '<MULT-EXPR>-152.3-153.3-154.3-155.3-156.3-157.1)) ; REDUCE completion
            (<NUM-EXPR-OR-URI> (shift '<NUM-EXPR-OR-URI>-134.1-135.3-136.3-137.4)) ; REDUCE completion
            (<CONJUNCTION> (shift '<CONJUNCTION>-129.1-132.3)) ; REDUCE completion
            (<EXPR> (shift '<EXPR>-128.3-167.2)) ; REDUCE completion
            (ID (shift 'ID-130.1-173.2)) ; SHIFT op
            (TIMES (shift 'TIMES-131.1)) ; SHIFT op
            (MINUS (shift 'MINUS-165.2)) ; SHIFT op
            (PLUS (shift 'PLUS-166.2)) ; SHIFT op
            (NUMBER (shift 'NUMBER-121.1)) ; SHIFT op
            (TRUE (shift 'TRUE-122.1)) ; SHIFT op
            (FALSE (shift 'FALSE-123.1)) ; SHIFT op
            (VAR (shift 'VAR-171.1)) ; SHIFT op
            (URI-TAIL-CAST (shift 'URI-TAIL-CAST-177.3)) ; SHIFT op
            (PREF (shift 'PREF-118.2-176.4)) ; SHIFT op
            (URI-CAST (shift 'URI-CAST-175.3)) ; SHIFT op
            (NOT (shift 'NOT-169.2)) ; SHIFT op
            (LEFT-PAR (shift 'LEFT-PAR-167.3)) ; SHIFT op
            (UNDERSCORE (shift 'UNDERSCORE-114.2)) ; SHIFT op
            (STRING (shift 'STRING-126.1-127.2)) ; SHIFT op
            (A (shift 'A-120.1)) ; SHIFT op
            (URI-TAIL (shift 'URI-TAIL-119.1)) ; SHIFT op
            (URI (shift 'URI-117.1)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(ID TIMES MINUS PLUS NUMBER TRUE FALSE VAR URI-TAIL-CAST PREF URI-CAST NOT LEFT-PAR UNDERSCORE STRING A URI-TAIL URI) input))))
         (<EXPR>-128.3-167.2
           (selectq (car input)
            (RIGHT-PAR (shift 'RIGHT-PAR-167.1)) ; SHIFT op
            (OR (shift 'OR-128.2)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(RIGHT-PAR OR) input))))
         (<UNARY-EXPR>-158.3-159.3-160.3-161.3-162.3-163.1
           (selectq (car input)
            ((FOR RIGHT-BRACKET A-OR AMINUS APLUS MINUS PLUS RIGHT-BRACE LIMIT OFFSET ORDER HAVING GROUP VALUES LEFT-BRACE WHERE FROM NOT IN AGREATER-OR-EQUAL ALESS-OR-EQUAL AGREATER ALESS AEQUAL ANOT-EQUAL GREATER-OR-EQUAL LESS-OR-EQUAL GREATER LESS EQUAL NOT-EQUAL COMMA AND RIGHT-PAR OR AS COLON -! SEMICOLON) ; REDUCE(163) op
              (setq input (cons '<MULT-EXPR> (nth 0 (reduce 1)))))
            (A-AND (shift 'A-AND-162.2)) ; SHIFT op
            (ADIVIDE (shift 'ADIVIDE-161.2)) ; SHIFT op
            (ATIMES (shift 'ATIMES-160.2)) ; SHIFT op
            (DIVIDE (shift 'DIVIDE-159.2)) ; SHIFT op
            (TIMES (shift 'TIMES-158.2)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(FOR RIGHT-BRACKET A-OR AMINUS APLUS MINUS PLUS RIGHT-BRACE LIMIT OFFSET ORDER HAVING GROUP VALUES LEFT-BRACE WHERE FROM NOT IN AGREATER-OR-EQUAL ALESS-OR-EQUAL AGREATER ALESS AEQUAL ANOT-EQUAL GREATER-OR-EQUAL LESS-OR-EQUAL GREATER LESS EQUAL NOT-EQUAL COMMA AND RIGHT-PAR OR AS COLON -! SEMICOLON A-AND ADIVIDE ATIMES DIVIDE TIMES) input))))
         (A-AND-162.2
           (selectq (car input)
            (<UNARY-EXPR> (shift '<UNARY-EXPR>-162.1)) ; REDUCE completion
            (<LITERAL> (shift '<LITERAL>-168.1)) ; REDUCE completion
            (<SIMPLE-FNCALL> (shift '<SIMPLE-FNCALL>-174.1)) ; REDUCE completion
            (<VAR-OR-FNCALL> (shift '<VAR-OR-FNCALL>-170.1-178.4)) ; REDUCE completion
            (<FNCALL> (shift '<FNCALL>-172.1)) ; REDUCE completion
            (<STRING-LANG> (shift '<STRING-LANG>-124.1-125.3)) ; REDUCE completion
            (<PRIM-EXPR> (shift '<PRIM-EXPR>-164.1)) ; REDUCE completion
            (MINUS (shift 'MINUS-165.2)) ; SHIFT op
            (PLUS (shift 'PLUS-166.2)) ; SHIFT op
            (NUMBER (shift 'NUMBER-121.1)) ; SHIFT op
            (TRUE (shift 'TRUE-122.1)) ; SHIFT op
            (FALSE (shift 'FALSE-123.1)) ; SHIFT op
            (VAR (shift 'VAR-171.1)) ; SHIFT op
            (ID (shift 'ID-173.2)) ; SHIFT op
            (URI-TAIL-CAST (shift 'URI-TAIL-CAST-177.3)) ; SHIFT op
            (PREF (shift 'PREF-176.4)) ; SHIFT op
            (URI-CAST (shift 'URI-CAST-175.3)) ; SHIFT op
            (NOT (shift 'NOT-169.2)) ; SHIFT op
            (LEFT-PAR (shift 'LEFT-PAR-167.3)) ; SHIFT op
            (STRING (shift 'STRING-126.1-127.2)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(MINUS PLUS NUMBER TRUE FALSE VAR ID URI-TAIL-CAST PREF URI-CAST NOT LEFT-PAR STRING) input))))
         (ADIVIDE-161.2
           (selectq (car input)
            (<UNARY-EXPR> (shift '<UNARY-EXPR>-161.1)) ; REDUCE completion
            (<LITERAL> (shift '<LITERAL>-168.1)) ; REDUCE completion
            (<SIMPLE-FNCALL> (shift '<SIMPLE-FNCALL>-174.1)) ; REDUCE completion
            (<VAR-OR-FNCALL> (shift '<VAR-OR-FNCALL>-170.1-178.4)) ; REDUCE completion
            (<FNCALL> (shift '<FNCALL>-172.1)) ; REDUCE completion
            (<STRING-LANG> (shift '<STRING-LANG>-124.1-125.3)) ; REDUCE completion
            (<PRIM-EXPR> (shift '<PRIM-EXPR>-164.1)) ; REDUCE completion
            (MINUS (shift 'MINUS-165.2)) ; SHIFT op
            (PLUS (shift 'PLUS-166.2)) ; SHIFT op
            (NUMBER (shift 'NUMBER-121.1)) ; SHIFT op
            (TRUE (shift 'TRUE-122.1)) ; SHIFT op
            (FALSE (shift 'FALSE-123.1)) ; SHIFT op
            (VAR (shift 'VAR-171.1)) ; SHIFT op
            (ID (shift 'ID-173.2)) ; SHIFT op
            (URI-TAIL-CAST (shift 'URI-TAIL-CAST-177.3)) ; SHIFT op
            (PREF (shift 'PREF-176.4)) ; SHIFT op
            (URI-CAST (shift 'URI-CAST-175.3)) ; SHIFT op
            (NOT (shift 'NOT-169.2)) ; SHIFT op
            (LEFT-PAR (shift 'LEFT-PAR-167.3)) ; SHIFT op
            (STRING (shift 'STRING-126.1-127.2)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(MINUS PLUS NUMBER TRUE FALSE VAR ID URI-TAIL-CAST PREF URI-CAST NOT LEFT-PAR STRING) input))))
         (ATIMES-160.2
           (selectq (car input)
            (<UNARY-EXPR> (shift '<UNARY-EXPR>-160.1)) ; REDUCE completion
            (<LITERAL> (shift '<LITERAL>-168.1)) ; REDUCE completion
            (<SIMPLE-FNCALL> (shift '<SIMPLE-FNCALL>-174.1)) ; REDUCE completion
            (<VAR-OR-FNCALL> (shift '<VAR-OR-FNCALL>-170.1-178.4)) ; REDUCE completion
            (<FNCALL> (shift '<FNCALL>-172.1)) ; REDUCE completion
            (<STRING-LANG> (shift '<STRING-LANG>-124.1-125.3)) ; REDUCE completion
            (<PRIM-EXPR> (shift '<PRIM-EXPR>-164.1)) ; REDUCE completion
            (MINUS (shift 'MINUS-165.2)) ; SHIFT op
            (PLUS (shift 'PLUS-166.2)) ; SHIFT op
            (NUMBER (shift 'NUMBER-121.1)) ; SHIFT op
            (TRUE (shift 'TRUE-122.1)) ; SHIFT op
            (FALSE (shift 'FALSE-123.1)) ; SHIFT op
            (VAR (shift 'VAR-171.1)) ; SHIFT op
            (ID (shift 'ID-173.2)) ; SHIFT op
            (URI-TAIL-CAST (shift 'URI-TAIL-CAST-177.3)) ; SHIFT op
            (PREF (shift 'PREF-176.4)) ; SHIFT op
            (URI-CAST (shift 'URI-CAST-175.3)) ; SHIFT op
            (NOT (shift 'NOT-169.2)) ; SHIFT op
            (LEFT-PAR (shift 'LEFT-PAR-167.3)) ; SHIFT op
            (STRING (shift 'STRING-126.1-127.2)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(MINUS PLUS NUMBER TRUE FALSE VAR ID URI-TAIL-CAST PREF URI-CAST NOT LEFT-PAR STRING) input))))
         (DIVIDE-159.2
           (selectq (car input)
            (<UNARY-EXPR> (shift '<UNARY-EXPR>-159.1)) ; REDUCE completion
            (<LITERAL> (shift '<LITERAL>-168.1)) ; REDUCE completion
            (<SIMPLE-FNCALL> (shift '<SIMPLE-FNCALL>-174.1)) ; REDUCE completion
            (<VAR-OR-FNCALL> (shift '<VAR-OR-FNCALL>-170.1-178.4)) ; REDUCE completion
            (<FNCALL> (shift '<FNCALL>-172.1)) ; REDUCE completion
            (<STRING-LANG> (shift '<STRING-LANG>-124.1-125.3)) ; REDUCE completion
            (<PRIM-EXPR> (shift '<PRIM-EXPR>-164.1)) ; REDUCE completion
            (MINUS (shift 'MINUS-165.2)) ; SHIFT op
            (PLUS (shift 'PLUS-166.2)) ; SHIFT op
            (NUMBER (shift 'NUMBER-121.1)) ; SHIFT op
            (TRUE (shift 'TRUE-122.1)) ; SHIFT op
            (FALSE (shift 'FALSE-123.1)) ; SHIFT op
            (VAR (shift 'VAR-171.1)) ; SHIFT op
            (ID (shift 'ID-173.2)) ; SHIFT op
            (URI-TAIL-CAST (shift 'URI-TAIL-CAST-177.3)) ; SHIFT op
            (PREF (shift 'PREF-176.4)) ; SHIFT op
            (URI-CAST (shift 'URI-CAST-175.3)) ; SHIFT op
            (NOT (shift 'NOT-169.2)) ; SHIFT op
            (LEFT-PAR (shift 'LEFT-PAR-167.3)) ; SHIFT op
            (STRING (shift 'STRING-126.1-127.2)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(MINUS PLUS NUMBER TRUE FALSE VAR ID URI-TAIL-CAST PREF URI-CAST NOT LEFT-PAR STRING) input))))
         (TIMES-158.2
           (selectq (car input)
            (<UNARY-EXPR> (shift '<UNARY-EXPR>-158.1)) ; REDUCE completion
            (<LITERAL> (shift '<LITERAL>-168.1)) ; REDUCE completion
            (<SIMPLE-FNCALL> (shift '<SIMPLE-FNCALL>-174.1)) ; REDUCE completion
            (<VAR-OR-FNCALL> (shift '<VAR-OR-FNCALL>-170.1-178.4)) ; REDUCE completion
            (<FNCALL> (shift '<FNCALL>-172.1)) ; REDUCE completion
            (<STRING-LANG> (shift '<STRING-LANG>-124.1-125.3)) ; REDUCE completion
            (<PRIM-EXPR> (shift '<PRIM-EXPR>-164.1)) ; REDUCE completion
            (MINUS (shift 'MINUS-165.2)) ; SHIFT op
            (PLUS (shift 'PLUS-166.2)) ; SHIFT op
            (NUMBER (shift 'NUMBER-121.1)) ; SHIFT op
            (TRUE (shift 'TRUE-122.1)) ; SHIFT op
            (FALSE (shift 'FALSE-123.1)) ; SHIFT op
            (VAR (shift 'VAR-171.1)) ; SHIFT op
            (ID (shift 'ID-173.2)) ; SHIFT op
            (URI-TAIL-CAST (shift 'URI-TAIL-CAST-177.3)) ; SHIFT op
            (PREF (shift 'PREF-176.4)) ; SHIFT op
            (URI-CAST (shift 'URI-CAST-175.3)) ; SHIFT op
            (NOT (shift 'NOT-169.2)) ; SHIFT op
            (LEFT-PAR (shift 'LEFT-PAR-167.3)) ; SHIFT op
            (STRING (shift 'STRING-126.1-127.2)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(MINUS PLUS NUMBER TRUE FALSE VAR ID URI-TAIL-CAST PREF URI-CAST NOT LEFT-PAR STRING) input))))
         (UNDERSCORE-114.2
           (selectq (car input)
            (URI-TAIL (shift 'URI-TAIL-114.1)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(URI-TAIL) input))))
         (STRING-126.1-127.2
           (selectq (car input)
            ((FOR RIGHT-BRACKET A-AND ADIVIDE ATIMES DIVIDE TIMES COLON COMMA OR RIGHT-PAR AS AND NOT IN AGREATER-OR-EQUAL ALESS-OR-EQUAL AGREATER ALESS AEQUAL ANOT-EQUAL GREATER-OR-EQUAL LESS-OR-EQUAL GREATER LESS EQUAL NOT-EQUAL RIGHT-BRACE LIMIT OFFSET ORDER HAVING GROUP VALUES LEFT-BRACE WHERE FROM A-OR AMINUS APLUS MINUS PLUS DOUBLE-CAP STRING NUMBER TRUE FALSE URI PREF URI-TAIL A UNDERSCORE VAR LEFT-PAR LEFT-BRACKET GRAPH FILTER OPTIONAL BIND DOT SEMICOLON CAP UNDEF -! SEMICOLON) ; REDUCE(126) op
              (setq input (cons '<STRING-LANG> (apply #'(LAMBDA (A) (LIST (QUOTE USTR) A NIL)) (reduce 1)))))
            (AT-ID (shift 'AT-ID-127.1)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(FOR RIGHT-BRACKET A-AND ADIVIDE ATIMES DIVIDE TIMES COLON COMMA OR RIGHT-PAR AS AND NOT IN AGREATER-OR-EQUAL ALESS-OR-EQUAL AGREATER ALESS AEQUAL ANOT-EQUAL GREATER-OR-EQUAL LESS-OR-EQUAL GREATER LESS EQUAL NOT-EQUAL RIGHT-BRACE LIMIT OFFSET ORDER HAVING GROUP VALUES LEFT-BRACE WHERE FROM A-OR AMINUS APLUS MINUS PLUS DOUBLE-CAP STRING NUMBER TRUE FALSE URI PREF URI-TAIL A UNDERSCORE VAR LEFT-PAR LEFT-BRACKET GRAPH FILTER OPTIONAL BIND DOT SEMICOLON CAP UNDEF -! SEMICOLON AT-ID) input))))
         (CONSTRUCT-18.2
           (selectq (car input)
            (<BLOCK> (shift '<BLOCK>-18.1)) ; REDUCE completion
            (LEFT-BRACE (shift 'LEFT-BRACE-60.3)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(LEFT-BRACE) input))))
         (LEFT-BRACE-60.3
           (selectq (car input)
            (<CONDS> (shift '<CONDS>-60.2)) ; REDUCE completion
            (<NODE> (shift '<NODE>-87.2)) ; REDUCE completion
            (<RDF-TERM> (shift '<RDF-TERM>-112.1)) ; REDUCE completion
            (<LITERAL> (shift '<LITERAL>-116.1)) ; REDUCE completion
            (<STRING-LANG> (shift '<STRING-LANG>-124.1-125.3)) ; REDUCE completion
            (<RESOURCE> (shift '<RESOURCE>-115.1)) ; REDUCE completion
            (<OBJECT> (shift '<OBJECT>-106.1)) ; REDUCE completion
            (<VALUES-CLAUSE> (shift '<VALUES-CLAUSE>-72.1)) ; REDUCE completion
            (<GRAPH-SPECIFIER> (shift '<GRAPH-SPECIFIER>-74.2)) ; REDUCE completion
            (<UNION> (shift '<UNION>-70.1-78.3)) ; REDUCE completion
            (<BLOCK> (shift '<BLOCK>-77.3)) ; REDUCE completion
            (<NONTRIPLES> (shift '<NONTRIPLES>-63.2)) ; REDUCE completion
            (<TRIPLES> (shift '<TRIPLES>-62.2)) ; REDUCE completion
            ((RIGHT-BRACE) ; REDUCE(61) op
              (setq input (cons '<CONDS> (apply #'(LAMBDA NIL NIL) (reduce 0)))))
            (DOT (shift 'DOT-64.2)) ; SHIFT op
            (LEFT-BRACE (shift 'LEFT-BRACE-60.3-73.3)) ; SHIFT op
            (VALUES (shift 'VALUES-79.5-80.7)) ; SHIFT op
            (GRAPH (shift 'GRAPH-75.2-76.2)) ; SHIFT op
            (BIND (shift 'BIND-71.2)) ; SHIFT op
            (OPTIONAL (shift 'OPTIONAL-69.2)) ; SHIFT op
            (FILTER (shift 'FILTER-65.4-66.2-67.3-68.4)) ; SHIFT op
            (LEFT-BRACKET (shift 'LEFT-BRACKET-107.3-108.2)) ; SHIFT op
            (LEFT-PAR (shift 'LEFT-PAR-109.3)) ; SHIFT op
            (UNDERSCORE (shift 'UNDERSCORE-114.2)) ; SHIFT op
            (A (shift 'A-120.1)) ; SHIFT op
            (URI-TAIL (shift 'URI-TAIL-119.1)) ; SHIFT op
            (PREF (shift 'PREF-118.2)) ; SHIFT op
            (URI (shift 'URI-117.1)) ; SHIFT op
            (NUMBER (shift 'NUMBER-121.1)) ; SHIFT op
            (TRUE (shift 'TRUE-122.1)) ; SHIFT op
            (FALSE (shift 'FALSE-123.1)) ; SHIFT op
            (STRING (shift 'STRING-126.1-127.2)) ; SHIFT op
            (VAR (shift 'VAR-113.1)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(RIGHT-BRACE DOT LEFT-BRACE VALUES GRAPH BIND OPTIONAL FILTER LEFT-BRACKET LEFT-PAR UNDERSCORE A URI-TAIL PREF URI NUMBER TRUE FALSE STRING VAR) input))))
         (<TRIPLES>-62.2
           (selectq (car input)
            (<CONDS> (shift '<CONDS>-62.1)) ; REDUCE completion
            (<NODE> (shift '<NODE>-87.2)) ; REDUCE completion
            (<RDF-TERM> (shift '<RDF-TERM>-112.1)) ; REDUCE completion
            (<LITERAL> (shift '<LITERAL>-116.1)) ; REDUCE completion
            (<STRING-LANG> (shift '<STRING-LANG>-124.1-125.3)) ; REDUCE completion
            (<RESOURCE> (shift '<RESOURCE>-115.1)) ; REDUCE completion
            (<OBJECT> (shift '<OBJECT>-106.1)) ; REDUCE completion
            (<VALUES-CLAUSE> (shift '<VALUES-CLAUSE>-72.1)) ; REDUCE completion
            (<GRAPH-SPECIFIER> (shift '<GRAPH-SPECIFIER>-74.2)) ; REDUCE completion
            (<UNION> (shift '<UNION>-70.1-78.3)) ; REDUCE completion
            (<BLOCK> (shift '<BLOCK>-77.3)) ; REDUCE completion
            (<NONTRIPLES> (shift '<NONTRIPLES>-63.2)) ; REDUCE completion
            (<TRIPLES> (shift '<TRIPLES>-62.2)) ; REDUCE completion
            ((RIGHT-BRACE) ; REDUCE(61) op
              (setq input (cons '<CONDS> (apply #'(LAMBDA NIL NIL) (reduce 0)))))
            (DOT (shift 'DOT-64.2)) ; SHIFT op
            (LEFT-BRACE (shift 'LEFT-BRACE-60.3-73.3)) ; SHIFT op
            (VALUES (shift 'VALUES-79.5-80.7)) ; SHIFT op
            (GRAPH (shift 'GRAPH-75.2-76.2)) ; SHIFT op
            (BIND (shift 'BIND-71.2)) ; SHIFT op
            (OPTIONAL (shift 'OPTIONAL-69.2)) ; SHIFT op
            (FILTER (shift 'FILTER-65.4-66.2-67.3-68.4)) ; SHIFT op
            (LEFT-BRACKET (shift 'LEFT-BRACKET-107.3-108.2)) ; SHIFT op
            (LEFT-PAR (shift 'LEFT-PAR-109.3)) ; SHIFT op
            (UNDERSCORE (shift 'UNDERSCORE-114.2)) ; SHIFT op
            (A (shift 'A-120.1)) ; SHIFT op
            (URI-TAIL (shift 'URI-TAIL-119.1)) ; SHIFT op
            (PREF (shift 'PREF-118.2)) ; SHIFT op
            (URI (shift 'URI-117.1)) ; SHIFT op
            (NUMBER (shift 'NUMBER-121.1)) ; SHIFT op
            (TRUE (shift 'TRUE-122.1)) ; SHIFT op
            (FALSE (shift 'FALSE-123.1)) ; SHIFT op
            (STRING (shift 'STRING-126.1-127.2)) ; SHIFT op
            (VAR (shift 'VAR-113.1)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(RIGHT-BRACE DOT LEFT-BRACE VALUES GRAPH BIND OPTIONAL FILTER LEFT-BRACKET LEFT-PAR UNDERSCORE A URI-TAIL PREF URI NUMBER TRUE FALSE STRING VAR) input))))
         (<NONTRIPLES>-63.2
           (selectq (car input)
            (<CONDS> (shift '<CONDS>-63.1)) ; REDUCE completion
            (<NODE> (shift '<NODE>-87.2)) ; REDUCE completion
            (<RDF-TERM> (shift '<RDF-TERM>-112.1)) ; REDUCE completion
            (<LITERAL> (shift '<LITERAL>-116.1)) ; REDUCE completion
            (<STRING-LANG> (shift '<STRING-LANG>-124.1-125.3)) ; REDUCE completion
            (<RESOURCE> (shift '<RESOURCE>-115.1)) ; REDUCE completion
            (<OBJECT> (shift '<OBJECT>-106.1)) ; REDUCE completion
            (<VALUES-CLAUSE> (shift '<VALUES-CLAUSE>-72.1)) ; REDUCE completion
            (<GRAPH-SPECIFIER> (shift '<GRAPH-SPECIFIER>-74.2)) ; REDUCE completion
            (<UNION> (shift '<UNION>-70.1-78.3)) ; REDUCE completion
            (<BLOCK> (shift '<BLOCK>-77.3)) ; REDUCE completion
            (<NONTRIPLES> (shift '<NONTRIPLES>-63.2)) ; REDUCE completion
            (<TRIPLES> (shift '<TRIPLES>-62.2)) ; REDUCE completion
            ((RIGHT-BRACE) ; REDUCE(61) op
              (setq input (cons '<CONDS> (apply #'(LAMBDA NIL NIL) (reduce 0)))))
            (DOT (shift 'DOT-64.2)) ; SHIFT op
            (LEFT-BRACE (shift 'LEFT-BRACE-60.3-73.3)) ; SHIFT op
            (VALUES (shift 'VALUES-79.5-80.7)) ; SHIFT op
            (GRAPH (shift 'GRAPH-75.2-76.2)) ; SHIFT op
            (BIND (shift 'BIND-71.2)) ; SHIFT op
            (OPTIONAL (shift 'OPTIONAL-69.2)) ; SHIFT op
            (FILTER (shift 'FILTER-65.4-66.2-67.3-68.4)) ; SHIFT op
            (LEFT-BRACKET (shift 'LEFT-BRACKET-107.3-108.2)) ; SHIFT op
            (LEFT-PAR (shift 'LEFT-PAR-109.3)) ; SHIFT op
            (UNDERSCORE (shift 'UNDERSCORE-114.2)) ; SHIFT op
            (A (shift 'A-120.1)) ; SHIFT op
            (URI-TAIL (shift 'URI-TAIL-119.1)) ; SHIFT op
            (PREF (shift 'PREF-118.2)) ; SHIFT op
            (URI (shift 'URI-117.1)) ; SHIFT op
            (NUMBER (shift 'NUMBER-121.1)) ; SHIFT op
            (TRUE (shift 'TRUE-122.1)) ; SHIFT op
            (FALSE (shift 'FALSE-123.1)) ; SHIFT op
            (STRING (shift 'STRING-126.1-127.2)) ; SHIFT op
            (VAR (shift 'VAR-113.1)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(RIGHT-BRACE DOT LEFT-BRACE VALUES GRAPH BIND OPTIONAL FILTER LEFT-BRACKET LEFT-PAR UNDERSCORE A URI-TAIL PREF URI NUMBER TRUE FALSE STRING VAR) input))))
         (DOT-64.2
           (selectq (car input)
            (<CONDS> (shift '<CONDS>-64.1)) ; REDUCE completion
            (<NODE> (shift '<NODE>-87.2)) ; REDUCE completion
            (<RDF-TERM> (shift '<RDF-TERM>-112.1)) ; REDUCE completion
            (<LITERAL> (shift '<LITERAL>-116.1)) ; REDUCE completion
            (<STRING-LANG> (shift '<STRING-LANG>-124.1-125.3)) ; REDUCE completion
            (<RESOURCE> (shift '<RESOURCE>-115.1)) ; REDUCE completion
            (<OBJECT> (shift '<OBJECT>-106.1)) ; REDUCE completion
            (<VALUES-CLAUSE> (shift '<VALUES-CLAUSE>-72.1)) ; REDUCE completion
            (<GRAPH-SPECIFIER> (shift '<GRAPH-SPECIFIER>-74.2)) ; REDUCE completion
            (<UNION> (shift '<UNION>-70.1-78.3)) ; REDUCE completion
            (<BLOCK> (shift '<BLOCK>-77.3)) ; REDUCE completion
            (<NONTRIPLES> (shift '<NONTRIPLES>-63.2)) ; REDUCE completion
            (<TRIPLES> (shift '<TRIPLES>-62.2)) ; REDUCE completion
            ((RIGHT-BRACE) ; REDUCE(61) op
              (setq input (cons '<CONDS> (apply #'(LAMBDA NIL NIL) (reduce 0)))))
            (DOT (shift 'DOT-64.2)) ; SHIFT op
            (LEFT-BRACE (shift 'LEFT-BRACE-60.3-73.3)) ; SHIFT op
            (VALUES (shift 'VALUES-79.5-80.7)) ; SHIFT op
            (GRAPH (shift 'GRAPH-75.2-76.2)) ; SHIFT op
            (BIND (shift 'BIND-71.2)) ; SHIFT op
            (OPTIONAL (shift 'OPTIONAL-69.2)) ; SHIFT op
            (FILTER (shift 'FILTER-65.4-66.2-67.3-68.4)) ; SHIFT op
            (LEFT-BRACKET (shift 'LEFT-BRACKET-107.3-108.2)) ; SHIFT op
            (LEFT-PAR (shift 'LEFT-PAR-109.3)) ; SHIFT op
            (UNDERSCORE (shift 'UNDERSCORE-114.2)) ; SHIFT op
            (A (shift 'A-120.1)) ; SHIFT op
            (URI-TAIL (shift 'URI-TAIL-119.1)) ; SHIFT op
            (PREF (shift 'PREF-118.2)) ; SHIFT op
            (URI (shift 'URI-117.1)) ; SHIFT op
            (NUMBER (shift 'NUMBER-121.1)) ; SHIFT op
            (TRUE (shift 'TRUE-122.1)) ; SHIFT op
            (FALSE (shift 'FALSE-123.1)) ; SHIFT op
            (STRING (shift 'STRING-126.1-127.2)) ; SHIFT op
            (VAR (shift 'VAR-113.1)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(RIGHT-BRACE DOT LEFT-BRACE VALUES GRAPH BIND OPTIONAL FILTER LEFT-BRACKET LEFT-PAR UNDERSCORE A URI-TAIL PREF URI NUMBER TRUE FALSE STRING VAR) input))))
         (<BLOCK>-77.3
           (selectq (car input)
            (UNION (shift 'UNION-77.2)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(UNION) input))))
         (UNION-77.2
           (selectq (car input)
            (<BLOCK> (shift '<BLOCK>-77.1)) ; REDUCE completion
            (LEFT-BRACE (shift 'LEFT-BRACE-60.3)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(LEFT-BRACE) input))))
         (<UNION>-70.1-78.3
           (selectq (car input)
            ((STRING NUMBER TRUE FALSE URI PREF URI-TAIL A UNDERSCORE VAR LEFT-BRACKET LEFT-PAR VALUES GRAPH FILTER OPTIONAL BIND LEFT-BRACE DOT RIGHT-BRACE) ; REDUCE(70) op
              (setq input (cons '<NONTRIPLES> (nth 0 (reduce 1)))))
            (UNION (shift 'UNION-78.2)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(STRING NUMBER TRUE FALSE URI PREF URI-TAIL A UNDERSCORE VAR LEFT-BRACKET LEFT-PAR VALUES GRAPH FILTER OPTIONAL BIND LEFT-BRACE DOT RIGHT-BRACE UNION) input))))
         (UNION-78.2
           (selectq (car input)
            (<BLOCK> (shift '<BLOCK>-78.1)) ; REDUCE completion
            (LEFT-BRACE (shift 'LEFT-BRACE-60.3)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(LEFT-BRACE) input))))
         (LEFT-BRACE-60.3-73.3
           (selectq (car input)
            (<CONDS> (shift '<CONDS>-60.2)) ; REDUCE completion
            (<NODE> (shift '<NODE>-87.2)) ; REDUCE completion
            (<RDF-TERM> (shift '<RDF-TERM>-112.1)) ; REDUCE completion
            (<LITERAL> (shift '<LITERAL>-116.1)) ; REDUCE completion
            (<STRING-LANG> (shift '<STRING-LANG>-124.1-125.3)) ; REDUCE completion
            (<RESOURCE> (shift '<RESOURCE>-115.1)) ; REDUCE completion
            (<OBJECT> (shift '<OBJECT>-106.1)) ; REDUCE completion
            (<VALUES-CLAUSE> (shift '<VALUES-CLAUSE>-72.1)) ; REDUCE completion
            (<GRAPH-SPECIFIER> (shift '<GRAPH-SPECIFIER>-74.2)) ; REDUCE completion
            (<UNION> (shift '<UNION>-70.1-78.3)) ; REDUCE completion
            (<BLOCK> (shift '<BLOCK>-77.3)) ; REDUCE completion
            (<NONTRIPLES> (shift '<NONTRIPLES>-63.2)) ; REDUCE completion
            (<TRIPLES> (shift '<TRIPLES>-62.2)) ; REDUCE completion
            (<QUERY> (shift '<QUERY>-20.3-21.4-22.3-23.2-24.2-25.4-26.3-27.4-28.3-29.3-73.2)) ; REDUCE completion
            ((RIGHT-BRACE) ; REDUCE(61) op
              (setq input (cons '<CONDS> (apply #'(LAMBDA NIL NIL) (reduce 0)))))
            (SELECT (shift 'SELECT-14.2-15.3-16.2-17.3)) ; SHIFT op
            (CONSTRUCT (shift 'CONSTRUCT-18.2)) ; SHIFT op
            (ASK (shift 'ASK-19.2)) ; SHIFT op
            (DOT (shift 'DOT-64.2)) ; SHIFT op
            (LEFT-BRACE (shift 'LEFT-BRACE-60.3-73.3)) ; SHIFT op
            (VALUES (shift 'VALUES-79.5-80.7)) ; SHIFT op
            (GRAPH (shift 'GRAPH-75.2-76.2)) ; SHIFT op
            (BIND (shift 'BIND-71.2)) ; SHIFT op
            (OPTIONAL (shift 'OPTIONAL-69.2)) ; SHIFT op
            (FILTER (shift 'FILTER-65.4-66.2-67.3-68.4)) ; SHIFT op
            (LEFT-BRACKET (shift 'LEFT-BRACKET-107.3-108.2)) ; SHIFT op
            (LEFT-PAR (shift 'LEFT-PAR-109.3)) ; SHIFT op
            (UNDERSCORE (shift 'UNDERSCORE-114.2)) ; SHIFT op
            (A (shift 'A-120.1)) ; SHIFT op
            (URI-TAIL (shift 'URI-TAIL-119.1)) ; SHIFT op
            (PREF (shift 'PREF-118.2)) ; SHIFT op
            (URI (shift 'URI-117.1)) ; SHIFT op
            (NUMBER (shift 'NUMBER-121.1)) ; SHIFT op
            (TRUE (shift 'TRUE-122.1)) ; SHIFT op
            (FALSE (shift 'FALSE-123.1)) ; SHIFT op
            (STRING (shift 'STRING-126.1-127.2)) ; SHIFT op
            (VAR (shift 'VAR-113.1)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(RIGHT-BRACE SELECT CONSTRUCT ASK DOT LEFT-BRACE VALUES GRAPH BIND OPTIONAL FILTER LEFT-BRACKET LEFT-PAR UNDERSCORE A URI-TAIL PREF URI NUMBER TRUE FALSE STRING VAR) input))))
         (<QUERY>-20.3-21.4-22.3-23.2-24.2-25.4-26.3-27.4-28.3-29.3-73.2
           (selectq (car input)
            (<BLOCK> (shift '<BLOCK>-23.1)) ; REDUCE completion
            (<VALUES-CLAUSE> (shift '<VALUES-CLAUSE>-24.1)) ; REDUCE completion
            (RIGHT-BRACE (shift 'RIGHT-BRACE-73.1)) ; SHIFT op
            (LIMIT (shift 'LIMIT-29.2)) ; SHIFT op
            (OFFSET (shift 'OFFSET-28.2)) ; SHIFT op
            (ORDER (shift 'ORDER-27.3)) ; SHIFT op
            (HAVING (shift 'HAVING-26.2)) ; SHIFT op
            (GROUP (shift 'GROUP-25.3)) ; SHIFT op
            (VALUES (shift 'VALUES-79.5-80.7)) ; SHIFT op
            (LEFT-BRACE (shift 'LEFT-BRACE-60.3)) ; SHIFT op
            (WHERE (shift 'WHERE-22.2)) ; SHIFT op
            (FROM (shift 'FROM-20.2-21.3)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(RIGHT-BRACE LIMIT OFFSET ORDER HAVING GROUP VALUES LEFT-BRACE WHERE FROM) input))))
         (LIMIT-29.2
           (selectq (car input)
            (<NUM-EXPR> (shift '<NUM-EXPR>-29.1)) ; REDUCE completion
            (<UNARY-EXPR> (shift '<UNARY-EXPR>-158.3-159.3-160.3-161.3-162.3-163.1)) ; REDUCE completion
            (<LITERAL> (shift '<LITERAL>-168.1)) ; REDUCE completion
            (<SIMPLE-FNCALL> (shift '<SIMPLE-FNCALL>-174.1)) ; REDUCE completion
            (<VAR-OR-FNCALL> (shift '<VAR-OR-FNCALL>-170.1-178.4)) ; REDUCE completion
            (<FNCALL> (shift '<FNCALL>-172.1)) ; REDUCE completion
            (<STRING-LANG> (shift '<STRING-LANG>-124.1-125.3)) ; REDUCE completion
            (<PRIM-EXPR> (shift '<PRIM-EXPR>-164.1)) ; REDUCE completion
            (<MULT-EXPR> (shift '<MULT-EXPR>-152.3-153.3-154.3-155.3-156.3-157.1)) ; REDUCE completion
            (MINUS (shift 'MINUS-165.2)) ; SHIFT op
            (PLUS (shift 'PLUS-166.2)) ; SHIFT op
            (NUMBER (shift 'NUMBER-121.1)) ; SHIFT op
            (TRUE (shift 'TRUE-122.1)) ; SHIFT op
            (FALSE (shift 'FALSE-123.1)) ; SHIFT op
            (VAR (shift 'VAR-171.1)) ; SHIFT op
            (ID (shift 'ID-173.2)) ; SHIFT op
            (URI-TAIL-CAST (shift 'URI-TAIL-CAST-177.3)) ; SHIFT op
            (PREF (shift 'PREF-176.4)) ; SHIFT op
            (URI-CAST (shift 'URI-CAST-175.3)) ; SHIFT op
            (NOT (shift 'NOT-169.2)) ; SHIFT op
            (LEFT-PAR (shift 'LEFT-PAR-167.3)) ; SHIFT op
            (STRING (shift 'STRING-126.1-127.2)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(MINUS PLUS NUMBER TRUE FALSE VAR ID URI-TAIL-CAST PREF URI-CAST NOT LEFT-PAR STRING) input))))
         (OFFSET-28.2
           (selectq (car input)
            (<NUM-EXPR> (shift '<NUM-EXPR>-28.1)) ; REDUCE completion
            (<UNARY-EXPR> (shift '<UNARY-EXPR>-158.3-159.3-160.3-161.3-162.3-163.1)) ; REDUCE completion
            (<LITERAL> (shift '<LITERAL>-168.1)) ; REDUCE completion
            (<SIMPLE-FNCALL> (shift '<SIMPLE-FNCALL>-174.1)) ; REDUCE completion
            (<VAR-OR-FNCALL> (shift '<VAR-OR-FNCALL>-170.1-178.4)) ; REDUCE completion
            (<FNCALL> (shift '<FNCALL>-172.1)) ; REDUCE completion
            (<STRING-LANG> (shift '<STRING-LANG>-124.1-125.3)) ; REDUCE completion
            (<PRIM-EXPR> (shift '<PRIM-EXPR>-164.1)) ; REDUCE completion
            (<MULT-EXPR> (shift '<MULT-EXPR>-152.3-153.3-154.3-155.3-156.3-157.1)) ; REDUCE completion
            (MINUS (shift 'MINUS-165.2)) ; SHIFT op
            (PLUS (shift 'PLUS-166.2)) ; SHIFT op
            (NUMBER (shift 'NUMBER-121.1)) ; SHIFT op
            (TRUE (shift 'TRUE-122.1)) ; SHIFT op
            (FALSE (shift 'FALSE-123.1)) ; SHIFT op
            (VAR (shift 'VAR-171.1)) ; SHIFT op
            (ID (shift 'ID-173.2)) ; SHIFT op
            (URI-TAIL-CAST (shift 'URI-TAIL-CAST-177.3)) ; SHIFT op
            (PREF (shift 'PREF-176.4)) ; SHIFT op
            (URI-CAST (shift 'URI-CAST-175.3)) ; SHIFT op
            (NOT (shift 'NOT-169.2)) ; SHIFT op
            (LEFT-PAR (shift 'LEFT-PAR-167.3)) ; SHIFT op
            (STRING (shift 'STRING-126.1-127.2)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(MINUS PLUS NUMBER TRUE FALSE VAR ID URI-TAIL-CAST PREF URI-CAST NOT LEFT-PAR STRING) input))))
         (ORDER-27.3
           (selectq (car input)
            (BY (shift 'BY-27.2)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(BY) input))))
         (BY-27.2
           (selectq (car input)
            (<ORDER-LIST> (shift '<ORDER-LIST>-27.1)) ; REDUCE completion
            (<ORDERED-VAR> (shift '<ORDERED-VAR>-49.1-50.2)) ; REDUCE completion
            (DESC (shift 'DESC-52.4)) ; SHIFT op
            (VAR (shift 'VAR-51.1)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(DESC VAR) input))))
         (<ORDERED-VAR>-49.1-50.2
           (selectq (car input)
            (<ORDER-LIST> (shift '<ORDER-LIST>-50.1)) ; REDUCE completion
            (<ORDERED-VAR> (shift '<ORDERED-VAR>-49.1-50.2)) ; REDUCE completion
            ((FOR RIGHT-BRACE LIMIT OFFSET ORDER HAVING GROUP VALUES LEFT-BRACE WHERE FROM -! SEMICOLON) ; REDUCE(49) op
              (setq input (cons '<ORDER-LIST> (apply #'(LAMBDA (A) (LIST A)) (reduce 1)))))
            (DESC (shift 'DESC-52.4)) ; SHIFT op
            (VAR (shift 'VAR-51.1)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(FOR RIGHT-BRACE LIMIT OFFSET ORDER HAVING GROUP VALUES LEFT-BRACE WHERE FROM -! SEMICOLON DESC VAR) input))))
         (DESC-52.4
           (selectq (car input)
            (LEFT-PAR (shift 'LEFT-PAR-52.3)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(LEFT-PAR) input))))
         (LEFT-PAR-52.3
           (selectq (car input)
            (VAR (shift 'VAR-52.2)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(VAR) input))))
         (VAR-52.2
           (selectq (car input)
            (RIGHT-PAR (shift 'RIGHT-PAR-52.1)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(RIGHT-PAR) input))))
         (HAVING-26.2
           (selectq (car input)
            (<REL-EXPR> (shift '<REL-EXPR>-133.1)) ; REDUCE completion
            (<NUM-EXPR> (shift '<NUM-EXPR>-150.1)) ; REDUCE completion
            (<RDF-TERM> (shift '<RDF-TERM>-151.1)) ; REDUCE completion
            (<RESOURCE> (shift '<RESOURCE>-115.1)) ; REDUCE completion
            (<UNARY-EXPR> (shift '<UNARY-EXPR>-158.3-159.3-160.3-161.3-162.3-163.1)) ; REDUCE completion
            (<LITERAL> (shift '<LITERAL>-168.1)) ; REDUCE completion
            (<SIMPLE-FNCALL> (shift '<SIMPLE-FNCALL>-174.1)) ; REDUCE completion
            (<VAR-OR-FNCALL> (shift '<VAR-OR-FNCALL>-170.1-178.4)) ; REDUCE completion
            (<FNCALL> (shift '<FNCALL>-172.1)) ; REDUCE completion
            (<STRING-LANG> (shift '<STRING-LANG>-124.1-125.3)) ; REDUCE completion
            (<PRIM-EXPR> (shift '<PRIM-EXPR>-164.1)) ; REDUCE completion
            (<MULT-EXPR> (shift '<MULT-EXPR>-152.3-153.3-154.3-155.3-156.3-157.1)) ; REDUCE completion
            (<NUM-EXPR-OR-URI> (shift '<NUM-EXPR-OR-URI>-134.1-135.3-136.3-137.4)) ; REDUCE completion
            (<CONJUNCTION> (shift '<CONJUNCTION>-129.1-132.3)) ; REDUCE completion
            (<EXPR> (shift '<EXPR>-26.1-128.3)) ; REDUCE completion
            (ID (shift 'ID-130.1-173.2)) ; SHIFT op
            (TIMES (shift 'TIMES-131.1)) ; SHIFT op
            (MINUS (shift 'MINUS-165.2)) ; SHIFT op
            (PLUS (shift 'PLUS-166.2)) ; SHIFT op
            (NUMBER (shift 'NUMBER-121.1)) ; SHIFT op
            (TRUE (shift 'TRUE-122.1)) ; SHIFT op
            (FALSE (shift 'FALSE-123.1)) ; SHIFT op
            (VAR (shift 'VAR-171.1)) ; SHIFT op
            (URI-TAIL-CAST (shift 'URI-TAIL-CAST-177.3)) ; SHIFT op
            (PREF (shift 'PREF-118.2-176.4)) ; SHIFT op
            (URI-CAST (shift 'URI-CAST-175.3)) ; SHIFT op
            (NOT (shift 'NOT-169.2)) ; SHIFT op
            (LEFT-PAR (shift 'LEFT-PAR-167.3)) ; SHIFT op
            (UNDERSCORE (shift 'UNDERSCORE-114.2)) ; SHIFT op
            (STRING (shift 'STRING-126.1-127.2)) ; SHIFT op
            (A (shift 'A-120.1)) ; SHIFT op
            (URI-TAIL (shift 'URI-TAIL-119.1)) ; SHIFT op
            (URI (shift 'URI-117.1)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(ID TIMES MINUS PLUS NUMBER TRUE FALSE VAR URI-TAIL-CAST PREF URI-CAST NOT LEFT-PAR UNDERSCORE STRING A URI-TAIL URI) input))))
         (<EXPR>-26.1-128.3
           (selectq (car input)
            ((FOR RIGHT-BRACE LIMIT OFFSET ORDER HAVING GROUP VALUES LEFT-BRACE WHERE FROM -! SEMICOLON) ; REDUCE(26) op
              (setq input (cons '<QUERY> (apply #'(LAMBDA (A B C) (SETF (SPARQL-STAT-HAVING A) C) A) (reduce 3)))))
            (OR (shift 'OR-128.2)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(FOR RIGHT-BRACE LIMIT OFFSET ORDER HAVING GROUP VALUES LEFT-BRACE WHERE FROM -! SEMICOLON OR) input))))
         (GROUP-25.3
           (selectq (car input)
            (BY (shift 'BY-25.2)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(BY) input))))
         (BY-25.2
           (selectq (car input)
            (<VAR-LIST> (shift '<VAR-LIST>-25.1)) ; REDUCE completion
            ((FOR RIGHT-PAR RIGHT-BRACE LIMIT OFFSET ORDER HAVING GROUP VALUES LEFT-BRACE WHERE FROM -! SEMICOLON) ; REDUCE(58) op
              (setq input (cons '<VAR-LIST> (apply #'(LAMBDA (A) NIL) (reduce 0)))))
            (VAR (shift 'VAR-59.2)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(FOR RIGHT-PAR RIGHT-BRACE LIMIT OFFSET ORDER HAVING GROUP VALUES LEFT-BRACE WHERE FROM -! SEMICOLON VAR) input))))
         (VAR-59.2
           (selectq (car input)
            (<VAR-LIST> (shift '<VAR-LIST>-59.1)) ; REDUCE completion
            ((FOR RIGHT-PAR RIGHT-BRACE LIMIT OFFSET ORDER HAVING GROUP VALUES LEFT-BRACE WHERE FROM -! SEMICOLON) ; REDUCE(58) op
              (setq input (cons '<VAR-LIST> (apply #'(LAMBDA (A) NIL) (reduce 0)))))
            (VAR (shift 'VAR-59.2)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(FOR RIGHT-PAR RIGHT-BRACE LIMIT OFFSET ORDER HAVING GROUP VALUES LEFT-BRACE WHERE FROM -! SEMICOLON VAR) input))))
         (WHERE-22.2
           (selectq (car input)
            (<BLOCK> (shift '<BLOCK>-22.1)) ; REDUCE completion
            (LEFT-BRACE (shift 'LEFT-BRACE-60.3)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(LEFT-BRACE) input))))
         (FROM-20.2-21.3
           (selectq (car input)
            (<RESOURCE> (shift '<RESOURCE>-20.1)) ; REDUCE completion
            (NAMED (shift 'NAMED-21.2)) ; SHIFT op
            (URI (shift 'URI-117.1)) ; SHIFT op
            (PREF (shift 'PREF-118.2)) ; SHIFT op
            (URI-TAIL (shift 'URI-TAIL-119.1)) ; SHIFT op
            (A (shift 'A-120.1)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(NAMED URI PREF URI-TAIL A) input))))
         (NAMED-21.2
           (selectq (car input)
            (<RESOURCE> (shift '<RESOURCE>-21.1)) ; REDUCE completion
            (URI (shift 'URI-117.1)) ; SHIFT op
            (PREF (shift 'PREF-118.2)) ; SHIFT op
            (URI-TAIL (shift 'URI-TAIL-119.1)) ; SHIFT op
            (A (shift 'A-120.1)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(URI PREF URI-TAIL A) input))))
         (VALUES-79.5-80.7
           (selectq (car input)
            (LEFT-PAR (shift 'LEFT-PAR-80.6)) ; SHIFT op
            (VAR (shift 'VAR-79.4)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(LEFT-PAR VAR) input))))
         (LEFT-PAR-80.6
           (selectq (car input)
            (<VAR-LIST> (shift '<VAR-LIST>-80.5)) ; REDUCE completion
            ((FOR RIGHT-PAR RIGHT-BRACE LIMIT OFFSET ORDER HAVING GROUP VALUES LEFT-BRACE WHERE FROM -! SEMICOLON) ; REDUCE(58) op
              (setq input (cons '<VAR-LIST> (apply #'(LAMBDA (A) NIL) (reduce 0)))))
            (VAR (shift 'VAR-59.2)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(FOR RIGHT-PAR RIGHT-BRACE LIMIT OFFSET ORDER HAVING GROUP VALUES LEFT-BRACE WHERE FROM -! SEMICOLON VAR) input))))
         (<VAR-LIST>-80.5
           (selectq (car input)
            (RIGHT-PAR (shift 'RIGHT-PAR-80.4)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(RIGHT-PAR) input))))
         (RIGHT-PAR-80.4
           (selectq (car input)
            (LEFT-BRACE (shift 'LEFT-BRACE-80.3)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(LEFT-BRACE) input))))
         (LEFT-BRACE-80.3
           (selectq (car input)
            (<INLINE-DATA-TUPLES> (shift '<INLINE-DATA-TUPLES>-80.2)) ; REDUCE completion
            ((RIGHT-BRACE) ; REDUCE(85) op
              (setq input (cons '<INLINE-DATA-TUPLES> (apply #'(LAMBDA NIL NIL) (reduce 0)))))
            (LEFT-PAR (shift 'LEFT-PAR-86.4)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(RIGHT-BRACE LEFT-PAR) input))))
         (LEFT-PAR-86.4
           (selectq (car input)
            (<INLINE-DATA> (shift '<INLINE-DATA>-86.3)) ; REDUCE completion
            (<STRING-LANG> (shift '<STRING-LANG>-124.1-125.3)) ; REDUCE completion
            (<LITERAL> (shift '<LITERAL>-83.2)) ; REDUCE completion
            (<RESOURCE> (shift '<RESOURCE>-82.2)) ; REDUCE completion
            ((RIGHT-PAR RIGHT-BRACE) ; REDUCE(81) op
              (setq input (cons '<INLINE-DATA> (apply #'(LAMBDA NIL NIL) (reduce 0)))))
            (UNDEF (shift 'UNDEF-84.2)) ; SHIFT op
            (STRING (shift 'STRING-126.1-127.2)) ; SHIFT op
            (FALSE (shift 'FALSE-123.1)) ; SHIFT op
            (TRUE (shift 'TRUE-122.1)) ; SHIFT op
            (NUMBER (shift 'NUMBER-121.1)) ; SHIFT op
            (A (shift 'A-120.1)) ; SHIFT op
            (URI-TAIL (shift 'URI-TAIL-119.1)) ; SHIFT op
            (PREF (shift 'PREF-118.2)) ; SHIFT op
            (URI (shift 'URI-117.1)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(RIGHT-PAR RIGHT-BRACE UNDEF STRING FALSE TRUE NUMBER A URI-TAIL PREF URI) input))))
         (<RESOURCE>-82.2
           (selectq (car input)
            (<INLINE-DATA> (shift '<INLINE-DATA>-82.1)) ; REDUCE completion
            (<STRING-LANG> (shift '<STRING-LANG>-124.1-125.3)) ; REDUCE completion
            (<LITERAL> (shift '<LITERAL>-83.2)) ; REDUCE completion
            (<RESOURCE> (shift '<RESOURCE>-82.2)) ; REDUCE completion
            ((RIGHT-PAR RIGHT-BRACE) ; REDUCE(81) op
              (setq input (cons '<INLINE-DATA> (apply #'(LAMBDA NIL NIL) (reduce 0)))))
            (UNDEF (shift 'UNDEF-84.2)) ; SHIFT op
            (STRING (shift 'STRING-126.1-127.2)) ; SHIFT op
            (FALSE (shift 'FALSE-123.1)) ; SHIFT op
            (TRUE (shift 'TRUE-122.1)) ; SHIFT op
            (NUMBER (shift 'NUMBER-121.1)) ; SHIFT op
            (A (shift 'A-120.1)) ; SHIFT op
            (URI-TAIL (shift 'URI-TAIL-119.1)) ; SHIFT op
            (PREF (shift 'PREF-118.2)) ; SHIFT op
            (URI (shift 'URI-117.1)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(RIGHT-PAR RIGHT-BRACE UNDEF STRING FALSE TRUE NUMBER A URI-TAIL PREF URI) input))))
         (<LITERAL>-83.2
           (selectq (car input)
            (<INLINE-DATA> (shift '<INLINE-DATA>-83.1)) ; REDUCE completion
            (<STRING-LANG> (shift '<STRING-LANG>-124.1-125.3)) ; REDUCE completion
            (<LITERAL> (shift '<LITERAL>-83.2)) ; REDUCE completion
            (<RESOURCE> (shift '<RESOURCE>-82.2)) ; REDUCE completion
            ((RIGHT-PAR RIGHT-BRACE) ; REDUCE(81) op
              (setq input (cons '<INLINE-DATA> (apply #'(LAMBDA NIL NIL) (reduce 0)))))
            (UNDEF (shift 'UNDEF-84.2)) ; SHIFT op
            (STRING (shift 'STRING-126.1-127.2)) ; SHIFT op
            (FALSE (shift 'FALSE-123.1)) ; SHIFT op
            (TRUE (shift 'TRUE-122.1)) ; SHIFT op
            (NUMBER (shift 'NUMBER-121.1)) ; SHIFT op
            (A (shift 'A-120.1)) ; SHIFT op
            (URI-TAIL (shift 'URI-TAIL-119.1)) ; SHIFT op
            (PREF (shift 'PREF-118.2)) ; SHIFT op
            (URI (shift 'URI-117.1)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(RIGHT-PAR RIGHT-BRACE UNDEF STRING FALSE TRUE NUMBER A URI-TAIL PREF URI) input))))
         (UNDEF-84.2
           (selectq (car input)
            (<INLINE-DATA> (shift '<INLINE-DATA>-84.1)) ; REDUCE completion
            (<STRING-LANG> (shift '<STRING-LANG>-124.1-125.3)) ; REDUCE completion
            (<LITERAL> (shift '<LITERAL>-83.2)) ; REDUCE completion
            (<RESOURCE> (shift '<RESOURCE>-82.2)) ; REDUCE completion
            ((RIGHT-PAR RIGHT-BRACE) ; REDUCE(81) op
              (setq input (cons '<INLINE-DATA> (apply #'(LAMBDA NIL NIL) (reduce 0)))))
            (UNDEF (shift 'UNDEF-84.2)) ; SHIFT op
            (STRING (shift 'STRING-126.1-127.2)) ; SHIFT op
            (FALSE (shift 'FALSE-123.1)) ; SHIFT op
            (TRUE (shift 'TRUE-122.1)) ; SHIFT op
            (NUMBER (shift 'NUMBER-121.1)) ; SHIFT op
            (A (shift 'A-120.1)) ; SHIFT op
            (URI-TAIL (shift 'URI-TAIL-119.1)) ; SHIFT op
            (PREF (shift 'PREF-118.2)) ; SHIFT op
            (URI (shift 'URI-117.1)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(RIGHT-PAR RIGHT-BRACE UNDEF STRING FALSE TRUE NUMBER A URI-TAIL PREF URI) input))))
         (<INLINE-DATA>-86.3
           (selectq (car input)
            (RIGHT-PAR (shift 'RIGHT-PAR-86.2)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(RIGHT-PAR) input))))
         (RIGHT-PAR-86.2
           (selectq (car input)
            (<INLINE-DATA-TUPLES> (shift '<INLINE-DATA-TUPLES>-86.1)) ; REDUCE completion
            ((RIGHT-BRACE) ; REDUCE(85) op
              (setq input (cons '<INLINE-DATA-TUPLES> (apply #'(LAMBDA NIL NIL) (reduce 0)))))
            (LEFT-PAR (shift 'LEFT-PAR-86.4)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(RIGHT-BRACE LEFT-PAR) input))))
         (<INLINE-DATA-TUPLES>-80.2
           (selectq (car input)
            (RIGHT-BRACE (shift 'RIGHT-BRACE-80.1)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(RIGHT-BRACE) input))))
         (VAR-79.4
           (selectq (car input)
            (LEFT-BRACE (shift 'LEFT-BRACE-79.3)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(LEFT-BRACE) input))))
         (LEFT-BRACE-79.3
           (selectq (car input)
            (<INLINE-DATA> (shift '<INLINE-DATA>-79.2)) ; REDUCE completion
            (<STRING-LANG> (shift '<STRING-LANG>-124.1-125.3)) ; REDUCE completion
            (<LITERAL> (shift '<LITERAL>-83.2)) ; REDUCE completion
            (<RESOURCE> (shift '<RESOURCE>-82.2)) ; REDUCE completion
            ((RIGHT-PAR RIGHT-BRACE) ; REDUCE(81) op
              (setq input (cons '<INLINE-DATA> (apply #'(LAMBDA NIL NIL) (reduce 0)))))
            (UNDEF (shift 'UNDEF-84.2)) ; SHIFT op
            (STRING (shift 'STRING-126.1-127.2)) ; SHIFT op
            (FALSE (shift 'FALSE-123.1)) ; SHIFT op
            (TRUE (shift 'TRUE-122.1)) ; SHIFT op
            (NUMBER (shift 'NUMBER-121.1)) ; SHIFT op
            (A (shift 'A-120.1)) ; SHIFT op
            (URI-TAIL (shift 'URI-TAIL-119.1)) ; SHIFT op
            (PREF (shift 'PREF-118.2)) ; SHIFT op
            (URI (shift 'URI-117.1)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(RIGHT-PAR RIGHT-BRACE UNDEF STRING FALSE TRUE NUMBER A URI-TAIL PREF URI) input))))
         (<INLINE-DATA>-79.2
           (selectq (car input)
            (RIGHT-BRACE (shift 'RIGHT-BRACE-79.1)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(RIGHT-BRACE) input))))
         (GRAPH-75.2-76.2
           (selectq (car input)
            (<RESOURCE> (shift '<RESOURCE>-75.1)) ; REDUCE completion
            (VAR (shift 'VAR-76.1)) ; SHIFT op
            (URI (shift 'URI-117.1)) ; SHIFT op
            (PREF (shift 'PREF-118.2)) ; SHIFT op
            (URI-TAIL (shift 'URI-TAIL-119.1)) ; SHIFT op
            (A (shift 'A-120.1)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(VAR URI PREF URI-TAIL A) input))))
         (<GRAPH-SPECIFIER>-74.2
           (selectq (car input)
            (<BLOCK> (shift '<BLOCK>-74.1)) ; REDUCE completion
            (LEFT-BRACE (shift 'LEFT-BRACE-60.3)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(LEFT-BRACE) input))))
         (BIND-71.2
           (selectq (car input)
            (<NAMED-EXPR> (shift '<NAMED-EXPR>-71.1)) ; REDUCE completion
            (LEFT-PAR (shift 'LEFT-PAR-57.5)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(LEFT-PAR) input))))
         (OPTIONAL-69.2
           (selectq (car input)
            (<BLOCK> (shift '<BLOCK>-69.1)) ; REDUCE completion
            (LEFT-BRACE (shift 'LEFT-BRACE-60.3)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(LEFT-BRACE) input))))
         (FILTER-65.4-66.2-67.3-68.4
           (selectq (car input)
            (<SIMPLE-FNCALL> (shift '<SIMPLE-FNCALL>-66.1)) ; REDUCE completion
            (NOT (shift 'NOT-68.3)) ; SHIFT op
            (EXISTS (shift 'EXISTS-67.2)) ; SHIFT op
            (ID (shift 'ID-173.2)) ; SHIFT op
            (LEFT-PAR (shift 'LEFT-PAR-65.3)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(NOT EXISTS ID LEFT-PAR) input))))
         (NOT-68.3
           (selectq (car input)
            (EXISTS (shift 'EXISTS-68.2)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(EXISTS) input))))
         (EXISTS-68.2
           (selectq (car input)
            (<BLOCK> (shift '<BLOCK>-68.1)) ; REDUCE completion
            (LEFT-BRACE (shift 'LEFT-BRACE-60.3)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(LEFT-BRACE) input))))
         (EXISTS-67.2
           (selectq (car input)
            (<BLOCK> (shift '<BLOCK>-67.1)) ; REDUCE completion
            (LEFT-BRACE (shift 'LEFT-BRACE-60.3)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(LEFT-BRACE) input))))
         (LEFT-PAR-65.3
           (selectq (car input)
            (<REL-EXPR> (shift '<REL-EXPR>-133.1)) ; REDUCE completion
            (<NUM-EXPR> (shift '<NUM-EXPR>-150.1)) ; REDUCE completion
            (<RDF-TERM> (shift '<RDF-TERM>-151.1)) ; REDUCE completion
            (<RESOURCE> (shift '<RESOURCE>-115.1)) ; REDUCE completion
            (<UNARY-EXPR> (shift '<UNARY-EXPR>-158.3-159.3-160.3-161.3-162.3-163.1)) ; REDUCE completion
            (<LITERAL> (shift '<LITERAL>-168.1)) ; REDUCE completion
            (<SIMPLE-FNCALL> (shift '<SIMPLE-FNCALL>-174.1)) ; REDUCE completion
            (<VAR-OR-FNCALL> (shift '<VAR-OR-FNCALL>-170.1-178.4)) ; REDUCE completion
            (<FNCALL> (shift '<FNCALL>-172.1)) ; REDUCE completion
            (<STRING-LANG> (shift '<STRING-LANG>-124.1-125.3)) ; REDUCE completion
            (<PRIM-EXPR> (shift '<PRIM-EXPR>-164.1)) ; REDUCE completion
            (<MULT-EXPR> (shift '<MULT-EXPR>-152.3-153.3-154.3-155.3-156.3-157.1)) ; REDUCE completion
            (<NUM-EXPR-OR-URI> (shift '<NUM-EXPR-OR-URI>-134.1-135.3-136.3-137.4)) ; REDUCE completion
            (<CONJUNCTION> (shift '<CONJUNCTION>-129.1-132.3)) ; REDUCE completion
            (<EXPR> (shift '<EXPR>-65.2-128.3)) ; REDUCE completion
            (ID (shift 'ID-130.1-173.2)) ; SHIFT op
            (TIMES (shift 'TIMES-131.1)) ; SHIFT op
            (MINUS (shift 'MINUS-165.2)) ; SHIFT op
            (PLUS (shift 'PLUS-166.2)) ; SHIFT op
            (NUMBER (shift 'NUMBER-121.1)) ; SHIFT op
            (TRUE (shift 'TRUE-122.1)) ; SHIFT op
            (FALSE (shift 'FALSE-123.1)) ; SHIFT op
            (VAR (shift 'VAR-171.1)) ; SHIFT op
            (URI-TAIL-CAST (shift 'URI-TAIL-CAST-177.3)) ; SHIFT op
            (PREF (shift 'PREF-118.2-176.4)) ; SHIFT op
            (URI-CAST (shift 'URI-CAST-175.3)) ; SHIFT op
            (NOT (shift 'NOT-169.2)) ; SHIFT op
            (LEFT-PAR (shift 'LEFT-PAR-167.3)) ; SHIFT op
            (UNDERSCORE (shift 'UNDERSCORE-114.2)) ; SHIFT op
            (STRING (shift 'STRING-126.1-127.2)) ; SHIFT op
            (A (shift 'A-120.1)) ; SHIFT op
            (URI-TAIL (shift 'URI-TAIL-119.1)) ; SHIFT op
            (URI (shift 'URI-117.1)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(ID TIMES MINUS PLUS NUMBER TRUE FALSE VAR URI-TAIL-CAST PREF URI-CAST NOT LEFT-PAR UNDERSCORE STRING A URI-TAIL URI) input))))
         (<EXPR>-65.2-128.3
           (selectq (car input)
            (OR (shift 'OR-128.2)) ; SHIFT op
            (RIGHT-PAR (shift 'RIGHT-PAR-65.1)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(OR RIGHT-PAR) input))))
         (LEFT-BRACKET-107.3-108.2
           (selectq (car input)
            (<PATH-ELT-OR-INVERSE> (shift '<PATH-ELT-OR-INVERSE>-94.1)) ; REDUCE completion
            (<PATH-PRIMARY> (shift '<PATH-PRIMARY>-98.1-99.2-100.2-101.2)) ; REDUCE completion
            (<RESOURCE> (shift '<RESOURCE>-102.1)) ; REDUCE completion
            (<PATH-ELT> (shift '<PATH-ELT>-96.1)) ; REDUCE completion
            (<PATH-ALTERNATIVE> (shift '<PATH-ALTERNATIVE>-91.1-93.3)) ; REDUCE completion
            (<PATH-SEQUENCE> (shift '<PATH-SEQUENCE>-92.1-95.3)) ; REDUCE completion
            (<PRED-OBJ-LIST> (shift '<PRED-OBJ-LIST>-89.4-107.2)) ; REDUCE completion
            (<OBJECT-OR-PATH> (shift '<OBJECT-OR-PATH>-88.2)) ; REDUCE completion
            (RIGHT-BRACKET (shift 'RIGHT-BRACKET-108.1)) ; SHIFT op
            (CAP (shift 'CAP-97.2)) ; SHIFT op
            (LEFT-PAR (shift 'LEFT-PAR-103.3)) ; SHIFT op
            (A (shift 'A-120.1)) ; SHIFT op
            (URI-TAIL (shift 'URI-TAIL-119.1)) ; SHIFT op
            (PREF (shift 'PREF-118.2)) ; SHIFT op
            (URI (shift 'URI-117.1)) ; SHIFT op
            (VAR (shift 'VAR-90.1)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(RIGHT-BRACKET CAP LEFT-PAR A URI-TAIL PREF URI VAR) input))))
         (<OBJECT-OR-PATH>-88.2
           (selectq (car input)
            (<OBJECT> (shift '<OBJECT>-106.1)) ; REDUCE completion
            (<RESOURCE> (shift '<RESOURCE>-115.1)) ; REDUCE completion
            (<STRING-LANG> (shift '<STRING-LANG>-124.1-125.3)) ; REDUCE completion
            (<LITERAL> (shift '<LITERAL>-116.1)) ; REDUCE completion
            (<RDF-TERM> (shift '<RDF-TERM>-112.1)) ; REDUCE completion
            (<OBJ-LIST> (shift '<OBJ-LIST>-88.1-105.3)) ; REDUCE completion
            (<NODE> (shift '<NODE>-104.1)) ; REDUCE completion
            (VAR (shift 'VAR-113.1)) ; SHIFT op
            (STRING (shift 'STRING-126.1-127.2)) ; SHIFT op
            (FALSE (shift 'FALSE-123.1)) ; SHIFT op
            (TRUE (shift 'TRUE-122.1)) ; SHIFT op
            (NUMBER (shift 'NUMBER-121.1)) ; SHIFT op
            (URI (shift 'URI-117.1)) ; SHIFT op
            (PREF (shift 'PREF-118.2)) ; SHIFT op
            (URI-TAIL (shift 'URI-TAIL-119.1)) ; SHIFT op
            (A (shift 'A-120.1)) ; SHIFT op
            (UNDERSCORE (shift 'UNDERSCORE-114.2)) ; SHIFT op
            (LEFT-PAR (shift 'LEFT-PAR-109.3)) ; SHIFT op
            (LEFT-BRACKET (shift 'LEFT-BRACKET-107.3-108.2)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(VAR STRING FALSE TRUE NUMBER URI PREF URI-TAIL A UNDERSCORE LEFT-PAR LEFT-BRACKET) input))))
         (<OBJ-LIST>-88.1-105.3
           (selectq (car input)
            ((RIGHT-BRACKET SEMICOLON RIGHT-BRACE STRING NUMBER TRUE FALSE URI PREF URI-TAIL A UNDERSCORE VAR LEFT-BRACKET LEFT-PAR VALUES GRAPH FILTER OPTIONAL BIND LEFT-BRACE DOT) ; REDUCE(88) op
              (setq input (cons '<PRED-OBJ-LIST> (apply #'(LAMBDA (A B) (MAKE-SQO :N (MAPCAR (F/L (O) (LIST A (SQO-N O))) (NREVERSE B)) :TS (MAPCAN (FUNCTION SQO-TS) B))) (reduce 2)))))
            (COMMA (shift 'COMMA-105.2)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(RIGHT-BRACKET SEMICOLON RIGHT-BRACE STRING NUMBER TRUE FALSE URI PREF URI-TAIL A UNDERSCORE VAR LEFT-BRACKET LEFT-PAR VALUES GRAPH FILTER OPTIONAL BIND LEFT-BRACE DOT COMMA) input))))
         (COMMA-105.2
           (selectq (car input)
            (<NODE> (shift '<NODE>-105.1)) ; REDUCE completion
            (<RDF-TERM> (shift '<RDF-TERM>-112.1)) ; REDUCE completion
            (<LITERAL> (shift '<LITERAL>-116.1)) ; REDUCE completion
            (<STRING-LANG> (shift '<STRING-LANG>-124.1-125.3)) ; REDUCE completion
            (<RESOURCE> (shift '<RESOURCE>-115.1)) ; REDUCE completion
            (<OBJECT> (shift '<OBJECT>-106.1)) ; REDUCE completion
            (LEFT-BRACKET (shift 'LEFT-BRACKET-107.3-108.2)) ; SHIFT op
            (LEFT-PAR (shift 'LEFT-PAR-109.3)) ; SHIFT op
            (UNDERSCORE (shift 'UNDERSCORE-114.2)) ; SHIFT op
            (A (shift 'A-120.1)) ; SHIFT op
            (URI-TAIL (shift 'URI-TAIL-119.1)) ; SHIFT op
            (PREF (shift 'PREF-118.2)) ; SHIFT op
            (URI (shift 'URI-117.1)) ; SHIFT op
            (NUMBER (shift 'NUMBER-121.1)) ; SHIFT op
            (TRUE (shift 'TRUE-122.1)) ; SHIFT op
            (FALSE (shift 'FALSE-123.1)) ; SHIFT op
            (STRING (shift 'STRING-126.1-127.2)) ; SHIFT op
            (VAR (shift 'VAR-113.1)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(LEFT-BRACKET LEFT-PAR UNDERSCORE A URI-TAIL PREF URI NUMBER TRUE FALSE STRING VAR) input))))
         (<PRED-OBJ-LIST>-89.4-107.2
           (selectq (car input)
            (RIGHT-BRACKET (shift 'RIGHT-BRACKET-107.1)) ; SHIFT op
            (SEMICOLON (shift 'SEMICOLON-89.3)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(RIGHT-BRACKET SEMICOLON) input))))
         (SEMICOLON-89.3
           (selectq (car input)
            (<OBJECT-OR-PATH> (shift '<OBJECT-OR-PATH>-89.2)) ; REDUCE completion
            (<PATH-ELT> (shift '<PATH-ELT>-96.1)) ; REDUCE completion
            (<RESOURCE> (shift '<RESOURCE>-102.1)) ; REDUCE completion
            (<PATH-PRIMARY> (shift '<PATH-PRIMARY>-98.1-99.2-100.2-101.2)) ; REDUCE completion
            (<PATH-SEQUENCE> (shift '<PATH-SEQUENCE>-92.1-95.3)) ; REDUCE completion
            (<PATH-ELT-OR-INVERSE> (shift '<PATH-ELT-OR-INVERSE>-94.1)) ; REDUCE completion
            (<PATH-ALTERNATIVE> (shift '<PATH-ALTERNATIVE>-91.1-93.3)) ; REDUCE completion
            (VAR (shift 'VAR-90.1)) ; SHIFT op
            (URI (shift 'URI-117.1)) ; SHIFT op
            (PREF (shift 'PREF-118.2)) ; SHIFT op
            (URI-TAIL (shift 'URI-TAIL-119.1)) ; SHIFT op
            (A (shift 'A-120.1)) ; SHIFT op
            (LEFT-PAR (shift 'LEFT-PAR-103.3)) ; SHIFT op
            (CAP (shift 'CAP-97.2)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(VAR URI PREF URI-TAIL A LEFT-PAR CAP) input))))
         (<OBJECT-OR-PATH>-89.2
           (selectq (car input)
            (<OBJECT> (shift '<OBJECT>-106.1)) ; REDUCE completion
            (<RESOURCE> (shift '<RESOURCE>-115.1)) ; REDUCE completion
            (<STRING-LANG> (shift '<STRING-LANG>-124.1-125.3)) ; REDUCE completion
            (<LITERAL> (shift '<LITERAL>-116.1)) ; REDUCE completion
            (<RDF-TERM> (shift '<RDF-TERM>-112.1)) ; REDUCE completion
            (<OBJ-LIST> (shift '<OBJ-LIST>-89.1-105.3)) ; REDUCE completion
            (<NODE> (shift '<NODE>-104.1)) ; REDUCE completion
            (VAR (shift 'VAR-113.1)) ; SHIFT op
            (STRING (shift 'STRING-126.1-127.2)) ; SHIFT op
            (FALSE (shift 'FALSE-123.1)) ; SHIFT op
            (TRUE (shift 'TRUE-122.1)) ; SHIFT op
            (NUMBER (shift 'NUMBER-121.1)) ; SHIFT op
            (URI (shift 'URI-117.1)) ; SHIFT op
            (PREF (shift 'PREF-118.2)) ; SHIFT op
            (URI-TAIL (shift 'URI-TAIL-119.1)) ; SHIFT op
            (A (shift 'A-120.1)) ; SHIFT op
            (UNDERSCORE (shift 'UNDERSCORE-114.2)) ; SHIFT op
            (LEFT-PAR (shift 'LEFT-PAR-109.3)) ; SHIFT op
            (LEFT-BRACKET (shift 'LEFT-BRACKET-107.3-108.2)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(VAR STRING FALSE TRUE NUMBER URI PREF URI-TAIL A UNDERSCORE LEFT-PAR LEFT-BRACKET) input))))
         (<OBJ-LIST>-89.1-105.3
           (selectq (car input)
            ((RIGHT-BRACKET SEMICOLON RIGHT-BRACE STRING NUMBER TRUE FALSE URI PREF URI-TAIL A UNDERSCORE VAR LEFT-BRACKET LEFT-PAR VALUES GRAPH FILTER OPTIONAL BIND LEFT-BRACE DOT) ; REDUCE(89) op
              (setq input (cons '<PRED-OBJ-LIST> (apply #'(LAMBDA (A B C D) (MAKE-SQO :N (APPEND (SQO-N A) (MAPCAR (F/L (O) (LIST C (SQO-N O))) (NREVERSE D))) :TS (APPEND (SQO-TS A) (MAPCAN (FUNCTION SQO-TS) D)))) (reduce 4)))))
            (COMMA (shift 'COMMA-105.2)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(RIGHT-BRACKET SEMICOLON RIGHT-BRACE STRING NUMBER TRUE FALSE URI PREF URI-TAIL A UNDERSCORE VAR LEFT-BRACKET LEFT-PAR VALUES GRAPH FILTER OPTIONAL BIND LEFT-BRACE DOT COMMA) input))))
         (<PATH-SEQUENCE>-92.1-95.3
           (selectq (car input)
            ((RIGHT-PAR PIPE STRING NUMBER TRUE FALSE URI PREF URI-TAIL A UNDERSCORE VAR LEFT-BRACKET LEFT-PAR) ; REDUCE(92) op
              (setq input (cons '<PATH-ALTERNATIVE> (nth 0 (reduce 1)))))
            (DIVIDE (shift 'DIVIDE-95.2)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(RIGHT-PAR PIPE STRING NUMBER TRUE FALSE URI PREF URI-TAIL A UNDERSCORE VAR LEFT-BRACKET LEFT-PAR DIVIDE) input))))
         (DIVIDE-95.2
           (selectq (car input)
            (<PATH-ELT-OR-INVERSE> (shift '<PATH-ELT-OR-INVERSE>-95.1)) ; REDUCE completion
            (<PATH-PRIMARY> (shift '<PATH-PRIMARY>-98.1-99.2-100.2-101.2)) ; REDUCE completion
            (<RESOURCE> (shift '<RESOURCE>-102.1)) ; REDUCE completion
            (<PATH-ELT> (shift '<PATH-ELT>-96.1)) ; REDUCE completion
            (CAP (shift 'CAP-97.2)) ; SHIFT op
            (LEFT-PAR (shift 'LEFT-PAR-103.3)) ; SHIFT op
            (A (shift 'A-120.1)) ; SHIFT op
            (URI-TAIL (shift 'URI-TAIL-119.1)) ; SHIFT op
            (PREF (shift 'PREF-118.2)) ; SHIFT op
            (URI (shift 'URI-117.1)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(CAP LEFT-PAR A URI-TAIL PREF URI) input))))
         (<PATH-ALTERNATIVE>-91.1-93.3
           (selectq (car input)
            ((STRING NUMBER TRUE FALSE URI PREF URI-TAIL A UNDERSCORE VAR LEFT-BRACKET LEFT-PAR) ; REDUCE(91) op
              (setq input (cons '<OBJECT-OR-PATH> (nth 0 (reduce 1)))))
            (PIPE (shift 'PIPE-93.2)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(STRING NUMBER TRUE FALSE URI PREF URI-TAIL A UNDERSCORE VAR LEFT-BRACKET LEFT-PAR PIPE) input))))
         (PIPE-93.2
           (selectq (car input)
            (<PATH-ELT> (shift '<PATH-ELT>-96.1)) ; REDUCE completion
            (<RESOURCE> (shift '<RESOURCE>-102.1)) ; REDUCE completion
            (<PATH-PRIMARY> (shift '<PATH-PRIMARY>-98.1-99.2-100.2-101.2)) ; REDUCE completion
            (<PATH-SEQUENCE> (shift '<PATH-SEQUENCE>-93.1-95.3)) ; REDUCE completion
            (<PATH-ELT-OR-INVERSE> (shift '<PATH-ELT-OR-INVERSE>-94.1)) ; REDUCE completion
            (URI (shift 'URI-117.1)) ; SHIFT op
            (PREF (shift 'PREF-118.2)) ; SHIFT op
            (URI-TAIL (shift 'URI-TAIL-119.1)) ; SHIFT op
            (A (shift 'A-120.1)) ; SHIFT op
            (LEFT-PAR (shift 'LEFT-PAR-103.3)) ; SHIFT op
            (CAP (shift 'CAP-97.2)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(URI PREF URI-TAIL A LEFT-PAR CAP) input))))
         (<PATH-SEQUENCE>-93.1-95.3
           (selectq (car input)
            ((RIGHT-PAR PIPE STRING NUMBER TRUE FALSE URI PREF URI-TAIL A UNDERSCORE VAR LEFT-BRACKET LEFT-PAR) ; REDUCE(93) op
              (setq input (cons '<PATH-ALTERNATIVE> (apply #'(LAMBDA (A B C) (IF (EQ (CAR A) (QUOTE PATH-ALT)) (APPEND A (LIST C)) (LIST (QUOTE PATH-ALT) A C))) (reduce 3)))))
            (DIVIDE (shift 'DIVIDE-95.2)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(RIGHT-PAR PIPE STRING NUMBER TRUE FALSE URI PREF URI-TAIL A UNDERSCORE VAR LEFT-BRACKET LEFT-PAR DIVIDE) input))))
         (CAP-97.2
           (selectq (car input)
            (<PATH-ELT> (shift '<PATH-ELT>-97.1)) ; REDUCE completion
            (<RESOURCE> (shift '<RESOURCE>-102.1)) ; REDUCE completion
            (<PATH-PRIMARY> (shift '<PATH-PRIMARY>-98.1-99.2-100.2-101.2)) ; REDUCE completion
            (URI (shift 'URI-117.1)) ; SHIFT op
            (PREF (shift 'PREF-118.2)) ; SHIFT op
            (URI-TAIL (shift 'URI-TAIL-119.1)) ; SHIFT op
            (A (shift 'A-120.1)) ; SHIFT op
            (LEFT-PAR (shift 'LEFT-PAR-103.3)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(URI PREF URI-TAIL A LEFT-PAR) input))))
         (LEFT-PAR-103.3
           (selectq (car input)
            (<PATH-ELT-OR-INVERSE> (shift '<PATH-ELT-OR-INVERSE>-94.1)) ; REDUCE completion
            (<PATH-PRIMARY> (shift '<PATH-PRIMARY>-98.1-99.2-100.2-101.2)) ; REDUCE completion
            (<RESOURCE> (shift '<RESOURCE>-102.1)) ; REDUCE completion
            (<PATH-ELT> (shift '<PATH-ELT>-96.1)) ; REDUCE completion
            (<PATH-ALTERNATIVE> (shift '<PATH-ALTERNATIVE>-93.3-103.2)) ; REDUCE completion
            (<PATH-SEQUENCE> (shift '<PATH-SEQUENCE>-92.1-95.3)) ; REDUCE completion
            (CAP (shift 'CAP-97.2)) ; SHIFT op
            (LEFT-PAR (shift 'LEFT-PAR-103.3)) ; SHIFT op
            (A (shift 'A-120.1)) ; SHIFT op
            (URI-TAIL (shift 'URI-TAIL-119.1)) ; SHIFT op
            (PREF (shift 'PREF-118.2)) ; SHIFT op
            (URI (shift 'URI-117.1)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(CAP LEFT-PAR A URI-TAIL PREF URI) input))))
         (<PATH-ALTERNATIVE>-93.3-103.2
           (selectq (car input)
            (RIGHT-PAR (shift 'RIGHT-PAR-103.1)) ; SHIFT op
            (PIPE (shift 'PIPE-93.2)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(RIGHT-PAR PIPE) input))))
         (<PATH-PRIMARY>-98.1-99.2-100.2-101.2
           (selectq (car input)
            ((DIVIDE STRING NUMBER TRUE FALSE URI PREF URI-TAIL A UNDERSCORE VAR LEFT-BRACKET LEFT-PAR RIGHT-PAR PIPE) ; REDUCE(98) op
              (setq input (cons '<PATH-ELT> (nth 0 (reduce 1)))))
            (PLUS (shift 'PLUS-101.1)) ; SHIFT op
            (TIMES (shift 'TIMES-100.1)) ; SHIFT op
            (QUESTION (shift 'QUESTION-99.1)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(DIVIDE STRING NUMBER TRUE FALSE URI PREF URI-TAIL A UNDERSCORE VAR LEFT-BRACKET LEFT-PAR RIGHT-PAR PIPE PLUS TIMES QUESTION) input))))
         (LEFT-PAR-109.3
           (selectq (car input)
            (<NODES> (shift '<NODES>-109.2-111.2)) ; REDUCE completion
            ((STRING NUMBER TRUE FALSE URI PREF URI-TAIL A UNDERSCORE VAR LEFT-PAR LEFT-BRACKET RIGHT-PAR) ; REDUCE(110) op
              (setq input (cons '<NODES> (apply #'(LAMBDA NIL NIL) (reduce 0)))))
            (return (list 'SYNTAX-ERROR (caar stack) '(STRING NUMBER TRUE FALSE URI PREF URI-TAIL A UNDERSCORE VAR LEFT-PAR LEFT-BRACKET RIGHT-PAR) input))))
         (<NODES>-109.2-111.2
           (selectq (car input)
            (<NODE> (shift '<NODE>-111.1)) ; REDUCE completion
            (<RDF-TERM> (shift '<RDF-TERM>-112.1)) ; REDUCE completion
            (<LITERAL> (shift '<LITERAL>-116.1)) ; REDUCE completion
            (<STRING-LANG> (shift '<STRING-LANG>-124.1-125.3)) ; REDUCE completion
            (<RESOURCE> (shift '<RESOURCE>-115.1)) ; REDUCE completion
            (<OBJECT> (shift '<OBJECT>-106.1)) ; REDUCE completion
            (LEFT-BRACKET (shift 'LEFT-BRACKET-107.3-108.2)) ; SHIFT op
            (LEFT-PAR (shift 'LEFT-PAR-109.3)) ; SHIFT op
            (UNDERSCORE (shift 'UNDERSCORE-114.2)) ; SHIFT op
            (A (shift 'A-120.1)) ; SHIFT op
            (URI-TAIL (shift 'URI-TAIL-119.1)) ; SHIFT op
            (PREF (shift 'PREF-118.2)) ; SHIFT op
            (URI (shift 'URI-117.1)) ; SHIFT op
            (NUMBER (shift 'NUMBER-121.1)) ; SHIFT op
            (TRUE (shift 'TRUE-122.1)) ; SHIFT op
            (FALSE (shift 'FALSE-123.1)) ; SHIFT op
            (STRING (shift 'STRING-126.1-127.2)) ; SHIFT op
            (VAR (shift 'VAR-113.1)) ; SHIFT op
            (RIGHT-PAR (shift 'RIGHT-PAR-109.1)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(LEFT-BRACKET LEFT-PAR UNDERSCORE A URI-TAIL PREF URI NUMBER TRUE FALSE STRING VAR RIGHT-PAR) input))))
         (<NODE>-87.2
           (selectq (car input)
            (<PATH-ELT-OR-INVERSE> (shift '<PATH-ELT-OR-INVERSE>-94.1)) ; REDUCE completion
            (<PATH-PRIMARY> (shift '<PATH-PRIMARY>-98.1-99.2-100.2-101.2)) ; REDUCE completion
            (<RESOURCE> (shift '<RESOURCE>-102.1)) ; REDUCE completion
            (<PATH-ELT> (shift '<PATH-ELT>-96.1)) ; REDUCE completion
            (<PATH-ALTERNATIVE> (shift '<PATH-ALTERNATIVE>-91.1-93.3)) ; REDUCE completion
            (<PATH-SEQUENCE> (shift '<PATH-SEQUENCE>-92.1-95.3)) ; REDUCE completion
            (<PRED-OBJ-LIST> (shift '<PRED-OBJ-LIST>-87.1-89.4)) ; REDUCE completion
            (<OBJECT-OR-PATH> (shift '<OBJECT-OR-PATH>-88.2)) ; REDUCE completion
            (CAP (shift 'CAP-97.2)) ; SHIFT op
            (LEFT-PAR (shift 'LEFT-PAR-103.3)) ; SHIFT op
            (A (shift 'A-120.1)) ; SHIFT op
            (URI-TAIL (shift 'URI-TAIL-119.1)) ; SHIFT op
            (PREF (shift 'PREF-118.2)) ; SHIFT op
            (URI (shift 'URI-117.1)) ; SHIFT op
            (VAR (shift 'VAR-90.1)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(CAP LEFT-PAR A URI-TAIL PREF URI VAR) input))))
         (<PRED-OBJ-LIST>-87.1-89.4
           (selectq (car input)
            ((STRING NUMBER TRUE FALSE URI PREF URI-TAIL A UNDERSCORE VAR LEFT-BRACKET LEFT-PAR VALUES GRAPH FILTER OPTIONAL BIND LEFT-BRACE DOT RIGHT-BRACE) ; REDUCE(87) op
              (setq input (cons '<TRIPLES> (apply #'(LAMBDA (A B) (CONS (QUOTE TRIPLES) (SPARQL-MAKE-TRIPLES A B))) (reduce 2)))))
            (SEMICOLON (shift 'SEMICOLON-89.3)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(STRING NUMBER TRUE FALSE URI PREF URI-TAIL A UNDERSCORE VAR LEFT-BRACKET LEFT-PAR VALUES GRAPH FILTER OPTIONAL BIND LEFT-BRACE DOT RIGHT-BRACE SEMICOLON) input))))
         (<CONDS>-60.2
           (selectq (car input)
            (RIGHT-BRACE (shift 'RIGHT-BRACE-60.1)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(RIGHT-BRACE) input))))
         (ASK-19.2
           (selectq (car input)
            (<BLOCK> (shift '<BLOCK>-19.1)) ; REDUCE completion
            (LEFT-BRACE (shift 'LEFT-BRACE-60.3)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(LEFT-BRACE) input))))
         (<QUERY>-6.1-20.3-21.4-22.3-23.2-24.2-25.4-26.3-27.4-28.3-29.3
           (selectq (car input)
            (<BLOCK> (shift '<BLOCK>-23.1)) ; REDUCE completion
            (<VALUES-CLAUSE> (shift '<VALUES-CLAUSE>-24.1)) ; REDUCE completion
            ((-! SEMICOLON) ; REDUCE(6) op
              (setq input (cons '<PREFIXED-STAT> (apply #'(LAMBDA (A) (LIST NIL A)) (reduce 1)))))
            (LIMIT (shift 'LIMIT-29.2)) ; SHIFT op
            (OFFSET (shift 'OFFSET-28.2)) ; SHIFT op
            (ORDER (shift 'ORDER-27.3)) ; SHIFT op
            (HAVING (shift 'HAVING-26.2)) ; SHIFT op
            (GROUP (shift 'GROUP-25.3)) ; SHIFT op
            (VALUES (shift 'VALUES-79.5-80.7)) ; SHIFT op
            (LEFT-BRACE (shift 'LEFT-BRACE-60.3)) ; SHIFT op
            (WHERE (shift 'WHERE-22.2)) ; SHIFT op
            (FROM (shift 'FROM-20.2-21.3)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(-! SEMICOLON LIMIT OFFSET ORDER HAVING GROUP VALUES LEFT-BRACE WHERE FROM) input))))
         (WITH-34.3
           (selectq (car input)
            (<RESOURCE> (shift '<RESOURCE>-34.2)) ; REDUCE completion
            (URI (shift 'URI-117.1)) ; SHIFT op
            (PREF (shift 'PREF-118.2)) ; SHIFT op
            (URI-TAIL (shift 'URI-TAIL-119.1)) ; SHIFT op
            (A (shift 'A-120.1)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(URI PREF URI-TAIL A) input))))
         (<RESOURCE>-34.2
           (selectq (car input)
            (<UPDATE0> (shift '<UPDATE0>-34.1)) ; REDUCE completion
            (DELETE (shift 'DELETE-30.1-31.2-33.4)) ; SHIFT op
            (INSERT (shift 'INSERT-32.2)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(DELETE INSERT) input))))
         (DELETE-30.1-31.2-33.4
           (selectq (car input)
            (<BLOCK> (shift '<BLOCK>-31.1-33.3)) ; REDUCE completion
            ((WHERE USING -! SEMICOLON) ; REDUCE(30) op
              (setq input (cons '<UPDATE0> (apply #'(LAMBDA (A) (MAKE-SPARQL-UPDATE :DELETE (QUOTE ASTERISK))) (reduce 1)))))
            (LEFT-BRACE (shift 'LEFT-BRACE-60.3)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(WHERE USING -! SEMICOLON LEFT-BRACE) input))))
         (<BLOCK>-31.1-33.3
           (selectq (car input)
            ((WHERE USING -! SEMICOLON) ; REDUCE(31) op
              (setq input (cons '<UPDATE0> (apply #'(LAMBDA (A B) (MAKE-SPARQL-UPDATE :DELETE B)) (reduce 2)))))
            (INSERT (shift 'INSERT-33.2)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(WHERE USING -! SEMICOLON INSERT) input))))
         (INSERT-33.2
           (selectq (car input)
            (<BLOCK> (shift '<BLOCK>-33.1)) ; REDUCE completion
            (LEFT-BRACE (shift 'LEFT-BRACE-60.3)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(LEFT-BRACE) input))))
         (INSERT-32.2
           (selectq (car input)
            (<BLOCK> (shift '<BLOCK>-32.1)) ; REDUCE completion
            (LEFT-BRACE (shift 'LEFT-BRACE-60.3)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(LEFT-BRACE) input))))
         (<UPDATE>-7.1-36.3-37.4-38.3
           (selectq (car input)
            ((-! SEMICOLON) ; REDUCE(7) op
              (setq input (cons '<PREFIXED-STAT> (apply #'(LAMBDA (A) (LIST NIL A)) (reduce 1)))))
            (WHERE (shift 'WHERE-38.2)) ; SHIFT op
            (USING (shift 'USING-36.2-37.3)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(-! SEMICOLON WHERE USING) input))))
         (WHERE-38.2
           (selectq (car input)
            (<BLOCK> (shift '<BLOCK>-38.1)) ; REDUCE completion
            (LEFT-BRACE (shift 'LEFT-BRACE-60.3)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(LEFT-BRACE) input))))
         (USING-36.2-37.3
           (selectq (car input)
            (<RESOURCE> (shift '<RESOURCE>-36.1)) ; REDUCE completion
            (NAMED (shift 'NAMED-37.2)) ; SHIFT op
            (URI (shift 'URI-117.1)) ; SHIFT op
            (PREF (shift 'PREF-118.2)) ; SHIFT op
            (URI-TAIL (shift 'URI-TAIL-119.1)) ; SHIFT op
            (A (shift 'A-120.1)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(NAMED URI PREF URI-TAIL A) input))))
         (NAMED-37.2
           (selectq (car input)
            (<RESOURCE> (shift '<RESOURCE>-37.1)) ; REDUCE completion
            (URI (shift 'URI-117.1)) ; SHIFT op
            (PREF (shift 'PREF-118.2)) ; SHIFT op
            (URI-TAIL (shift 'URI-TAIL-119.1)) ; SHIFT op
            (A (shift 'A-120.1)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(URI PREF URI-TAIL A) input))))
         (DELETE-30.1-31.2-33.4-40.1
           (selectq (car input)
            (<BLOCK> (shift '<BLOCK>-31.1-33.3)) ; REDUCE completion
            ((WHERE USING -! SEMICOLON) ; REDUCE(30) op
              (setq input (cons '<UPDATE0> (apply #'(LAMBDA (A) (MAKE-SPARQL-UPDATE :DELETE (QUOTE ASTERISK))) (reduce 1)))))
            ((DATA) ; REDUCE(40) op
              (setq input (cons '<STREAMED-OP> (apply #'(LAMBDA (A) (SETF (SPARQL-DATA-STREAMED DATA) (QUOTE STREAMED-DELETE))) (reduce 1)))))
            (LEFT-BRACE (shift 'LEFT-BRACE-60.3)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(WHERE USING -! SEMICOLON DATA LEFT-BRACE) input))))
         (INSERT-32.2-39.1
           (selectq (car input)
            (<BLOCK> (shift '<BLOCK>-32.1)) ; REDUCE completion
            ((DATA) ; REDUCE(39) op
              (setq input (cons '<STREAMED-OP> (apply #'(LAMBDA (A) (SETF (SPARQL-DATA-STREAMED DATA) (QUOTE STREAMED-INSERT))) (reduce 1)))))
            (LEFT-BRACE (shift 'LEFT-BRACE-60.3)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(DATA LEFT-BRACE) input))))
         (<STREAMED-OP>-41.3
           (selectq (car input)
            (DATA (shift 'DATA-41.2)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(DATA) input))))
         (DATA-41.2
           (selectq (car input)
            (<BLOCK> (shift '<BLOCK>-41.1)) ; REDUCE completion
            (LEFT-BRACE (shift 'LEFT-BRACE-60.3)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(LEFT-BRACE) input))))
         (<ARCHIVE0>-43.3-44.5-45.3-46.1
           (selectq (car input)
            ((UNION -! SEMICOLON) ; REDUCE(46) op
              (setq input (cons '<ARCHIVE> (nth 0 (reduce 1)))))
            (TRIPLES (shift 'TRIPLES-44.4-45.2)) ; SHIFT op
            (FROM (shift 'FROM-43.2)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(UNION -! SEMICOLON TRIPLES FROM) input))))
         (TRIPLES-44.4-45.2
           (selectq (car input)
            (<BLOCK> (shift '<BLOCK>-44.3-45.1)) ; REDUCE completion
            (LEFT-BRACE (shift 'LEFT-BRACE-60.3)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(LEFT-BRACE) input))))
         (<BLOCK>-44.3-45.1
           (selectq (car input)
            ((TRIPLES FROM UNION -! SEMICOLON) ; REDUCE(45) op
              (setq input (cons '<ARCHIVE0> (apply #'(LAMBDA (A B C) (PUSH (CONS C NIL) (SPARQL-ARCHIVE-TRIPLES A)) A) (reduce 3)))))
            (WHERE (shift 'WHERE-44.2)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(TRIPLES FROM UNION -! SEMICOLON WHERE) input))))
         (WHERE-44.2
           (selectq (car input)
            (<BLOCK> (shift '<BLOCK>-44.1)) ; REDUCE completion
            (LEFT-BRACE (shift 'LEFT-BRACE-60.3)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(LEFT-BRACE) input))))
         (FROM-43.2
           (selectq (car input)
            (URI (shift 'URI-43.1)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(URI) input))))
         (<ARCHIVE>-9.1-47.6-48.4
           (selectq (car input)
            ((-! SEMICOLON) ; REDUCE(9) op
              (setq input (cons '<PREFIXED-STAT> (apply #'(LAMBDA (A) (LIST NIL A)) (reduce 1)))))
            (UNION (shift 'UNION-47.5-48.3)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(-! SEMICOLON UNION) input))))
         (UNION-47.5-48.3
           (selectq (car input)
            (TRIPLES (shift 'TRIPLES-47.4-48.2)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(TRIPLES) input))))
         (TRIPLES-47.4-48.2
           (selectq (car input)
            (<BLOCK> (shift '<BLOCK>-47.3-48.1)) ; REDUCE completion
            (LEFT-BRACE (shift 'LEFT-BRACE-60.3)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(LEFT-BRACE) input))))
         (<BLOCK>-47.3-48.1
           (selectq (car input)
            ((UNION -! SEMICOLON) ; REDUCE(48) op
              (setq input (cons '<ARCHIVE> (apply #'(LAMBDA (A B C D) (PUSH (CONS D NIL) (SPARQL-ARCHIVE-TRIPLES A)) A) (reduce 4)))))
            (WHERE (shift 'WHERE-47.2)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(UNION -! SEMICOLON WHERE) input))))
         (WHERE-47.2
           (selectq (car input)
            (<BLOCK> (shift '<BLOCK>-47.1)) ; REDUCE completion
            (LEFT-BRACE (shift 'LEFT-BRACE-60.3)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(LEFT-BRACE) input))))
         (ARCHIVE-42.5
           (selectq (car input)
            (AS (shift 'AS-42.4)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(AS) input))))
         (AS-42.4
           (selectq (car input)
            (STRING (shift 'STRING-42.3)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(STRING) input))))
         (STRING-42.3
           (selectq (car input)
            (COMMA (shift 'COMMA-42.2)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(COMMA) input))))
         (COMMA-42.2
           (selectq (car input)
            (STRING (shift 'STRING-42.1)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(STRING) input))))
         (DEFINE-197.8-198.8-199.8
           (selectq (car input)
            (PROCEDURE (shift 'PROCEDURE-199.7)) ; SHIFT op
            (AGGREGATE (shift 'AGGREGATE-198.7)) ; SHIFT op
            (FUNCTION (shift 'FUNCTION-197.7)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(PROCEDURE AGGREGATE FUNCTION) input))))
         (PROCEDURE-199.7
           (selectq (car input)
            (ID (shift 'ID-199.6)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(ID) input))))
         (ID-199.6
           (selectq (car input)
            (LEFT-PAR (shift 'LEFT-PAR-199.5)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(LEFT-PAR) input))))
         (LEFT-PAR-199.5
           (selectq (car input)
            (<VAR-LIST> (shift '<VAR-LIST>-199.4)) ; REDUCE completion
            ((FOR RIGHT-PAR RIGHT-BRACE LIMIT OFFSET ORDER HAVING GROUP VALUES LEFT-BRACE WHERE FROM -! SEMICOLON) ; REDUCE(58) op
              (setq input (cons '<VAR-LIST> (apply #'(LAMBDA (A) NIL) (reduce 0)))))
            (VAR (shift 'VAR-59.2)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(FOR RIGHT-PAR RIGHT-BRACE LIMIT OFFSET ORDER HAVING GROUP VALUES LEFT-BRACE WHERE FROM -! SEMICOLON VAR) input))))
         (<VAR-LIST>-199.4
           (selectq (car input)
            (RIGHT-PAR (shift 'RIGHT-PAR-199.3)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(RIGHT-PAR) input))))
         (RIGHT-PAR-199.3
           (selectq (car input)
            (AS (shift 'AS-199.2)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(AS) input))))
         (AS-199.2
           (selectq (car input)
            (<UPDATE> (shift '<UPDATE>-36.3-37.4-38.3-199.1)) ; REDUCE completion
            (<UPDATE0> (shift '<UPDATE0>-35.1)) ; REDUCE completion
            (WITH (shift 'WITH-34.3)) ; SHIFT op
            (DELETE (shift 'DELETE-30.1-31.2-33.4)) ; SHIFT op
            (INSERT (shift 'INSERT-32.2)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(WITH DELETE INSERT) input))))
         (<UPDATE>-36.3-37.4-38.3-199.1
           (selectq (car input)
            ((-! SEMICOLON) ; REDUCE(199) op
              (setq input (cons '<DEFINE> (apply #'(LAMBDA (A B C D E F G H) (MAKE-DEFINE-STAT :NAME C :AGG NIL :VARS E :DEFS (LIST (LIST NIL (QUOTE SPARQL) H)))) (reduce 8)))))
            (WHERE (shift 'WHERE-38.2)) ; SHIFT op
            (USING (shift 'USING-36.2-37.3)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(-! SEMICOLON WHERE USING) input))))
         (AGGREGATE-198.7
           (selectq (car input)
            (ID (shift 'ID-198.6)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(ID) input))))
         (ID-198.6
           (selectq (car input)
            (LEFT-PAR (shift 'LEFT-PAR-198.5)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(LEFT-PAR) input))))
         (LEFT-PAR-198.5
           (selectq (car input)
            (VAR (shift 'VAR-198.4)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(VAR) input))))
         (VAR-198.4
           (selectq (car input)
            (RIGHT-PAR (shift 'RIGHT-PAR-198.3)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(RIGHT-PAR) input))))
         (RIGHT-PAR-198.3
           (selectq (car input)
            (AS (shift 'AS-198.2)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(AS) input))))
         (AS-198.2
           (selectq (car input)
            (<DECL-BODY> (shift '<DECL-BODY>-198.1)) ; REDUCE completion
            (<QUERY> (shift '<QUERY>-20.3-21.4-22.3-23.2-24.2-25.4-26.3-27.4-28.3-29.3-204.1)) ; REDUCE completion
            (<FOREIGN-DECL-BODY> (shift '<FOREIGN-DECL-BODY>-202.1-203.5)) ; REDUCE completion
            (ASK (shift 'ASK-19.2)) ; SHIFT op
            (CONSTRUCT (shift 'CONSTRUCT-18.2)) ; SHIFT op
            (SELECT (shift 'SELECT-14.2-15.3-16.2-17.3)) ; SHIFT op
            (LISP (shift 'LISP-201.2)) ; SHIFT op
            (ID (shift 'ID-200.2)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(ASK CONSTRUCT SELECT LISP ID) input))))
         (<FOREIGN-DECL-BODY>-202.1-203.5
           (selectq (car input)
            ((FOR -! SEMICOLON) ; REDUCE(202) op
              (setq input (cons '<DECL-BODY> (nth 0 (reduce 1)))))
            (COST (shift 'COST-203.4)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(FOR -! SEMICOLON COST) input))))
         (COST-203.4
           (selectq (car input)
            (NUMBER (shift 'NUMBER-203.3)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(NUMBER) input))))
         (NUMBER-203.3
           (selectq (car input)
            (FANOUT (shift 'FANOUT-203.2)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(FANOUT) input))))
         (FANOUT-203.2
           (selectq (car input)
            (NUMBER (shift 'NUMBER-203.1)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(NUMBER) input))))
         (<QUERY>-20.3-21.4-22.3-23.2-24.2-25.4-26.3-27.4-28.3-29.3-204.1
           (selectq (car input)
            (<BLOCK> (shift '<BLOCK>-23.1)) ; REDUCE completion
            (<VALUES-CLAUSE> (shift '<VALUES-CLAUSE>-24.1)) ; REDUCE completion
            ((FOR -! SEMICOLON) ; REDUCE(204) op
              (setq input (cons '<DECL-BODY> (apply #'(LAMBDA (A) (LIST (QUOTE SPARQL) A)) (reduce 1)))))
            (LIMIT (shift 'LIMIT-29.2)) ; SHIFT op
            (OFFSET (shift 'OFFSET-28.2)) ; SHIFT op
            (ORDER (shift 'ORDER-27.3)) ; SHIFT op
            (HAVING (shift 'HAVING-26.2)) ; SHIFT op
            (GROUP (shift 'GROUP-25.3)) ; SHIFT op
            (VALUES (shift 'VALUES-79.5-80.7)) ; SHIFT op
            (LEFT-BRACE (shift 'LEFT-BRACE-60.3)) ; SHIFT op
            (WHERE (shift 'WHERE-22.2)) ; SHIFT op
            (FROM (shift 'FROM-20.2-21.3)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(FOR -! SEMICOLON LIMIT OFFSET ORDER HAVING GROUP VALUES LEFT-BRACE WHERE FROM) input))))
         (LISP-201.2
           (selectq (car input)
            (STRING (shift 'STRING-201.1)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(STRING) input))))
         (ID-200.2
           (selectq (car input)
            (STRING (shift 'STRING-200.1)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(STRING) input))))
         (FUNCTION-197.7
           (selectq (car input)
            (ID (shift 'ID-197.6)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(ID) input))))
         (ID-197.6
           (selectq (car input)
            (LEFT-PAR (shift 'LEFT-PAR-197.5)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(LEFT-PAR) input))))
         (LEFT-PAR-197.5
           (selectq (car input)
            (<VAR-LIST> (shift '<VAR-LIST>-197.4)) ; REDUCE completion
            ((FOR RIGHT-PAR RIGHT-BRACE LIMIT OFFSET ORDER HAVING GROUP VALUES LEFT-BRACE WHERE FROM -! SEMICOLON) ; REDUCE(58) op
              (setq input (cons '<VAR-LIST> (apply #'(LAMBDA (A) NIL) (reduce 0)))))
            (VAR (shift 'VAR-59.2)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(FOR RIGHT-PAR RIGHT-BRACE LIMIT OFFSET ORDER HAVING GROUP VALUES LEFT-BRACE WHERE FROM -! SEMICOLON VAR) input))))
         (<VAR-LIST>-197.4
           (selectq (car input)
            (RIGHT-PAR (shift 'RIGHT-PAR-197.3)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(RIGHT-PAR) input))))
         (RIGHT-PAR-197.3
           (selectq (car input)
            (AS (shift 'AS-197.2)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(AS) input))))
         (AS-197.2
           (selectq (car input)
            (<DECL-BODY-OR-MULTI> (shift '<DECL-BODY-OR-MULTI>-197.1)) ; REDUCE completion
            (<FOREIGN-DECL-BODY> (shift '<FOREIGN-DECL-BODY>-202.1-203.5)) ; REDUCE completion
            (<QUERY> (shift '<QUERY>-20.3-21.4-22.3-23.2-24.2-25.4-26.3-27.4-28.3-29.3-204.1)) ; REDUCE completion
            (<DECL-MULTIBODY> (shift '<DECL-MULTIBODY>-206.1-208.4)) ; REDUCE completion
            (<DECL-BODY> (shift '<DECL-BODY>-205.1)) ; REDUCE completion
            (FOR (shift 'FOR-207.3)) ; SHIFT op
            (ASK (shift 'ASK-19.2)) ; SHIFT op
            (CONSTRUCT (shift 'CONSTRUCT-18.2)) ; SHIFT op
            (SELECT (shift 'SELECT-14.2-15.3-16.2-17.3)) ; SHIFT op
            (LISP (shift 'LISP-201.2)) ; SHIFT op
            (ID (shift 'ID-200.2)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(FOR ASK CONSTRUCT SELECT LISP ID) input))))
         (<DECL-MULTIBODY>-206.1-208.4
           (selectq (car input)
            ((-! SEMICOLON) ; REDUCE(206) op
              (setq input (cons '<DECL-BODY-OR-MULTI> (nth 0 (reduce 1)))))
            (FOR (shift 'FOR-208.3)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(-! SEMICOLON FOR) input))))
         (FOR-208.3
           (selectq (car input)
            (STRING (shift 'STRING-208.2)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(STRING) input))))
         (STRING-208.2
           (selectq (car input)
            (<DECL-BODY> (shift '<DECL-BODY>-208.1)) ; REDUCE completion
            (<QUERY> (shift '<QUERY>-20.3-21.4-22.3-23.2-24.2-25.4-26.3-27.4-28.3-29.3-204.1)) ; REDUCE completion
            (<FOREIGN-DECL-BODY> (shift '<FOREIGN-DECL-BODY>-202.1-203.5)) ; REDUCE completion
            (ASK (shift 'ASK-19.2)) ; SHIFT op
            (CONSTRUCT (shift 'CONSTRUCT-18.2)) ; SHIFT op
            (SELECT (shift 'SELECT-14.2-15.3-16.2-17.3)) ; SHIFT op
            (LISP (shift 'LISP-201.2)) ; SHIFT op
            (ID (shift 'ID-200.2)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(ASK CONSTRUCT SELECT LISP ID) input))))
         (FOR-207.3
           (selectq (car input)
            (STRING (shift 'STRING-207.2)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(STRING) input))))
         (STRING-207.2
           (selectq (car input)
            (<DECL-BODY> (shift '<DECL-BODY>-207.1)) ; REDUCE completion
            (<QUERY> (shift '<QUERY>-20.3-21.4-22.3-23.2-24.2-25.4-26.3-27.4-28.3-29.3-204.1)) ; REDUCE completion
            (<FOREIGN-DECL-BODY> (shift '<FOREIGN-DECL-BODY>-202.1-203.5)) ; REDUCE completion
            (ASK (shift 'ASK-19.2)) ; SHIFT op
            (CONSTRUCT (shift 'CONSTRUCT-18.2)) ; SHIFT op
            (SELECT (shift 'SELECT-14.2-15.3-16.2-17.3)) ; SHIFT op
            (LISP (shift 'LISP-201.2)) ; SHIFT op
            (ID (shift 'ID-200.2)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(ASK CONSTRUCT SELECT LISP ID) input))))
         (PREFIX-12.4-13.3
           (selectq (car input)
            (URI-TAIL (shift 'URI-TAIL-13.2)) ; SHIFT op
            (PREF (shift 'PREF-12.3)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(URI-TAIL PREF) input))))
         (URI-TAIL-13.2
           (selectq (car input)
            (URI (shift 'URI-13.1)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(URI) input))))
         (PREF-12.3
           (selectq (car input)
            (URI-TAIL (shift 'URI-TAIL-12.2)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(URI-TAIL) input))))
         (URI-TAIL-12.2
           (selectq (car input)
            (URI (shift 'URI-12.1)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(URI) input))))
         (ID-173.2
           (selectq (car input)
            (<EXPR-LIST-PAR> (shift '<EXPR-LIST-PAR>-173.1)) ; REDUCE completion
            (LEFT-PAR (shift 'LEFT-PAR-181.3-182.4-183.2)) ; SHIFT op
            (return (list 'SYNTAX-ERROR (caar stack) '(LEFT-PAR) input))))
         (return 'INTERNAL-ERROR))))))
